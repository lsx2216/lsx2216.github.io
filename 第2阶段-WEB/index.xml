<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第2阶段-WEBs on lsx2216</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/</link><description>Recent content in 第2阶段-WEBs on lsx2216</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/draw/Drawing-2024-05-18-11.57.37.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/draw/Drawing-2024-05-18-11.57.37.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 能否访问 同一宿主机内 其他虚拟机 ^5CRLwAPA
能否访问 局域网内 其他虚拟机 ^DNnA3piH
能否访问 局域网内 其他物理主机 ^T2RTtK3g
host-only 仅主机模式 ^e95GzUH1
虚拟机和宿主机是否 必须在同一个网段 ^TJxFcS7i
NAT模式 Network Address Translation ^UPwIvf21
bridge 桥接模式 ^JSGSj7eV
是否占用局域网中的 一个IP地址 ^a4QVZoZ2
能否访问外网 ^22MzjxvT
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 279, &amp;#34;versionNonce&amp;#34;: 1742737789, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Fvqul4WqTUeuJTEe53v9v&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: 100, &amp;#34;y&amp;#34;: 120, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 200, &amp;#34;height&amp;#34;: 85, &amp;#34;seed&amp;#34;: 1017130771, &amp;#34;groupIds&amp;#34;: [ &amp;#34;jJ21_cqiiMs2kNPW_n1Ta&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;DNnA3piH&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;tFA-Sl24W-tK12FHzeIdW&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;s0-u3-16oxWNVA-WTBzAn&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;88nXI7nGdrQo30VIIDmYn&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1716006919879, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 111, &amp;#34;versionNonce&amp;#34;: 318869715, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;DNnA3piH&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: 150, &amp;#34;y&amp;#34;: 125, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1e1e1e&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;transparent&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 75, &amp;#34;seed&amp;#34;: 802717, &amp;#34;groupIds&amp;#34;: [ &amp;#34;jJ21_cqiiMs2kNPW_n1Ta&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [], &amp;#34;updated&amp;#34;: 1716006919879, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false, &amp;#34;fontSize&amp;#34;: 20, &amp;#34;fontFamily&amp;#34;: 1, &amp;#34;text&amp;#34;: &amp;#34;能否访问\n局域网内\n其他虚拟机&amp;#34;, &amp;#34;rawText&amp;#34;: &amp;#34;能否访问\n局域网内\n其他虚拟机&amp;#34;, &amp;#34;textAlign&amp;#34;: &amp;#34;center&amp;#34;, &amp;#34;verticalAlign&amp;#34;: &amp;#34;middle&amp;#34;, &amp;#34;containerId&amp;#34;: &amp;#34;Fvqul4WqTUeuJTEe53v9v&amp;#34;, &amp;#34;originalText&amp;#34;: &amp;#34;能否访问\n局域网内\n其他虚拟机&amp;#34;, &amp;#34;lineHeight&amp;#34;: 1.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/frag/%E6%AE%8B%E5%8D%B7-Linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/frag/%E6%AE%8B%E5%8D%B7-Linux/</guid><description>安装VMware Tools **流程: ** 以root身份登录虚拟机:
点击VMware菜单栏 虚拟机，选择 安装VMware Tools。
ls /dev: 查看 dev 中是否含有 cdrom 目录。
ls /mnt: 查看 mnt 中是否含有 cdrom 目录。
mkdir /mnt/cdrom: 在 mnt 中创建 cdrom 目录。
ls /mnt: 再次查看 mnt 中是否含有 cdrom 目录。
mount -t iso9660 /dev/cdrom /mnt/cdrom: 将光盘挂载到 /mnt/cdrom 目录。
ls /mnt/cdrom: 查看是否挂载成功，即存在VMwareTools-9.9.3-2759765.tar.gz文件。
cp /mnt/cdrom/VMwareTools-9.9.3-2759765.tar.gz ~: 将后缀名为tar.gz的文件拷贝到根目录。
ls ~: 查看根目录中是否复制成功，即存在VMwareTools-9.9.3-2759765.tar.gz文件。
umount /dev/cdrom: 解除挂载。
tar -zxvf VMwareTools-9.9.3-2759765.tar.gz: 解压安装包。
ls ~: 查看是否解压成功，vmware-tools-distrib 是源码文件目录。
cd vmware-tools-distrib: 进入到解压后的源码文件目录。
yum -y install perl gcc gcc-c++ make cmake kernel kernel-headers kernel-devel net-tools 安装编译环境:</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/qa/JB2-1-Linux-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/qa/JB2-1-Linux-QA/</guid><description>Linux和Windows操作系统的区别？ Linux和VMware的区别？ Linux虚拟机的网络配置中，桥接模式，NAT模式和仅主机模式的区别？ Linux虚拟机的网卡配置中，如何配置使用静态IP模式或使用动态IP模式？ Linux虚拟机的网卡配置中，如何配置子网IP，子网掩码和网关地址？ 如何测试虚拟机网络是否连通外网？ yum工具是做什么用的？如何将yum工具升级到最新版？ 如何使用yum工具下载安装一个软件？如何使用yum工具卸载一个软件？ vim工具是做什么用的？ zip工具是做什么用的？unzip工具是做什么用的？ ntpdate工具是做什么用的？ wget工具是做什么用的？ 如何使用yum工具查看已安装的本地软件列表？ 为何要同步虚拟机和主机的系统时间？ 工作中推荐使用的时区是什么？ 如何查看当前虚拟机的系统本地时间？ 虚拟机防火墙默认开放了哪个端口号？ 如何永久关闭虚拟机防火墙？如何查看虚拟机防火墙是否被永久关闭？ 如何在防火墙中永久开放一个5277端口？开放后必须要重启防火墙才能生效吗？ Linux文件系统中的最上层目录是什么目录？ /home 和 /root 目录的区别是什么？ 如何查看本地网络接口的详细信息？ 如何清空当前终端屏幕中的内容？ 如何切换到当前用户的主目录？ 如何展示当前目录下的全部内容，包括内容的详细信息和隐藏内容？ 如何查看当前所在位置的完整路径？ 如何在 /opt 目录中创建一个 /test/user 目录？ 如何在 /opt/test/user 目录中创建一个 zhaosi.txt 文件？ 如何删除 /opt/test 目录以及目录中的全部内容？ 如何将 /opt/test/user/zhaosi.txt 拷贝到 /usr 目录中？ 如何将 /opt/test/user/zhaosi.txt 拷贝到 /usr 目录中并重命名为 liuneng.txt 文件？ 如何将 /opt/test 目录中的全部内容拷贝到 /usr 目录中？ 如何将 /opt/test/user/zhaosi.txt 移动到 /usr 目录中？ 如何将 /opt/test/user/zhaosi.txt 移动到 /usr 目录中并重命名为 liuneng.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/res/VMWare%E5%AE%89%E8%A3%85%E6%AC%A7%E6%8B%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/res/VMWare%E5%AE%89%E8%A3%85%E6%AC%A7%E6%8B%89/</guid><description>S01. 安装欧拉系统 E01. 创建新虚拟机 武技: 使用 VMware 创建一个新的欧拉虚拟机
1. 选择安装模式 点击 新建虚拟机 按钮，在欢迎界面选择 自定义(高级)(C) 安装模式: 2. 选择兼容模式 虚拟机硬件兼容性选择 Workstation 17.5.x: 3. 稍后安装系统 选择 稍后安装操作系统(S): 4. 选择系统内核 客户机操作系统选择 Linux(L)，版本选择 其他 Linux 5.x 内核 64 位: 5. 填写虚拟机名称 虚拟机名称随意，位置路径中不要有中文和特殊符号即可: 6. 配置处理器 输入处理器数量为 2，输入每个处理器的内核数量为 2: 7. 配置内存 输入虚拟机的内存为 2048MB: 8. 配置网络类型 网络类型选择 使用网络地址转换(NAT)(E): 9. 选择IO类型 选择I/O控制器类型为 LSI Logic(L)(推荐): 10. 选择磁盘类型 选择磁盘类型为 SCSI(S)(推荐): 11. 创建磁盘 选择 创建新虚拟机磁盘(V): 12. 配置磁盘大小 设置最大磁盘大小为 40G，并勾选 将虚拟磁盘拆分成多个文件(M): 13. 指定磁盘文件 指定磁盘文件，默认即可: 14.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/frag/%E6%AE%8B%E5%8D%B7-Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/frag/%E6%AE%8B%E5%8D%B7-Docker/</guid><description>Docker搭建Node容器 武技：运行Node容器
创建并运行容器： lnx: docker run -itd --name node node:16.14.0：运行容器。 查看运行的容器： lnx: docker ps --format &amp;quot;table {{.ID}}\t{{.Names}}&amp;quot; 进入容器的内部：可用 exit 命令退出容器： lnx: docker exec -it node bash：进入Node容器。 dcr: node --version：查看Node版本。 Portainer可视化界面 心法: Docker Daemon，简称DockerD
DockerD是Docker的守护进程，监听者DockerAPI请求，管理Docker镜像，容器，网络等对象。 武技: 搭建Portainer容器作为Docker可视化界面
设置DockerDaemon服务: 否则Portainer无法连接Docker: # 修改DockerDaemon的配置文件 vim /etc/docker/daemon.json # JSON文件中默认包含一个 `{}`，需要保留 # &amp;#34;tcp://0.0.0.0:2375&amp;#34;: 表示允许任何远程客户端通过2375端口连接DockerDaemon # &amp;#34;unix://var/run/docker.sock&amp;#34;: 本地客户端将通过这个来连接DockerDaemon { &amp;#34;hosts&amp;#34;: [ &amp;#34;tcp://0.0.0.0:2375&amp;#34;, &amp;#34;unix://var/run/docker.sock&amp;#34; ] } # 重启DockerDaemon服务 systemctl daemon-reload # 重启Docker服务 systemctl restart docker # 查看2375端口是否已经放开 netstat -lnp | grep 2375 安装Portainer容器: # 创建Portainer容器相关目录 mkdir -p /opt/portainer/docker.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/qa/JB2-2-Docker-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/qa/JB2-2-Docker-QA/</guid><description> Docker是干什么用的？ Docker的镜像和Docker的容器是什么关系？ 如何查看Docker的版本？ 如何启动Docker引擎？ 如何设置Docker引擎开机自启动？ 如何查看Docker引擎当前是开启状态还是关闭状态？ 为何要配置Docker引擎的国内加速器？ 哪个命令用于搜索镜像？ 哪个命令用于拉取镜像？ 哪个命令用于展示所有镜像？ 哪个命令用于删除指定镜像？ 可以通过镜像ID来删除指定镜像吗？ 可以仅通过镜像名称来删除指定镜像吗？ 删除镜像前，必须先删除该镜像下所关联的所有的容器吗？ 如何创建并启动一个容器？ 如何展示当前运行的全部容器？ 如何展示当前运行的和未运行的全部容器？ 如何强制删除一个容器？ 如何重启一个容器？ 如何停止一个容器？ Docker Run命令中的 -i 和 -t 参数是干什么用的？ Docker Run命令中的 -d 参数是干什么用的？ Docker Run命令中的 --name 参数是干什么用的？ Docker Run命令中的 -p 参数是干什么用的？ Docker Run命令中的 -v 参数是干什么用的？ 哪个命令用于进入一个容器的内部？ 哪个命令可以从一个容器的内部退出？ 1Panel是干什么用的？ 如何给一个目录最高权限？ 哪个命令用于将一个容器打包成一个镜像？ 哪个命令用于将一个镜像备份到指定目录中？ 哪个命令用于将一个tar文件恢复成一个镜像？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-MySQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-MySQL/</guid><description>S01. Win安装MySQL E01. 卸载MySQL服务端 武技：在Win中卸载MySQL服务端
在计算机服务中停止MySQL80服务。 使用 sc delete MySQL80 命令删除MySQL80服务。 在控制面板中卸载MySQL80服务。 在资源管理器中删除 Program Files/Program Files(x86)/Program Data 中MySQL相关目录。 在注册表中删除： HKEY_LOCAL_MACHINE\SYSTEM\ControlSetXXX\Services\Eventlog\Application 中MySQL相关目录。 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application 中MySQL相关目录。 重启电脑，卸载完成。 E02. 安装MySQL服务端 武技：在Win中安装MySQL服务端
安装MySQL服务端：傻瓜式安装即可： 2502/2503错误：对 C:\Windows\Temp 文件右键属性 -&amp;gt; 安全 -&amp;gt; 添加everyone权限（完全控制）。 res：资源/图片/MySQL80安装图解/* 配置MySQL自启动：在计算机服务中，右键更改MySQL80服务的启动类型为手动。 配置MySQL环境变量： MYSQL_HOME = MYSQL80的家目录 Path = %MYSQL_HOME%\bin 测试MySQL相关命令： cmd：net start/stop mysql80: 启动/关闭MySQL服务。 cmd：mysqladmin --version：查看MySQL版本。 cmd：mysql [-D库名] [-hlocalhost] -uroot -p：登录MySQL服务。 执行计划详解 id：执行计划编号，1条SQL可以产生1或N条执行计划： 如果 id 值相同，语句会从上到下执行。 如果 id 值不同，id 值大的那条SQL语句先执行。 select_type：查询类型，即展示当前的查询是一个什么样的查询： SIMPLE：该查询不包含子查询或union查询。 PRIMARY：该查询包含子查询，即该查询是一个父查询。 SUBQUERY：该查询是一个子查询。 DEPENDENT SUBQUERY：该查询是一个关联子查询。 UNION：该查询是一个union查询。 UNION RESULT：union查询的结果集，被放到临时表中。 table：显示这一行数据是关于哪张表。 partitions：对于分区表显示分区编号，null表示未分区。 type：表示本次查询所使用的方式，除null外，效率从上到下依次降低，最好将sql提升至range以上： NULL：该查询未访问任何一个表或索引，直接返回结果，效率最高。 SYSTEM：是 CONST 的一个特例，前提是你的表中只有一行数据，效率比 CONST 更快。 CONST：该查询通过索引一次就找到了结果，相当于读了常量，一般可能出现于对唯一约束的定值查询中。 EQ_REF：该查询在连表查询中，关联字段均为唯一约束，且查询的字段是主键或关联字段。 REF：该查询按照索引精准查询，且这个索引列是不唯一的，最终返回单条记录。 REF_OR_NULL：类似于 REF，但是额外包括了对NULL值列的查询。 RANGE：该查询按照索引范围查询，如对索引进行了 between、&amp;gt;、&amp;lt;、in 等操作。 INDEX：该查询按照索引全表扫描。 ALL：该查询未使用索引，进行了全表扫描，性能最差。 possible_keys：列出所有添加了索引的字段的索引名，但这些不一定会被全部使用。 key：实际使用到的索引名，这个值会从 possible_keys 中选取，null表示实际上没有使用到任何索引。 key_len：索引字段可能的最大的字节长度，底层自己计算，并非数据的实际长度，不丢失精度的前提下越小越好。 ref：该查询中的关联字段，常量会显示 const。 rows：表示mysql认为它在找到正确结果之前必须扫描的行数，最理想的结果是1，该值为抽样统计，并不十分准确。 filtered：利用率，表示真实的结果的行数占总计扫描到的行数的百分比，利用率越大越好。 extra：备注，这里的大多数选项会对查询产生负面影响： distinct：表示使用了优化 distinct 操作。 no tables used：表示查询中没有 from 表的语句或者 from dual。 not exists：表示在某些 left join 的查询中，mysql使用了更优化的查询。 using where：表示该查询使用了where条件查询。 using index：表示该查询使用了索引查询。 using temporary：表示该查询使用了临时表保存中间结果，性能差。 using filesort：表示该查询使用了相应的排序算法进行排序，但无法使用索引完成排序。 SQL优化细则 在经常查询的字段上建立索引。 多使用SQL的内置函数。 SQL中的关键字都大写，因为数据库总是先解析SQL语句，把小写的字母转换成大写的再执行。 只要有可能，在程序中尽量多使用 COMMIT，因为它可以释放一些资源： 包括回滚段上用于恢复数据的信息。 包括被程序语句获得的锁。 包括redo log buffer中的空间。 包括数据库为管理上述3种资源中的内部花费。 在索引列上使用NOT会导致索引失效。 避免触发隐式转换，如果字段是字符类型，就不要用数组类型的值，且如果恰好是索引列，索引会失效。 把大筛选量的 WHERE 往后排，因为数据库采用自后而前的顺序解析WHERE条件，根据这个原理，那些可以过滤掉最大数量记录的WHERE条件尽量写在所有WHERE条件的末尾。 全查中避免使用 *，mysql在解析的过程中，会将 * 依次转换成所有的列名，这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间，虽然这个时间几乎可以忽略，但是 * 的代码可读性仍然很差。 删表记录时，用 TRUNCATE 替代 DELETE，当删除表中的记录时，在通常情况下，回滚段(rollback segments) 用来存放可以被恢复的信息，如果你没有COMMIT事务，数据库会将数据恢复到删除之前的状态，准确地说是恢复到执行删除命令之前的状态，而当运用 TRUNCATE 时, 回滚段不再存放任何可被恢复的信息，当命令运行后，数据不能被恢复，因此很少的资源被调用，执行时间也会很短。 多使用表的别名，当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个字段上，这样一来，就可以减少解析的时间并减少那些由列名歧义引起的语法错误。 用 NOT EXISTS 替代 NOT IN，在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接，在这种情况下，使用 EXISTS 或 NOT EXISTS 通常将提高查询的效率。在写成外连子查询中，NOT IN 子句将执行一个内部的排序和合并，无论在哪种情况下，NOT IN 都是最低效的，因为它对子查询中的表执行了一个全表遍历。 用 EXISTS 替换 DISTINCT，当提交一个包含一对多表信息的查询时，避免在SELECT子句中使用 DISTINCT，一般可以考虑用 EXIST 替换，因为RDBMS核心模块将在子查询的条件一旦满足后，立刻返回结果。 避免在索引列上进行计算，避免在索引列上使用计算，会导致索引失效。 多使用 &amp;gt;= 替代 &amp;gt;，两者的区别在于，&amp;gt;3 首先定位到 ID=3 的记录并且向后扫描到第一个ID大于3的记录，而 &amp;gt;=3 将直接跳到第一个 ID=3 的记录。 用UNION替换OR (适用于索引列) ，通常情况下，用UNION替换WHERE子句中的OR将会起到较好的效果，对索引列使用OR将造成全表扫描。注意，以上规则只针对多个索引列有效，如果字段没有被索引，查询效率可能会因为你没有选择OR而降低。 避免在索引列上使用 IS NULL 和 IS NOT NULL ，避免在索引中使用任何可以为空的列，数据库将无法使用该索引。对于单列索引，如果列包含空值，索引中将不存在此记录。对于复合索引，如果每个列都为空，索引中同样不存在此记录。如果至少有一个列不为空，则记录存在于索引中。举例：如果唯一性索引建立在表的A列和B列上，并且表中存在一条记录的A，B 值为(123，null)， 数据库将不接受下一条具有相同A，B值（123，null）的记录(插入) 。若所有的索引列都为空，数据库将认为整个键值为空而空不等于空。因此你可以插入1000条具有相同键值的记录，当然它们都是空，因为空值不存在于索引列中，所以WHERE子句中对索引列进行空值比较将使索引失效。 需要当心的WHERE子句，某些SELECT语句中的WHERE子句会让索引失效，这里有一些例子： !</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-Oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-Oracle/</guid><description>CH1. Oracle基础入门 数据库就是存放与操作数据的库： 数据库能够存储大量的数据，方便检索和访问。 数据库可以保持信息的一致和完整，还可以通过组合分析，得到新的有用的信息等。 越大的数据库安全性越高，数据负载能力越强，价格也越贵。 Oracle是甲骨文公司生产的，目前最流行CS体系结构的数据库之一： oracle数据库环境，在一台机器上只有一个。 一个数据库环境下，可以有多个oracle实例（DCA）。 一个数据库实例的本质就是一组后台进程。 每个数据库实例下都有多组独立的用户，用户名不能重复。 数据库中的数据最终将存到表中。 通过指定的用户去访问，且在一个用户下表名不能重复。 CH2. Oracle服务安装 卸载服务端 计算机 &amp;gt; 管理 &amp;gt; 服务 &amp;gt; 终止所有oracle开头的服务； cmd &amp;gt; sc delete + oracle服务名 &amp;gt; 删除服务； regedit &amp;gt; 删除以下目录下的所有oracle入口： HKEY_LOCAL_MACHINE\SOFTWARE 下； HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet(X)\Services 下； HKEY_CLASSES_ROOT 下； 从启动组和程序菜单中，删除oracle的文件夹和图标； 重启电脑，多次试验表明，不重启就卸载不干净； 删除E盘，和C盘中的oracle文件夹； 安装服务端 数据库安装之前确认信息： 确保计算机没有安装过Oracle或已卸载干净。 确保自己是管理员账户。 防火墙和用户控制必须关闭。 计算机名必须不能是中文名。 安装全局数据库： 数据库的运行环境 &amp;raquo; DateBase(DB) 安装数据库实例： 安装环境下的一个真实的数据库 &amp;raquo; Datebase Configuration Assistant(DCA); 数据库实例的名称长度不能超过7个字符。 安装监听器： 安装监听数据库操作 &amp;raquo; Net Configuration Assistant(NCA); 安装网络连接管理： 负责数据库的网络服务和帐号密码（一个连接） &amp;raquo; Net Manager(NM); 如果scott账户忘记解锁： cmd: sys as sysdba/123456789 登录 cmd: alter user scott account unlock 启动服务端 计算机 - 管理 - 服务 - windows平台下必须启动OracleServiceSID和一个监听： sys超级用户，具有sysdba角色 system是用户管理员，具有sysoper的角色 scott是示例用户，需要自定义解锁 利用DOS（管理员方式启动）登录数据库： cmd: sqlplus scott/tiger cmd: sqlplus scott as sysdba / scott：以sysdba的身份进入，拥有更多操作权限。 如果弹出协议适配器错误/无法初始化oracle调用界面： 设置一个Oracle的环境变量。 安装客户端 安装PLSQL，通过Session框登录： 如果PLSQL看不到我们的连接，可以先三次失败登录进入界面，然后选择 Tools -&amp;gt; Preferences -&amp;gt; Connection，然后选择OracleHome和OCI_library的路径。 CH3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/qa/JB2-3-MySQL-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/qa/JB2-3-MySQL-QA/</guid><description> 如何将MySQL卸载干净？ MySQL安装成功后必须配置环境变量吗？ 一台电脑总可以安装多个MySQL数据库吗？ 关系型数据库和非关系型数据库各自的优缺点是什么？ MySQL目前是哪家公司旗下的产品？ MySQL是免费开源的吗？ MySQL和Oracle的区别有哪些？ MySQL支持Java吗？ MySQL可以自己更改吗？ RDBMS是什么意思？ “冗余”是什么意思，“冗余”是好事吗？ MySQL的存储引擎有哪两种？什么区别？你用的是哪种？ 如何使用命令行启动和停止MySQL服务？ 如何将MySQL设置为开机不自启？ 如何使用Navicat创建一个用户？（简述） 使用Navicat创建一个连接的时候，如何保证其可以被远程访问？ 如何在命令行中使用root/root帐号登录MySQL? 如何退出命令行中的MySQL界面？ 如何查询自己安装的MySQL的版本？ 如何使用命令行创建数据库“test001”，并为其设置编码为“utf8mb4”？ 如何使用命令行删除一个数据库“test001”？ 如何使用命令行展示当前连接下的所有数据库？ 什么叫SQL？DDL？DML？DQL？DCL？ 所有数据库使用的SQL都是遵循同一标准吗？语句完全一样吗？ 查询都是以“select”开头的吗？ SQL语句区分大小写吗？表中的数据区分大小写吗？ SQL注释都有哪几种？ if()函数和ifnull()函数有什么区别？ distinct()函数是干嘛用的？只能作用于单一字段吗？ order by必须是SQL语句中最后一步执行的吗？ order by后面可以写多个字段吗？ and和or谁的优先级更高？ &amp;ldquo;in(100,200)&amp;rdquo; 和 &amp;ldquo;between 100 and 200&amp;rdquo; 有什么区别？ between&amp;hellip;and&amp;hellip;，包括两端的值吗？ 模糊查询一共有几种占位符？ 如何模糊查询名字中带百分号的，和名字中带单引号的？ 如何自定义MySQL中的转义字符？ group by分组查询的意义是什么？ 聚合函数只有分组的时候能用吗？ 什么时候要用having替换where？ 单行子查询、多行子查询和关联子查询各自的特点分别是什么？ MySQL中分页查询的关键字是什么？ MySQL中，你所总结的分页查询的公式是什么？ SQL92中联表和SQL99中联表的区别是什么？ 一张表可以自己联自己吗？ union 和 union all的区别是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/MySQL%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/MySQL%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</guid><description>S01. MySQL搭建主从架构 E01. 主从复制流程 1. 配置主服务器 心法：配置MySQL主服务器 mysql-master
需要为主服务器配置一个数字类型的唯一标识ID。 主服务器需要启用二进制日志功能，用于记录所有更改的SQL语句。 2. 配置从服务器 心法：配置MySQL主服务器 `mysql-slave
需要为从服务器配置一个数字类型的唯一标识ID。 每个从服务器都需要指定主服务器的主机名，端口号等信息，以便从服务器可以连接到主服务器。 3. 启动主从复制 将从服务器连接到主服务器并启动主从复制。 需要在从服务器上指定从哪个二进制日志文件 File 的哪个位置 Position 开始复制数据。 从服务器连接到主服务器并请求从指定二进制日志位置开始复制数据。 4. 开始复制数据 主服务器将二进制日志中的更改发送到从服务器。 从服务器读取并应用这些更改，以便从服务器上的数据与主服务器上的数据保持同步。 武技: 在Docker中搭建MySQL集群容器 - 1主1从，读写分离
E02. 搭建Master节点 1. 准备相关目录 # 创建MySQL主节点容器相关目录 mkdir -p /opt/mysql/cluster/master/conf; mkdir -p /opt/mysql/cluster/master/data; mkdir -p /opt/mysql/cluster/master/log; chmod -R 777 /opt/mysql; 2. 创建配置文件 开发 my.cnf 配置文件：用于使MySQL容器支持utf8mb4编码和加8时区： touch /opt/mysql/cluster/master/conf/my.cnf
[client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character-set-client-handshake = FALSE character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci default-time-zone = &amp;#39;Asia/Shanghai&amp;#39; default_authentication_plugin = mysql_native_password # 每个节点都有一个唯一标识，只能为数字且不能重复 server_id = 01 # binlog日志名称，随意 log-bin = log-bin-master # 主从复制过程，忽略mysql本身的变化，只关注业务数据的变化 binlog-ignore-db = mysql # binlog日志缓存大小 binlog_cache_size = 1M # 主从复制模式为混合模式 binlog_format = mixed # binlog日志过期时间，默认为0，表示永不过期 expire_logs_days = 7 3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/%E5%91%98%E5%B7%A5%E5%92%8C%E9%83%A8%E9%97%A8SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/%E5%91%98%E5%B7%A5%E5%92%8C%E9%83%A8%E9%97%A8SQL/</guid><description>-- 部门表 CREATE TABLE dept ( deptno INT PRIMARY KEY, -- 部门编号 dname VARCHAR(14), -- 部门名称 loc VARCHAR(13), -- 部门地址 created datetime, -- 创建时间 updated datetime -- 修改时间 ); INSERT INTO dept VALUES (10, &amp;#39;ACCOUNTING&amp;#39;, &amp;#39;NEW YORK&amp;#39;, now(), now()), (20, &amp;#39;RESEARCH&amp;#39;, &amp;#39;DALLAS&amp;#39;, now(), now()), (30, &amp;#39;SALES&amp;#39;, &amp;#39;CHICAGO&amp;#39;, now(), now()), (40, &amp;#39;OPERATIONS&amp;#39;, &amp;#39;BOSTON&amp;#39;, now(), now()); -- 员工表 CREATE TABLE emp ( empno INT PRIMARY KEY, -- 员工编号 ename VARCHAR(10), -- 员工名称 job VARCHAR(9), -- 工作 mgr DOUBLE, -- 直属领导编号 hiredate DATE, -- 入职时间 sal DOUBLE, -- 工资 comm DOUBLE, -- 奖金 deptno INT, -- 部门号 created datetime, -- 创建时间 updated datetime, -- 修改时间 FOREIGN KEY (deptno) REFERENCES dept (deptno) ); INSERT INTO emp VALUES (7369, &amp;#39;SMITH&amp;#39;, &amp;#39;CLERK&amp;#39;, 7902, &amp;#39;1980-12-17&amp;#39;, 800, NULL, 20, now(), now()), (7499, &amp;#39;ALLEN&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-02-20&amp;#39;, 1600, 300, 30, now(), now()), (7521, &amp;#39;WARD&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-02-22&amp;#39;, 1250, 500, 30, now(), now()), (7566, &amp;#39;JONES&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839, &amp;#39;1981-04-02&amp;#39;, 2975, NULL, 20, now(), now()), (7654, &amp;#39;MARTIN&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-09-28&amp;#39;, 1250, 1400, 30, now(), now()), (7698, &amp;#39;BLAKE&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839, &amp;#39;1981-05-01&amp;#39;, 2850, NULL, 30, now(), now()), (7782, &amp;#39;CLARK&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839, &amp;#39;1981-06-09&amp;#39;, 2450, NULL, 10, now(), now()), (7788, &amp;#39;SCOTT&amp;#39;, &amp;#39;ANALYST&amp;#39;, 7566, &amp;#39;1987-07-13&amp;#39;, 3000, NULL, 20, now(), now()), (7839, &amp;#39;KING&amp;#39;, &amp;#39;PRESIDENT&amp;#39;, NULL, &amp;#39;1981-11-17&amp;#39;, 5000, NULL, 10, now(), now()), (7844, &amp;#39;TURNER&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-09-08&amp;#39;, 1500, 0, 30, now(), now()), (7876, &amp;#39;ADAMS&amp;#39;, &amp;#39;CLERK&amp;#39;, 7788, &amp;#39;1987-07-13&amp;#39;, 1100, NULL, 20, now(), now()), (7900, &amp;#39;JAMES&amp;#39;, &amp;#39;CLERK&amp;#39;, 7698, &amp;#39;1981-12-03&amp;#39;, 950, NULL, 30, now(), now()), (7902, &amp;#39;FORD&amp;#39;, &amp;#39;ANALYST&amp;#39;, 7566, &amp;#39;1981-12-03&amp;#39;, 3000, NULL, 20, now(), now()), (7934, &amp;#39;MILLER&amp;#39;, &amp;#39;CLERK&amp;#39;, 7782, &amp;#39;1982-01-23&amp;#39;, 1300, NULL, 10, now(), now());</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/frag/%E6%AE%8B%E5%8D%B7-JSP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/frag/%E6%AE%8B%E5%8D%B7-JSP/</guid><description>JSP概念入门 JSP（Java Server Pages）是由Sun公司倡导，许多公司参与一起建立的一种动态网页技术标准。它是在传统的网页HTML文件中插入java代码段（Scriptlet）和JSP标记（Tag），从而形成jsp文件（*.jsp）。 公式：JSP = HTML + JAVA + JSP自己的标签。 Servlet是JSP的技术基础，大型的Web项目需要JSP和Servlet配合，你的JSP最终会变成一个完整的servlet在web应用中运行，它与其他的servlet大体相似，只不过这个servlet是由容器为你编写。 JSP标签 指令标签 指令主要用于为转换阶段提供整个JSP页面的相关信息，指令不会产生任何的输出到当前的输出流中： 指令有三种：page、include和taglib。 指令元素的语法是：&amp;lt;%@ 指令 {属性=&amp;quot;值&amp;quot;} %&amp;gt; page：主要是为容器提供一些信息，容器把你的JSP转换为Servlet的时候需要用到这些信息： 属性import：定义java的import语句，所定义的语句会自动增加到生成的Servlet类中。 属性isThreadSafe：默认为true，如果改为false，代表改Servlet使用SingleThreadModel，并不建议这么修改。 属性contentType：定义JSP响应的MIME类型。 属性isELIgnored：默认为false，如果改为true，代表在页面忽略EL语法。 属性isErrorPage：默认为false，如果改为true，代表这个JSP为其它某个JSP的错误页面，可以使用exception内置对象。 属性errorPage：指定一个JSP路径，这个路径是一个错误JSP页面，如果本页面发生异常，将异常发送到你指定的错误JSP页面中进行处理。 属性language：定义了页面可使用的语言，目前只有java。 属性session：默认为true，如果改为false，则本页面无法使用session对象。 属性pageEncoding：定义JSP的字符编码，默认ISO-8859-1。 taglib：主要定义JSP可以使用的标记库，如c标签，s标签等。 include：主要定义在转换过程中，添加到当前页面的文本和代码，从而达到代码重用。 武技：使用page指令导入包
&amp;lt;!--java.lang/javax.servlet/javax.servlet.http/javax.servlet.jsp 这四个包是默认导入的--&amp;gt; &amp;lt;%@ page language=&amp;#34;java&amp;#34; import=&amp;#34;java.util.*,java.text.*&amp;#34; pageEncoding=&amp;#34;UTF-8&amp;#34; %&amp;gt; Scriptlet代码 JSP中可以使用Scriptlet放入常规的Java代码，所谓的Scriptlet就是放在 &amp;lt;%...%&amp;gt; 标记中的Java代码。 武技：Scriptlet代码
&amp;lt;% out.println(User.getName()); %&amp;gt; &amp;lt;% String path = request.getContextPath(); %&amp;gt; 表达式代码 表达式元素可以视为Scriptlet代码（java代码段）的简洁写法，如： &amp;lt;%= User.getName() %&amp;gt; &amp;lt;%= path %&amp;gt; 注意表达式后面不能添加分号： 因为容器看到 &amp;lt;%=User.getName()%&amp;gt; 的时候，会将其转换成 &amp;lt;% out.println(User.getName()); %&amp;gt; 写法。 如果你添加了分号，会变成 &amp;lt;% out.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/res/%E5%B0%8F%E8%AF%B4-Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/res/%E5%B0%8F%E8%AF%B4-Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>Servlet生命周期小说
CH1. 启动服务器 我叫 HelloServlet.class，我是一个字节码文件，我出生在一个混沌的世界中，我对出生的印象很模糊，不知道自己的父母是谁。
我听见有人在敲我的门，打开门后看见的是一个一脸严肃的人。
&amp;ldquo;你好，我叫类加载器，特意来要带你离开这里。&amp;rdquo;
&amp;ldquo;带我去哪里？&amp;rdquo;
&amp;ldquo;Tomcat服务器已经启动了，我需要把一些类加载到内存中去&amp;hellip;&amp;rdquo;
&amp;ldquo;所有的类都要加载吗？&amp;rdquo;
&amp;ldquo;不，只需要一些特殊的类，它们都是 HttpServlet 的孩子&amp;hellip;&amp;rdquo;
&amp;ldquo;你是怎么找到我的？&amp;rdquo;
&amp;ldquo;Web容器手里有一份部署文件名单 web.xml，我通过上面的地址 &amp;lt;servlet-class&amp;gt;/@WebServlet 找到了你，你是最后一个。&amp;rdquo;
“我一直想问，我是从哪来的？是你口中那个Web容器创造的我吗？”
&amp;ldquo;没错，服务器启动的时候，Web容器就已经根据 HelloServlet.java 来编译创造了你，它是你的本体。&amp;rdquo;
&amp;ldquo;那我的本体现在在哪？&amp;rdquo;
&amp;ldquo;因为它比较重要，所以它不会被发布到服务器，仍在硬盘世界里，你是找不到它的，其余更多的内容你就不要再问了。&amp;rdquo;
我哦了一声，跟着它终于来到了服务器中，映入眼帘的是一个公告板，上面写着一句话：“项目的首页是index.html”。
“这是什么意思？”我指着公告板问类加载器。
他回答我说：“这个板子只有一个，它叫做 ServletContext，上面的是整个工程的配置信息，所有的Servlet都能看见这块板子&amp;quot;。
我点点头，然后被他带进了一个名字叫做 WEB-INF/classes 的房间中。
&amp;ldquo;接下来我要干点什么？&amp;rdquo;
&amp;ldquo;什么都不用做，等着就行了，会有人来找你的，我得走了，再见！&amp;rdquo;
CH2. 来请求了 浑浑噩噩中，突然脑袋上方传来一个声音：&amp;ldquo;醒一醒！&amp;rdquo;
我被吓了一跳，连忙问道：“你是谁？”
“我是Web容器，有客户发请求了，想要访问你，现在把你的 init() 方法执行一下，这里有一张你的任务清单，每一个Servlet都会有一张，拿好了。&amp;quot;
我伸手拿过这张任务清单，上面的标题是：servletConfig ，上面已经详细的纪录了我的所有出生信息和初始化参数，但是最不能让我容忍的是，我居然有一个工作小名，叫abc。”
&amp;ldquo;没问题，但是我的 init() 方法里什么都没有，是不是就不用做什么了？&amp;rdquo;
&amp;ldquo;嗯对。&amp;rdquo;
Web容器话音未落，身后已经多了一个人，他对我说道：“你好，我是一个线程，我叫0x9527，是老大分配过来的。”
&amp;ldquo;你要做什么？&amp;rdquo;
&amp;ldquo;我需要把你的 service() 执行一下，正好我刚拿到老大创建的 request 和 response。对了，用户发送的是一个get请求，service() 方法会自动调用 doGet() ，并且把这两个参数传递给 doGet() 方法，然后我要执行它里面的内容！&amp;rdquo;
话音未落，突然身后又多了一个人，他对我说道：“你好，我是一个线程，我叫0x9528，是老大分配过来的。”
&amp;ldquo;又来一个？&amp;rdquo;
我回过身问0x9527怎么办，0x9527淡定地回复我说：“没关系，我们所有线程都可以同时工作，互相不干扰，因为我们谁都没有带锁，如果涉及到共享数据，我们可能会干一架，你在旁边看就好了。”
过了几分钟，两个人都把活干完了，并且他们的请求已经得到了正确的响应，然后他们先后对我说了再见，并且回到了线程池中，临走的时候0x9527还把那两个参数随手一扔，跟我说这两个参数已经没有什么用了，扔地上吧，一会儿GC大妈会过来处理。
CH3. 关闭服务器 我的生活就在这里日复一日，直到有一天，头顶又传来那个讨厌的声音：“abc！服务器要重启了！请调用一下你的 destroy() 方法，留最后的遗言！”
&amp;ldquo;可是我的 destroy() 方法中没有任何代码.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/frag/%E6%AE%8B%E5%8D%B7-HTML5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/frag/%E6%AE%8B%E5%8D%B7-HTML5/</guid><description>H5-绘图画布Canvas &amp;lt;canvas&amp;gt; 是HTML5中的一个画布容器标签，需要借助canvas的API和JS操作来实现画图等操作。 &amp;lt;canvas&amp;gt; 只有 width/height 两个可选属性，默认300px宽，150px高： 设置画布容器的宽高时，尽量按2比1的比例扩张或者缩放，否则容易发生图形扭曲。 &amp;lt;canvas&amp;gt; 中的文字或 &amp;lt;img&amp;gt; 图片仅在浏览器不支持该标签时才会展示。 &amp;lt;canvas&amp;gt; 中的元素都以画布的 [0,0] 圆点为相对点来设置坐标。 在JS中获取Canvas核心对象： document.querySelector('#canvas').getContext('2d')：单词 2d 不能大写。 武技：在HTML中布局Canvas容器，并在JS中获取Canvas核心对象
&amp;lt;style&amp;gt; .body { margin-top: 10px; text-align: center; } .body canvas { background: wheat; } &amp;lt;/style&amp;gt; &amp;lt;section class=&amp;#34;body&amp;#34;&amp;gt; &amp;lt;canvas id=&amp;#34;canvas&amp;#34; width=&amp;#34;600&amp;#34; height=&amp;#34;300&amp;#34;&amp;gt;您的浏览器不支持Canvas画布&amp;lt;/canvas&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;script&amp;gt; onload = () =&amp;gt; { // 获取canvas核心对象 let canvas = document.querySelector(&amp;#39;#canvas&amp;#39;).getContext(&amp;#39;2d&amp;#39;); if (!canvas) { alert(&amp;#39;您的浏览器不支持Canvas画布&amp;#39;); return; } console.log(&amp;#39;您的浏览器支持Canvas画布&amp;#39;) } &amp;lt;/script&amp;gt; 绘制路径 路径是图形的核心，从下笔的起点到终点，最终会形成一个闭合图形： 线段，圆形，多边形等属于路径，需要设置起始/关闭路径。 矩形，文字，图片等不属于路径，可以不用设置起始/关闭路径，但设置上也无妨。 设置画笔相关参数：建议在起始路径之前设置： canvas.lineWidth：画笔宽度。 canvas.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/qa/JB2-7-HTML5-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/qa/JB2-7-HTML5-QA/</guid><description> 如何理解&amp;quot;超文本标记语言&amp;quot;？ HTML5文件的两种后缀 .html 和 .htm 有什么区别？ HTML5中，单标签，双标签和组合标签有什么区别？ HTML5中，如何为一个标签添加属性？请举例说明。 HTML5中，id属性和name属性有什么区别？ HTML5中，如何添加注释？ HTML5中的文档声明是怎么编写的？ HTML5中，&amp;lt;html&amp;gt; 标签的作用是什么？ HTML5中，&amp;lt;head&amp;gt; 标签的作用是什么？ HTML5中，&amp;lt;body&amp;gt; 标签的作用是什么？ HTML5中，如何设置页面标题？ HTML5中，如何实现换行和空格的效果？ HTML5中，&amp;lt;hr&amp;gt; 标签的作用是什么？ HTML5中，&amp;lt;div&amp;gt; 标签和 &amp;lt;p&amp;gt; 标签的区别是什么？ HTML5中，&amp;lt;div&amp;gt; 新增了哪些语义化的新标签？ HTML5中，&amp;lt;div&amp;gt; 标签和 &amp;lt;span&amp;gt; 标签的区别是什么？ HTML5中，如何使文本加粗，倾斜以及添加下划线？ HTML5中，如何添加1到6号文字标题？ HTML5中，如何添加超链接标签，使用哪个属性设置跳转路径？ HTML5中，超链接标签中的 target 有哪些可选项，分别对应什么效果？ HTML5中，如何引入一张图片？ HTML5中，如何开发有序列表和无序列表，二者有什么区别？ HTML5中，开发一个最简表格都需要使用到哪个标签？ HTML5中，表格标签中的 &amp;lt;td&amp;gt; 和 &amp;lt;th&amp;gt; 有什么区别？ HTML5中，表格如何水平合并单元格，如何垂直合并单元格？ HTML5中，&amp;lt;form&amp;gt; 标签的作用是什么，使用哪个属性设置表单提交路径？ HTML5中，表单的GET方式提交和POST方式提交有什么区别？ HTML5中，表单可以设置 target 属性吗，有什么用？ HTML5中，&amp;lt;input&amp;gt; 中的 type 属性都有哪些可选值？ HTML5中，&amp;lt;input&amp;gt; 中的 disabled 属性和 readonly 属性有什么区别？ HTML5中，&amp;lt;input&amp;gt; 中的 placeholder 属性有什么用？ HTML5中，如何开发一个下拉菜单？ HTML5中，如何开发一个多行文本框？ HTML5中，如何开发一个普通按钮，提交按钮和重置按钮？ 如何理解&amp;quot;层叠式样式表&amp;quot;？ CSS3的继承性，优先级和层叠性？ CSS3的样式设计，从编写位置上，可以分为哪三种？ CSS3中的标签选择器，id选择器和class选择器有什么区别？ CSS3中，如何选择 &amp;lt;p class=&amp;quot;a&amp;quot;&amp;gt; 标签中全部的 &amp;lt;h4&amp;gt; 标签？ CSS3中，如何选择 &amp;lt;p class=&amp;quot;a&amp;quot;&amp;gt; 标签以及全部的 &amp;lt;h4&amp;gt; 标签？ CSS3中，对文本添加前景颜色样式有几种方式？ CSS3中，如何同时对文本添加加粗，倾斜和下划线样式？ CSS3中，如何对文本添加字号大小样式？ CSS3中，如何对容器添加内容居中样式？如何对容器添加自己居中样式？ CSS3中，如何对文本添加行高样式？ CSS3中，如何取消列表的项目标记？ CSS3中，如何显示表格的边框以及让单元格的边框折叠无缝隙？ CSS3中，如何对容器添加宽度，高度和背景颜色样式？ CSS3中，容器的外边距和内边距有什么区别？ CSS3中，盒模型的三种形态有什么区别？如何设置？ CSS3中，如何设置容器的背景图片？ CSS3中，使用 display:none 和 visibility:hidden 的区别是什么？ 如何理解JavaScript这门语言以及它和ECMAScript的关系？ ES6中，BOM和DOM的区别是什么？ ES6中，JS代码从编写位置上，可以分为哪三种？ ES6中，页面加载函数如何编写？在什么时机执行？ ES6中，如何将数据打印到控制台？控制台结果在哪里可以查看到？ ES6中，如何从DOM树中抓取一个 &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/button&amp;gt; 按钮元素？ ES6中，如何从DOM树中抓取全部 &amp;lt;button class=&amp;quot;a&amp;quot;&amp;gt;&amp;lt;/button&amp;gt; 按钮元素？ ES6中，如何为一个按钮元素挂载点击事件，鼠标移入事件，鼠标移出事件和丧失焦点事件？ ES6中，如何设计在点击一个按钮时，跳入百度页面。 ES6中，alert() 弹窗和 confirm() 弹窗有什么区别？ ES6中，innerText 属性和 innerHTML 属性有什么区别？ ES6中，如何使用JS代码提交 &amp;lt;form id=&amp;quot;loginForm&amp;quot;&amp;gt;&amp;lt;/form&amp;gt; 表单？ ES6中，使用 var 定义变量和 let 定义变量的区别是什么？ ES6中，如何定义一个常量？ ES6中，包含几种数据类型？ ES6中，=，== 和 === 三者有什么区别？ ES6中，允许字符串相减吗？什么效果？ ES6中，如何声明一个方法？ ES6中，如何使用不定长参数？ ES6中，若不使用 return 来指定返回值，则最终返回什么类型？ ES6中，函数中可以使用this关键字吗？表示什么？ ES6中，如何定义一个数组？如何遍历一个数组？ ES6中，JSON数据格式和数组数据格式的区别是什么？ ES6中，如何定义一个JSON对象？如何遍历一个JSON对象？ ES6中，如何向JSON对象中添加一个键值对？如何从JSON对象中删除一个指定的键值对？ ES6中，如何将JSON对象转换为一个字符串？如何将字符串解析为一个JSON对象？ ES6中，Cookie，SessionStorage和LocalStorage的区别是什么？ ES6中，Interval定时器和Timeout定时器的区别是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JavaScript/</guid><description>JS-异步调用AJAX Asynchronous Javascript And XML，简称AJAX，即异步的JS和XML组合技术，以异步的方式和服务器通信（交换数据），可以产生局部刷新页面数据的效果。 开发Ajax工具 武技：开发 ajax-util.js 工具
创建兼容性AJAX核心对象：负责与服务器通信： let xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXobject('Microsoft.xmlHTTP') 创建请求状态码监听函数：在请求状态码 xhr.readyState 发生改变时触发： xhr.onreadystatechange = () =&amp;gt; {}：必须写于 open() 之前。 xhr.readyState === 0：初始状态，尚未调用 open() 但请求代理已被创建。 xhr.readyState === 1：通信通道建立成功，即 open() 已被成功调用。 xhr.readyState === 2：请求已被服务器接收，即 send() 已被成功调用，此时头部和状态信息均可获得。 xhr.readyState === 3：请求处理中，此时 responseText 属性已经包含部分数据。 xhr.readyState === 4：请求已完成，表示响应已就绪。 xhr.readyState === 4 &amp;amp;&amp;amp; xhr.status === 200：请求已完成，且响应成功。 xhr.responseText/responseXML：响应成功时，获取TEXT类型/XML类型的响应内容。 建立通信通道：需指定请求方式，目标地址和是否异步： xhr.open(&amp;quot;GET&amp;quot;, &amp;quot;/api/v1/user/select&amp;quot;, true)：建立异步的GET请求。 xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;)：POST请求需要设置此请求头。 发送AJAX请求： xhr.send(data)：POST请求在 send() 参数中传递数据。 xhr.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JQuery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JQuery/</guid><description>CH01. JQ基础入门 随着WEB2.0的兴起，JavaScript越来越受到重视，一系列JavaScript程序也蓬勃发展起来，从早期的prototype，DOJO到06年的jQuery，再到07年的ExtJs，互联网正在掀起异常JavaScript风暴，jQuery以其独特优雅的姿态，始终处于这场风暴的中心，受到越来越多的人追捧。&amp;ndash; 《锋利的jQuery》
JavaScript Query 简称JQuery或JQ，是一个于2006年发布的开源JS库，优化了HTML文档操作，事件处理，动画设计和Ajax交互等内容。 EP01. JQ加载函数 心法: JQ加载函数
JQ的加载函数在页面的DOM元素加载完毕后就立即执行，且多个加载函数同时生效并依次执行: ES5加载函数格式 ES6加载函数格式 $(function(){..}) $(() =&amp;gt; {..}) 武技: 测试JQ加载函数
开发页面 view/加载函数.html: &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;../static/script/jquery-3.6.0.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 开发脚本: $(document).ready(() =&amp;gt; console.log(&amp;#34;hello world 01...&amp;#34;)); $(() =&amp;gt; console.log(&amp;#34;hello world 02...&amp;#34;)); EP02. JQ对象转换 心法: JQ对象转换
JS对象和JQ对象方法不互通，但可以相互转换: document.querySelector('#div01'): 获取 HTMLXXXElement 类型的JS对象。 $(&amp;quot;#div01&amp;quot;): 获取 Object 类型的JQ对象。 JS对象转JQ对象 JQ对象转JS对象: JQ对象 = $(JS对象) JS对象 = JQ对象[0] 或 JS对象 = JQ对象.get(0) 武技: 测试JQ对象转换
开发页面 view/对象转换.html: &amp;lt;section id=&amp;#34;msg&amp;#34;&amp;gt;你好&amp;lt;/section&amp;gt; &amp;lt;button id=&amp;#34;convert-btn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;测试对象转换&amp;lt;/button&amp;gt; 开发脚本: $(() =&amp;gt; { document.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/ajax-util.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/ajax-util.js/</guid><description>/* * 封装ajax()方法，负责利用AJAX发送请求，参数是一个JSON数据: * url: AJAX请求目标地址，必写。 * type: AJAX发送请求的方式，默认为GET。 * async: AJAX是否开启异步，默认为异步true，改为false则表示同步。 * data: POST方式使用JSON类型的date传值，GET方式使用查询串进行传值。 * success: 回调函数，ajax帮我们调用的一个函数，函数的第一个参数中包含了响应的数据。 */ function ajax(params) { // 获取JSON参数中的url值 let url = params[&amp;#34;url&amp;#34;]; // 若JSON参数中的url为空，则直接使用return结束函数调用 if (!url) { alert(&amp;#34;参数url不能为空！&amp;#34;); return; } // 创建兼容性AJAX核心对象: 负责与服务器通信 let xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXobject(&amp;#39;Microsoft.xmlHTTP&amp;#39;); // 获取JSON参数中的type值，并强制转为大写，默认值GET let type = params[&amp;#34;type&amp;#34;] ? params[&amp;#34;type&amp;#34;].toUpperCase() : &amp;#34;GET&amp;#34;; // 获取JSON参数中的async值，默认值true, 表示异步发送请求 let async = params[&amp;#34;async&amp;#34;] ? params[&amp;#34;async&amp;#34;] : true; // 创建请求状态码监听函数: 在请求状态码 `xhr.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/jquery-3.6.0.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/jquery-3.6.0.js/</guid><description>/*! * jQuery JavaScript Library v3.6.0 * https://jquery.com/ * * Includes Sizzle.js * https://sizzlejs.com/ * * Copyright OpenJS Foundation and other contributors * Released under the MIT license * https://jquery.org/license * * Date: 2021-03-02T17:08Z */ ( function( global, factory ) { &amp;#34;use strict&amp;#34;; if ( typeof module === &amp;#34;object&amp;#34; &amp;amp;&amp;amp; typeof module.exports === &amp;#34;object&amp;#34; ) { // For CommonJS and CommonJS-like environments where a proper `window` // is present, execute the factory and get jQuery.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/prototype.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/prototype.js/</guid><description>/* Prototype JavaScript framework, version 1.7.2 * (c) 2005-2010 Sam Stephenson * * Prototype is freely distributable under the terms of an MIT-style license. * For details, see the Prototype web site: http://www.prototypejs.org/ * *--------------------------------------------------------------------------*/ var Prototype = { Version: &amp;#39;1.7.2&amp;#39;, Browser: (function(){ var ua = navigator.userAgent; var isOpera = Object.prototype.toString.call(window.opera) == &amp;#39;[object Opera]&amp;#39;; return { IE: !!window.attachEvent &amp;amp;&amp;amp; !isOpera, Opera: isOpera, WebKit: ua.indexOf(&amp;#39;AppleWebKit/&amp;#39;) &amp;gt; -1, Gecko: ua.indexOf(&amp;#39;Gecko&amp;#39;) &amp;gt; -1 &amp;amp;&amp;amp; ua.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/Drawing-2024-06-29-10.48.32.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/Drawing-2024-06-29-10.48.32.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 6 0 0 ^p3dcROO4
背景中的 僵尸区域
宽度 400 ^k2UiMXXB
背景图片 1400 ^0iVV8nWC
背景中的 植物区域
宽度 1000 ^dpwg8sAH
1400 ^DU3rFy8j
-400 ^crcz8rAG
900 ^R6zChSNX
600 ^9OO9H28Y
0 ^8mSUwClU
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 761, &amp;#34;versionNonce&amp;#34;: 568927326, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;FrQQZox60fn1IWRJpVGLb&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -200, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 540, &amp;#34;height&amp;#34;: 200, &amp;#34;seed&amp;#34;: 2032023326, &amp;#34;groupIds&amp;#34;: [ &amp;#34;mmeSEfRvXZ_CGtWvr4yqG&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;dpwg8sAH&amp;#34; } ], &amp;#34;updated&amp;#34;: 1719630341625, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;id&amp;#34;: &amp;#34;dpwg8sAH&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;x&amp;#34;: -178.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/PVZ%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/PVZ%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</guid><description>PVZ 基础知识 HTML HTML代码结构 DIV id SPAN id IMG id src title AUDIO loop autoplay src CSS CSS代码结构 如何引入CSS样式 基础样式 width height background-color background-image background-position-x font-size font-weight cursor opacity 盒模型样式 margin padding box-sizing border-radius border visibility display overflow 定位样式 position left top z-index JS 如何引入JS文件 基础 加载函数 函数设计 匿名函数 输出语句 获取元素 dom doms 创建元素 div img 设计元素内容 innerHTML parseInt() 设计元素样式 o.style.left o.offsetLeft 追加元素 删除元素 事件 onclick oncontextmenu 阻止默认行为 onmousemove clientX clientY 逻辑 if for 与 或 非 定时器 setTimeout setInterval 项目实战 引入文件夹 img 图片包 music 音乐包 util 工具包 首页-布局 首页-样式</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/</guid><description>S01. 环境搭建 E01. 引入图片包 img/* E02. 封装工具包 方法 描述 dom(selector) 获取单个DOM元素 doms(selector) 获取多个DOM元素 div(position = 'absolute', zIndex = '1') 创建一个DIV元素，默认绝对定位，Y轴1 img(url, position = 'absolute', zIndex = '1') 创建一个IMG元素，默认绝对定位，Y轴1 random(m) 返回 0 到 m 之间的随机浮点数，包括 0，但不包括 m 1. 封装通用工具 util/common.js
// 游戏界面：宽度，高度 const MAIN_WIDTH = 1000, MAIN_HEIGHT = 600; // 僵尸区域：宽度，高度 const ZOMBIE_AREA_WIDTH = 400, ZOMBIE_AREA_HEIGHT = 600; // 僵尸：宽度，高度，起始数量 const ZOMBIE_WIDTH = 166, ZOMBIE_HEIGHT = 144, ZOMBIE_COUNT = 5; // 阳光：宽度，高度 const SUN_WIDTH = 78, SUN_HEIGHT = 78; // 草坪：宽度，最大宽度，高度，上距离, 左距离 const SOD_WIDTH = 70, SOD_MAX_WIDTH = 739, SOD_HEIGHT = 120, SOD_TOP = 280, SOD_LEFT = 250; // 子弹：宽度 const PB_WIDTH = 55; /** * 获取单个DOM元素 * * @param selector 选择器字符串 */ function dom(selector) { return document.</description></item><item><title>JB2-1-Linux</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/JB2-1-Linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/JB2-1-Linux/</guid><description>[!NOTE] Java道经第2卷 - 第1阶 - Linux
S01. Linux虚拟主机 E01. 基础概念 1. LINUX 心法: LINUX Linux is not Unix
Linux是一种自由和开源的仿UNIX操作系统。 Linux在1991年，由 林纳斯·托瓦兹 在赫尔辛基大学上学时创立。 Linux内核和应用程序打包后被称为Linux发行版产品，如Ubuntu，RedHat，CentOS等。 Linux以命令为主，更适合搭建服务器，Windows以图形为主，更适合开发项目。 2. 虚拟化 心法: 虚拟化的常见概念
虚拟机概念 中文 描述 示例 host 主机 运行虚拟化软件的物理计算机（硬件） 笔记本，台式机，服务器等 host machine 宿主机 运行在主机上的虚拟化软件的操作系统（软件） Windows11 操作系统等 virtual machine 虚拟机 通过虚拟化技术在主机上创建的一台完整的计算机系统虚拟机中包括独立的CPU，内存，硬盘，网络等资源虚拟机可以运行不同的操作系统和应用程序 Linux操作系统虚拟机等 E02. 安装虚拟机 1. 开启虚拟技术 心法: Hypervisor 虚拟机监视器，简称 Hyper-V
Hyper-V是一种运行在基础物理服务器（计算机硬件）和操作系统之间的中间软件层，允许多个OS和应用共享硬件。 Hyper-V可以访问主机上全部物理设备，其作用和意义就是协调这些硬件资源。 目前大部分Windows系统都是基于Hyper-V技术的一个虚拟OS系统，而非真实的操作系统。 武技: 开启PC电脑的虚拟技术
检查主机的CPU是否已经开启了虚拟化功能，若已开启则省略全部步骤: 重启电脑，启动时按 Del/F10/F1/F2/F8 等进入BIOS界面，如联想电脑为 F2 进入: 寻找 Intel Virtualization Technology 相关配置。 打勾或选择 Enabled 来开启虚拟化支持。 保存配置并重启，完成虚拟化的开启工作。 2.</description></item><item><title>JB2-2-Docker</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/JB2-2-Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/JB2-2-Docker/</guid><description>[!NOTE] Java道经第2卷 - 第2阶 - Docker
S01. Docker引擎 E01. 基础概念 1. Docker概念 心法: Docker (译为码头装卸工人)
Docker是一个开源的应用容器引擎，用于将项目应用及应用运行的环境打包成一个可移植的镜像。 Docker旨在加速现代应用程序的构建，分享和运行过程。 Docker统一了开发，测试和运维的环境，可带环境一起跨平台迁移，解决了Dev，QA和OPS间的部分矛盾。 Docker中的应用启动速度更快，对硬件配置的需求也更低，即使配置较低的电脑也可以轻松跑集群。 2. Docker组件 Docker组件 中文 描述 Client 客户端 客户端用于向Docker主机发送 DockerAPI 请求，该请求本质是一个 http-post 请求 Docker Host 主机 主机用来承载Docker本地运行环境以及Docker本地全部对象，主机可以存在多个（集群） Docker DaemonDockerd 守护进程 守护进程用于监听DockerAPI请求，管理Docker对象如镜像，容器，网络，数据卷等守护进程还可以与其他Docker主机中的守护进程进行通信，以管理Docker服务 Image 镜像 镜像是用于创建容器的模板，是一个静态的概念，相当于Java类镜像的格式为 镜像名:版本，若不指定版本，则一律视为使用 latest 最新版 Container 容器集装箱 Docker容器是通过镜像创建出来的可运行的实体，相当于Java实例一个镜像可以创建出N个容器，一个容器中可以包含N个相关应用容器内和容器外是互相隔绝的，容器和容器之间也是相互隔离的 Registry 镜像中心 Docker镜像中心 中存放很多由官方，其他机构或个人创建的Docker镜像仓库 E02. 引擎架构 心法: Docker引擎架构
1. CentOS装Docker 武技: 在 CentOS 平台中安装 Docker 引擎
参考文档 # 查看OS系统版本 cat /etc/redhat-release # Docker官方推荐在3.</description></item><item><title>JB2-3-MySQL</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/JB2-3-MySQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/JB2-3-MySQL/</guid><description>[!NOTE] Java道经第2卷 - 第3阶 - MySQL v2-3-web-mysql(JAR) - MySQL
CH01. 关系型数据库 EP01. MySQL相关概念 心法: 数据库 database
相关概念 中文 描述 database 数据库 一个可以持久化存储数据以及简单分析数据的应用软件 RDMS 关系型数据库 由二维表组成，格式一致，易于维护，支持事务，不灵活，如MySQL，Oracle等 NRDMS 非关系型数据库 由文档，键值对，图片等组成，使用灵活，但不支持事务，如Redis，MongoDB等 SQL 结构化查询语言 操作关系型数据库的标准语言，目前数据库厂商实现的都是SQL92或SQL99标准 心法: MySQL数据库
MySQL是一款优秀的RDMS关系型数据库，由瑞典mysql-ab公司开发，目前属于Oracle旗下产品。 MySQL软件采用了双授权政策，分为社区版（开源免费，支持定制）和商业版，体积小，速度快。 MySQL支持5000万条记录的数据仓库，32位系统表文件最大可支持4GB，64位系统支持最大的表文件为8TB。 MySQL使用标准的SQL数据语言形式，跨平台，支持多种语言，如 C/C++/Python/Java/PHP/Ruby 等。 MySQL在5版本之前使用 MyISAM 引擎，在5版本之后使用 InnoDB 引擎，额外支持了ACID事务。 MySQL服务端中支持多个 DB实例，DB实例 中支持多个 DB表。 MySQL用户共享MySQL服务端中的所有 DB实例 和 DB表。 EP02. MySQL服务搭建 武技: 在Docker中搭建MySQL单机容器
1. 准备相关目录 # 创建MySQL相关目录 mkdir -p /opt/mysql/single/conf; mkdir -p /opt/mysql/single/data; mkdir -p /opt/mysql/single/log; chmod -R 777 /opt/mysql; 2.</description></item><item><title>JB2-4-JDBC</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-4-JDBC/JB2-4-JDBC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-4-JDBC/JB2-4-JDBC/</guid><description>Java道经第2卷 - 第4阶 - v2-4-web-jdbc(JAR) - JDBC
CH01. JDBC连库技术 EP01. JDBC连库中间件 心法: Java Data Base Connectivity，简称JDBC
JDBC是Java和数据库连接中间件，是SUN公司面对各个数据库提供的一组接口，用于使用Java代码连接和操作数据库。 武技: 构建测试数据库
构建测试数据库: sql: create database jdbc character set utf8mb4; use jdbc; -- table drop table if exists jdbc.user; create table if not exists jdbc.user ( user_id int auto_increment comment &amp;#39;用户主键&amp;#39;, real_name varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;用户姓名&amp;#39;, primary key (user_id) ) comment &amp;#39;用户表&amp;#39;; EP02. JDBC中间件配通 武技: 在项目 v2-4-web-jdbc 中配通JDBC连库中间件
在父项目中锁定版本: &amp;lt;!</description></item><item><title>JB2-5-Tomcat</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-5-Tomcat/JB2-5-Tomcat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-5-Tomcat/JB2-5-Tomcat/</guid><description>Java道经第2卷 - 第5阶 - v2-5-web-tomcat(WAR) - Tomcat
CH01. 互联网通信模型 心法: Web通信模型 Web Communication Model
Web通信就是基于HTTP协议，客户端向服务端发送HTTP请求，然后服务端返回给客户端HTTP响应的过程: 关键点 中文 描述 HTTP Protocol HTTP协议 请求必须以 http:// 或 https:// 为前缀，HTTP协议的底层是TCP/IP协议 TCP Protocol TCP协议 TCP协议负责将数据完整的送到目的地，尽管路途中可能会将数据拆成若干小块TCP协议采用拥塞机制来控制网络传输，因此当网络拥堵时，会抑制传输速率 IP Protocol IP协议 IP协议负责把数据准确地送到目的地 Client 客户端 客户端可以统一指代浏览器，客户端或一个人类用户BS架构: 从浏览器到服务端，使用方便，无需跟服务端同步更新CS架构: 从客户端到服务端，需要跟服务端同步更新 Server 服务端 服务端指物理主机硬件或WEB服务器应用软件，如Tomcat等 E01. 通信基础概念 1. HTTPS对比HTTP 心法: HTTP 协议和 HTTPS 协议的区别
区别点 HTTP HTTPS 安全性 安全性低，使用明文传输数据，数据不经过加密，容易被窃听和篡改 安全性高，通过SSL/TLS协议对数据进行加密传输，并提供服务器身份验证，有效防止窃听和篡改 通信端口 默认使用端口80进行通信 默认使用端口443进行加密通信 信任度 缺乏对网站真实性的验证，容易受到仿冒网站的攻击 使用数字证书对网站进行身份验证，提高了用户对网站的信任度 2. HTTPS安全措施 心法：HTTPS 安全保障措施
安全保障方式 描述 数据加密 HTTPS使用SSL/TLS协议对传输的数据进行加密，这意味着即使在数据传输过程中被截获，也很难解密和窃取其中的信息。 身份验证 SSL/TLS协议还允许服务器和客户端进行身份验证，确保数据发送到正确的目标，并防止中间人攻击。 数据完整性 HTTPS使用加密哈希算法来验证数据完整性，确保数据在传输过程中不被篡改。 信任和认证 HTTPS使用数字证书来验证服务器的身份和真实性，这些证书由可信任的第三方机构颁发，确保通信双方的真实性。 对抗窥探和劫持 HTTPS可以有效防止网络窥探和劫持，确保用户的隐私和数据安全。 EP01.</description></item><item><title>JB2-6-Servlet</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/JB2-6-Servlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/JB2-6-Servlet/</guid><description>Java道经第2卷 - 第6阶 - v2-6-web-servlet(WAR) - Servlet
CH01. Servlet基础入门 EP01. Servlet基础入门 心法: Servlet辅助技术
Web容器擅长提供静态页面，不擅长操作 just-in-time 即时动态页面。 若想得到一个即时显示当前时间的静态页面，则Web容器必须求助一些如Servlet之类的辅助程序。 心法: Servlet访问流程
客户端发送请求，请求URL指向Web容器中的辅助程序Servlet: Web容器可以分析出这个请求是发给Servlet的，而非直接获取静态资源。 Web容器启动并运行客户端指定的Servlet，将请求和请求参数一并转交。 Servlet执行 service() 方法，构造一个插入了当前系统时间的HTML静态代码。 Servlet将HTML静态代码返回给Web容器。 Web容器关闭Servlet，并将HTML静态代码响应给客户端。 客户端解析HTML静态代码并渲染到浏览器中，展示最终页面。 武技: 创建War包子项目 v2-6-web-servlet，该项目用于学习Servlet技术
在父项目中锁定版本: &amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;servlet-version&amp;gt;3.1.0&amp;lt;/servlet-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hutool-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--javax.servlet-api--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${servlet-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 在子项目中引入依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB2-7-HTML5</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/JB2-7-HTML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/JB2-7-HTML/</guid><description>[!NOTE] Java道经第2卷 - 第7阶 - HTML5 v2-7-web-html(war)
S01. H5概念入门 E01. H5概念入门 心法: 超文本标记语言 Hyper Text Mark-up Language 5，简称HTML5或H5
H5是一门面向浏览器的标记语言，包括文本，图片，音频，视频，链接等超文本元素，用于布局HTML页面。 H5文件以 .html 为后缀，由标签和文本组成: H5标签描述功能: 由 &amp;lt;&amp;gt; 和小写英文字母组成，分单标签如 &amp;lt;br /&amp;gt; 和双标签如 &amp;lt;p&amp;gt;文本&amp;lt;/p&amp;gt; 两种结构。 H5文本描述内容: 支持且仅支持 &amp;lt;!-- 注释内容 --&amp;gt; 这一种注释格式，且不能嵌套。 1. 页面结构 心法: H5页面的基本结构
标签 中文 描述 &amp;lt;!DOCTYPE html&amp;gt; 文档声明 告诉浏览器我是一个HTML文档，一般写在首行 &amp;lt;html lang=&amp;quot;zh-cmn-Hans&amp;quot;&amp;gt;&amp;lt;/html&amp;gt; 根级标签 告诉浏览器HTML代码从哪里开始，到哪里结束，简体中文环境 &amp;lt;head&amp;gt; 页头标签 开发功能性代码，可存在N个 &amp;lt;title 页面标题 网页被加入收藏夹或书签时会默认使用该标题作为名字 &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; 编码配置 设置页面编码为UTF-8 &amp;lt;body&amp;gt; 页体标签 用于开发展示性代码，可存在N个 2. 起始项目 武技: 创建War包子项目 v2-7-web-html，该项目用于学习HTML技术</description></item><item><title>JB2-8-CSS5</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-8-CSS/JB2-8-CSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-8-CSS/JB2-8-CSS/</guid><description>[!NOTE] Java道经第2卷 - 第8阶 - CSS5 v2-8-web-css(war)
S01. C3基础入门 E01. C3基础入门 心法: 层叠样式表3 Cascading Style Sheets 3，简称CSS3或C3
CSS用于控制网页的样式和布局，包括字体、颜色、间距、边框、背景等方面的表现。 CSS与HTML结合使用，为网页添加样式和美化效果，使得网页内容更具吸引力和可读性。 武技: 创建War包子项目 v2-8-web-css，该项目用于学习CSS技术
开发HTML页面： view/基础入门.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;基础入门&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello CSS3！&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 部署项目，启动Tomcat服务并 访问项目 1. 技术特点 心法: CSS3技术特点
技术特点 描述 层叠性 相同样式会覆盖，不同样式叠加。 继承性 子标签会继承父标签的外观，如字体/颜色等，但不会继承父标签的布局，边框/边距等 2. 样式分类 心法: CSS3样式分类
C3分类 优先级 使用方式 特点 内嵌 最高 直接在某标签的 style 属性中使用 代码耦合度高，不推荐 内部 高 在页头的 &amp;lt;style&amp;gt;&amp;lt;/style&amp;gt; 中开发 学习场景下推荐使用 外部 低 在页头用 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;quot;/&amp;gt; 引入外部CSS文件 开发场景下推荐使用 浏览器样式 最低 浏览器对标签设置的 一个基本样式 可以直接覆盖 武技: 测试CSS3样式分类</description></item><item><title>JB2-9-JavaScript6</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/JB2-9-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/JB2-9-JavaScript/</guid><description>[!NOTE] Java道经第2卷 - 第9阶 - JavaScript6 v2-9-web-javascript(war)
S01. JS基础入门 E01. JS基础入门 心法: JavaScript 6，简称 JS6
JS是一门用于与浏览器及其内容等几乎所有方面的交互的编程语言: JS在1995年由NetScape公司在网景导航者浏览器上首次设计实现而成。 JS原名 LiveScript，后因与Sun合作更名为 JavaScript 并被纳入 ECMA-262 标准，故 JS 也可被称为 ES: ECMA是欧洲计算机制造联合会，旨在建立统一的电脑操作格式标准。 武技: 创建War包子项目 v2-9-web-javascript，该项目用于学习JavaScript技术
在IDEA中调整对ES6语法的支持: 进入 File -&amp;gt; Settings -&amp;gt; Languages &amp;amp; Frameworks -&amp;gt; JavaScript 页面。 修改 JavaScript language version 为 ECMAScript6 即可。 开发HTML页面： view/基础入门.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;基础入门&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello JavaScript！&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 部署项目，启动Tomcat服务并 访问项目 1. 语言特点 心法: JS语言特点</description></item></channel></rss>