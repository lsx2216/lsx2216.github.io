<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第5阶段-ALIBABAs on lsx2216</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/</link><description>Recent content in 第5阶段-ALIBABAs on lsx2216</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/frag/%E4%BA%AC%E4%B8%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/frag/%E4%BA%AC%E4%B8%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/</guid><description>京东电商项目 项目整体介绍 mall项目仿照淘宝，京东等电商平台研发而成的，采用SpringCloudAlibaba全家桶进行微服务架构搭建，前后端分离。 整体环境介绍 以下子项目均使用此环境配置进行搭建和开发
基础开发环境: Windows(11) + JDK(11.0.16.1) 基础部署环境: Vmware(16) + CentOS(7) + Docker(1.13) 集成开发工具: IntelliJ IDEA(2021.3.3 Ultimate Edition) 项目管理工具: Maven(3.6.0) 项目协同工具: Git(2.28.0.windows.1) + GitEE 数据存储仓库: MySQL(8.0.25) 数据搜索引擎: ElasticSearch(7.11.2) + Kibana(7.11.2) 前后端服务器: Nginx(1.23.2) + Tomcat(9.0.70) + Node(16.14.0) 数据缓存仓库: Guava(19.0) + Redis(7.0.5) 短信服务平台: 阿里云SMS短信平台 对象存储平台: 阿里云OSS对象存储，MinIO本地对象存储 通用技术选型 使用MySQL8数据库存储数据：使用触发器将所有被删除的数据进行备份。 使用MybatisPlus持久层框架的注解配置方式进行数据层开发，包括分页。 使用SpringCloudAlibaba技术栈进行全项目开发。 使用Nacos注册中心代替Cloud中的Eureka进行服务注册与发现。 使用NacosConfig配置中心代替Cloud中的Config进行配置文件统一管理。 使用GateWay网关代替Cloud中的Zuul进行路由，限流和断言配置。 使用Sleuth + Zipkin对整体项目服务的链路进行追踪和分析。 使用OpenFeign代替Ribbon进行微服务之间的远程调用。 使用Sentinel代替Hystrix进行服务限流，降级，熔断等处理，以保证服务高可用。 使用Seata对服务进行分布式事务保护。 使用Rocketmq生产消费模型对服务进行削峰填谷，在下单后向用户微服务投递消息，发送通知短信/邮件。 使用SpringBoot拦截器进行CORS跨域处理。 使用JMeter进行后台接口压力测试。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/SOA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/SOA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 管 理 员 后 台 应 用 ^u3mbCz24
用 户 前 台 应 用 ^LFZl3IJI
客 户 端 ^7tSGCHyf
订单查询模块 MVC代码 ^MHGUJM6x
用户登录模块 MVC代码 ^sEtu7as2
物流查询模块 MVC代码 ^LAZ8eSmM
其他前台相关 MVC代码 ^JP5ocv7B
商品管理模块 MVC代码 ^0V3Juf7P
下单模块 MVC代码 ^wh1oKlS4
用户登录模块 MVC代码 ^AVifcuNk
商品查询模块 MVC代码 ^tiwoKyLa
订单管理模块 MVC代码 ^UWCM3E8K
其他后台相关 MVC代码 ^lqAt7ydO
数 据 库 ^pDUIHVrZ
用户管理模块 MVC代码 ^sv7BZgx1</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 管 理 员 后 台 应 用 ^u3mbCz24
用 户 前 台 应 用 ^LFZl3IJI
客 户 端 ^7tSGCHyf
订单查询模块 MVC代码 ^MHGUJM6x
用户登录模块 MVC代码 ^sEtu7as2
物流查询模块 MVC代码 ^LAZ8eSmM
其他前台相关 MVC代码 ^JP5ocv7B
商品管理模块 MVC代码 ^0V3Juf7P
下单模块 MVC代码 ^wh1oKlS4
用户登录模块 MVC代码 ^AVifcuNk
商品查询模块 MVC代码 ^tiwoKyLa
订单管理模块 MVC代码 ^UWCM3E8K
其他后台相关 MVC代码 ^lqAt7ydO
数 据 库 ^pDUIHVrZ
用户管理模块 MVC代码 ^sv7BZgx1</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 数 据 库 ^OkxLitGb
客 户 端 ^Z1HiAO0L
单 体 应 用 ^Q4QKnwZj
其他模块 MVC代码 ^iaOmuBH7
商品模块 MVC代码 ^rtR80Ajh
用户模块 MVC代码 ^MTWnqTO2
订单模块 MVC代码 ^Ak6Nay3M
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 275, &amp;#34;versionNonce&amp;#34;: 1096388276, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;9yHRFwb9iJxzrXp7D3Vbq&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -300, &amp;#34;y&amp;#34;: -300, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 40, &amp;#34;height&amp;#34;: 180, &amp;#34;seed&amp;#34;: 600128140, &amp;#34;groupIds&amp;#34;: [ &amp;#34;5qhFeQ-JjmD5n4S4evaEp&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;Z1HiAO0L&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;eehCW2ZZjyO2k4jCFfiYW&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1717064257625, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 74, &amp;#34;versionNonce&amp;#34;: 1171449484, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Z1HiAO0L&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -290, &amp;#34;y&amp;#34;: -247.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 管 理 员 后 台 应 用 ^u3mbCz24
用 户 前 台 应 用 ^LFZl3IJI
客 户 端 ^7tSGCHyf
订单查询模块 MVC代码 ^MHGUJM6x
用户登录模块 MVC代码 ^sEtu7as2
物流查询模块 MVC代码 ^LAZ8eSmM
其他前台相关 MVC代码 ^JP5ocv7B
商品管理模块 MVC代码 ^0V3Juf7P
下单模块 MVC代码 ^wh1oKlS4
用户登录模块 MVC代码 ^AVifcuNk
数 据 库 ^sA0S0UZb
商品查询模块 MVC代码 ^tiwoKyLa
订单管理模块 MVC代码 ^UWCM3E8K
其他后台相关 MVC代码 ^lqAt7ydO
数 据 库 ^pDUIHVrZ</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements Gateway 网关集群 ^2Mum5ZyF
Seata 分布式事务 ^C95aIAk4
Sentinel 流量卫兵 ^mSPDyIar
Sleuth + Zipkin 链路追踪 ^XLR8E4td
客户端 ^7Fr37Ouk
^iv3WW2ID
服务器集群 ^p5ESKXki
用户微服务 ^OqgaKoJZ
openfeign 远程调用 ^5VV3pDp7
订单微服务 ^Knr3IWQw
物流微服务 ^YjmYuKVB
注册 ^NMl2PtN5
拉取 配置信息 ^fNtxp7DT
拉取 服务列表 ^Axwyo5If
文件 存储 ^9M0gvo5A
拉取 服务列表 ^HzardZ7R
Redis集群 ^eto5Hlho
MinIO集群 ^Qba1Zhek
上传 配置信息 ^6V8oFSZZ
数据 缓存 ^6GiXem6l
MySQL集群 ^QQBip279</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>什么叫高可用？ § *高可用*
系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性。保证系统的高可用性，可从如下几个9说起，如图所示：
为了提高可用性，我们要么提高系统的无故障时间，要么减少系统的故障恢复时间，这就需要我们知道故障的原因。这个原因通常分为两大部分：
1) 无计划的系统故障
系统级故障：包括主机、操作系统、中间件、数据库、网络、电源以及外围设备。 自然灾害、人为破坏，以及供电问题等。 2) 有计划的日常任务：
ü 运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护。
ü 升级相关：数据库、应用、中间件、操作系统、网络，包括硬件升级。
我们再对这些故障做个归类：
\1) 网络问题：网络链接出现问题，网络带宽出现拥塞等
\2) 性能问题：慢 SQL、Java Full GC、硬盘 IO 过大、CPU 飙高、内存不足等
\3) 安全问题：被网络攻击，如 DDoS 等。
\4) 运维问题：系统总是在被更新和修改，架构也在不断地被调整，监控问题等
\5) 管理问题：没有梳理关键服务及服务的依赖关系，运行信息没有和控制系统同步等
\6) 硬件问题：硬盘损坏、网卡出问题、交换机出问题、机房掉电等问题等
总之，我们要正确认识故障，故障不可避免。尤其是在大型分布式系统中，出现故障是一种常态。有时出现故障根本就不知道出现在了什么地方。所以我们要对故障原因先有一个认识，与此同时我们要基于故障有应对的策略，也就是我们所说的“弹力设计”，就类似三国中的赵云猛将，在搏杀中能进能退。
1.2.2.3 服务网关 随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个 服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：
客户端需要调用不同的url地址，增加难度
在一定的场景下，存在跨域请求的问题
每个微服务都需要进行单独的身份认证
针对这些问题，API网关顺势而生。
API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。
1.2.2.4 服务容错 在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。
我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是：
不被外界环境影响
不被上游请求压垮
不被下游响应拖垮
1.2.2.5 链路追踪 随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联 网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程 语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的 多个服务链路进行日志记录，性能监控即链路追踪
1.2.3 微服务架构的常见解决方案 1.2.3.1 ServiceComb Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-Nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-Nacos/</guid><description>Nacos Win11搭建Nacos服务 武技: 在Win11环境下安装Nacos服务端
下载 Nacos2.0.3版本服务端 服务端: res: nacos-server-2.0.3.zip: 解压缩即可，建议重命名为 nacos8848-standalone 目录。 启动Nacos服务端: cmd: cd @\bin: 进入Nacos的bin目录中。 cmd: startup.cmd -m standalone: 以单机模式启动，2.0.3版本默认使用集群模式启动。 设置Nacos默认启动模式: 修改 startup.cmd 文件: 将 cluster 修改为 standalone 后即可。 访问Nacos管控台: cli: localhost:8848/nacos: 使用 nacos/nacos 登录。 Win11搭建Nacos集群 心法: Nacos集群前置条件
Nacos搭建集群时，需要使用到数据库如MySQL来存储数据。 武技: 准备Nacos集群数据库
创建Nacos集群相关的数据库实例: cmd: create database nacos character set utf8mb4; use nacos; 创建Nacos集群相关的12张数据库表: res: 资源/SQL/v3_nacos_mysql.sql: 武技: 创建2个Nacos节点相关目录
将Nacos家目录拷贝2份视为2个集群节点: nacos8858-cluster: Nacos节点 Nacos8858。 nacos8868-cluster: Nacos节点 Nacos8868。 Nacos集群节点在相同IP时，端口号不能连续，要分隔开来，比如8858和8868端口。 武技: 分别修改2个集群节点的主配文件 @\conf\application.properties
# 节点 `Nacos8858` 配置文件内容 server.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-SpringCloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-SpringCloud/</guid><description>CH01. 微服务架构概念 心法: 微服务架构概念
对比单体架构开发速度慢，启动时间长，依赖庞大的缺点，微服务架构更易开发，理解和维护，独立的部署和启动，但存在分布式事务问题，服务治理问题: CAP理论: 在一个分布式系统中，分区容错性必须满足，而一致性和可用性二选其一，无法共存: 分区容错性 Partition-tolerance: 分布式系统必须保证分区容错性，即使某节点崩溃，整体也要正常对外提供服务，节点越多，分区容错越高。 一致性 Consistency: 在响应结果之前先进行节点间完整的数据同步过程，即可保证数据一致性，但同步过程很耗时，可能会因为响应超时而报错（不满足A）。 可用性 Availability: 异步执行节点之间的数据同步过程，以保证响应超时，此时服务高可用，但可能会因为来不及同步而导致响应的数据和其他节点不一致（不满足C）。 微服务核心概念: 配置中心: 存放每个微服务的主配文件，支持动态更新，支持可视化界面，支持同时操作所有服务的配置文件。 链路追踪: 分析调用链路节点耗时的一门技术: 如用户下单的链路: 调用商品服务获取商品价格 -&amp;gt; 调用用户服务 -&amp;gt; 调用订单服务&amp;hellip;，通过链路追踪分析链路上的哪个过程耗时比较久，以进行精准优化。 负载均衡: 进行负载分发，如果集群中的A节点压力过大，则将需求分发到集群中的B节点。 常见微服务框架: 需要熟知consumer消费者，provider生产者的两种角色的概念: dubbo: zookeeper + dubbo + springboot dubbo官网 通信方式: rpc（远程方法调用） 注册中心: zookeeper/redis 配置中心: diamond（一款款阿里开源组件） 优点: 采用rpc连接，速度快一些。 缺点: 框架中的技术模块比较散，需要自己组装。 springcloud: springcloud官网 通信方式: http长连接，restful 注册中心: eureka/consul 配置中心: config 断路器: hystrix 网关: zuul 分布式链路追踪系统: sleuth + zipkin 优点: 框架中的技术模块是全家桶套装，整合度非常高。 缺点: http长连接，涉及多次握手，速度低一些。 CH02. 搭建注册中心Eureka 心法: 所谓注册中心</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/qa/JB4-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/qa/JB4-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-QA/</guid><description> 单体应用架构的优缺点分别是什么？ 垂直应用架构的优缺点分别是什么？ 分布式应用架构的优缺点分别是什么？ SOA应用架构的优缺点分别是什么？ 微服务应用架构的优缺点分别是什么？ 如何理解分布式CAP中的分区容错性？如何提高分区容器性？ 如何理解分布式CAP中的一致性？如何提高一致性？ 如何理解分布式CAP中的可用性？如何提高可用性？ 一个分布式系统可以同时满足CAP中的那两个？ 微服务父子模块架构中，父模块的src目录可删吗？为什么？ 微服务父子模块架构中，父模块的 &amp;lt;dependencyManagement&amp;gt; 做什么用？ 微服务父子模块架构中，父模块引入的依赖能共享给所有子模块吗？ 微服务中的（通用）工具模块直接就可以作用在其他模块中吗？ 如果mybatis-plus生成的表名踩了关键字，如order，怎么办？ server.port 配置是做什么用的？ spring.application.name 配置是做什么用的？ 你用的什么数据库连接池？ 开发一个Springboot启动类需要注意哪些细节？ @MapperScan 注解是做什么用的？ 如果让你开发一个按ID查询商品的完整业务，你的思路是怎样的？ 注册中心是做什么用的？核心功能有哪些？ 注册中心的常见产品有哪些？ 注册中心如何知道某个注册过的微服务是否活着？简述流程。 Nacos中的临时服务和持久服务有什么区别？ 如果注册中心发现某服务已经挂了，会怎么处理？ 为什么不用SpringCloud中的Eureka而转向了SpringCloudAlibaba的nacos？ Nacos注册中心需要实现安装服务端吗？ Nacos注册中心的默认端口号是多少？可以修改吗？ 使用Nacos注册中心，需要第三方依赖吗？ @EnableDiscoveryClient 注解是做什么用的？ spring.cloud.nacos.discovery.server-addr 配置是做什么用的？ 你做过哪些微服务项目？ 你的微服务项目负责哪个模块？使用了哪些组件？整体流程是什么样的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/res/Nacos%E9%9B%86%E7%BE%A4SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/res/Nacos%E9%9B%86%E7%BE%A4SQL/</guid><description>/* * Copyright 1999-2018 Alibaba Group Holding Ltd. * * Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/qa/JB4-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/qa/JB4-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8-QA/</guid><description> 你使用什么技术进行微服务之间的远程调用？ 什么是负载均衡？客户端负载均衡和服务端负载均衡你使用哪种？ OpenFeign是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ OpenFeign自带负载均衡效果吗？ OpenFeign和Ribbon有什么区别和联系？ 使用OpenFeign需要添加第三方依赖吗？ @EnableFeignClients 注解是做什么用的？ 如何使用OpenFeign进行远程调用，流程是什么样的？ @FeignClient 注解的作用是什么？ 远程接口方法和远程服务的控制方法需要返回值，方法名和形参都保持一致吗？ 远程接口方法的参数必须添加 @RequestParam 注解吗？ @Transactional(rollbackFor = Exception.class) 是做什么用的？ @Transactional 注解能解决远程调用的事务问题吗？ 包含远程调用的业务方法能标记 @Transactional 注解吗？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/res/%E6%AE%8B%E5%8D%B7-DubboAdmin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/res/%E6%AE%8B%E5%8D%B7-DubboAdmin/</guid><description>在Window里面搭建DubboAdmin 武技: 在Win11环境启动DubboAdmin服务
1. 下载DubboAdmin # 使用Git拉取DubboAdmin监控服务：网络波动多拉取几次 cd D:\dubbo git clone https://github.com/apache/dubbo-admin.git 2. 打包DubboAdmin 构建 dubbo-admin-ui 的Vue依赖： # 进入 `dubbo-admin-ui` 目录并构建Vue依赖 cd D:\dubbo\dubbo-admin\dubbo-admin-ui npm install 修改主配项：DubboAdmin默认使用的是zookeeper注册中心，需要进行覆盖： D:\dubbo\dubbo-admin\dubbo-admin-server\src\main\resources\application.properties
admin.registry.address=nacos://192.168.40.77:8848?group=DEFAULT_GROUP&amp;amp;namespace=public admin.config-center=nacos://192.168.40.77:8848?group=dubbo admin.metadata-report.address=nacos://192.168.40.77:8848?group=dubbo 打包 dubbo-admin 项目： # 进入 `dubbo-admin` 目录并跳过测试打包项目 cd D:\dubbo\dubbo-admin mvn clean package -Dmaven.test.skip=true # 进入 `dubbo-admin-distribution\target` 目录启动DubboAdmin服务 cd D:\dubbo\dubbo-admin\dubbo-admin-distribution\target java -jar dubbo-admin-0.5.0-SNAPSHOT.jar 启动Nacos服务，否则无法访问DubboAdmin。 访问DubboAdmin服务: 使用root/root登录。 3. 部署DubboAdmin 武技: 将DubboAdmin服务的Jar包部署到Docker
构建DubboAdmin镜像: # 创建DubboAdmin监控服务家目录并将DubboAdmin监控服务Jar包拷贝进来 mkdir -p /opt/dubbo-admin chmod -R 777 /opt/dubbo-admin # 进入DubboAdmin监控服务目录: 将dubbo-admin-0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/frag/%E6%AE%8B%E5%8D%B7-Sentinel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/frag/%E6%AE%8B%E5%8D%B7-Sentinel/</guid><description>Sentinel Win11搭建Sentinel服务 武技: 在Win11环境下安装Sentinel服务端
安装 Sentinel管控台: res: sentinel-dashboard-1.7.0.jar 启动Sentinel管控台: cmd: java -jar -Dserver.port=8088 sentinel-dashboard-1.7.0.jar: 默认端口8080。 访问Sentinel管控台: cli: localhost:8088: 使用 sentinel/sentinel 账密登录。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/qa/JB4-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/qa/JB4-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5-QA/</guid><description> 什么是服务雪崩效应，如何产生的？ 服务容错都包含哪些手段？ 线程池隔离和信号量隔离的区别是什么？ 如果一次请求超时，应该做什么处理？ 什么叫熔断，什么叫降级，二者什么区别和联系？ fallback方法是什么概念？ sentinel是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ 使用sentinel需要添加第三方依赖吗？ 降级方法必须由public和static修饰吗？ 降级方法的形参必须和控制方法的形参保持一致吗？ 怎么理解sentinel资源？ @SentinelResource 注解是做什么用的？ @SentinelResource 注解中的fallbackClass和fallback属性的区别是什么？ sentinel的流控降级规则的流控类型中，QPS和线程数的区别是什么？ sentinel的流控降级规则的流控模式中，直接和关联的区别是什么？ sentinel的流控降级规则的流控效果中，快速失败和排队等待的区别是什么？ 使用过Jmeter吗？使用流程是怎样的？ sentinel的熔断降级规则中，RT熔断和异常比例熔断分别是什么意思？ 可以简述一下sentinel授权降级规则中的黑白名单的概念吗？ 可以简述一下sentinel热点降级规则是什么意思吗？ sentinel的降级规则是存放在内存中还是硬盘中？ sentinel如何将规则持久化？ sentinel如果想整合远程调用OpenFeign，需要添加依赖吗？ sentinel整合OpenFeign的大概流程是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/qa/JB4-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/qa/JB4-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-QA/</guid><description> API网关是做什么用的？有什么功能？ gateway和zuul的区别是什么？ gateway是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ gateway的搭建是一个springboot项目吗？ gateway需要将自己注册到nacos注册中心吗？ gateway需要发现nacos中的其他服务吗？ gateway中的断言是什么意思？ gateway中的断言可以自定义吗？大概流程是什么？ gateway中的断言是必须全部通过才能释放请求吗？ gateway中的过滤器主要用于做什么？ gateway中的过滤器可以自定义吗？大概流程是什么？ gateway中的全局过滤器和局部过滤器的区别是什么？ gateway层面的限流的大概流程是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/frag/%E6%AE%8B%E5%8D%B7-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/frag/%E6%AE%8B%E5%8D%B7-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid><description>Zipkin Zipkin持久化ES 武技: 将Zipkin数据持久化到ES数据库
使用Docker重新搭建可持久化的Zipkin容器 # 删除之前的Zipkin容器，让出9411端口 docker rm -f zipkin # 创建并启动一个可持久化的Zipkin容器 # arg: `-e STORAGE_TYPE=elasticsearch`: 使用ES进行持久化 # arg: `-e ES_HOSTS`: ES地址，集群由逗号分隔，默认为 `http://localhost:9200`。 # arg: `-e ES_TIMEOUT`: 连接ES的超时时间，单位ms。默认 `10000ms`。 # arg: `-e ES_INDEX`: Zipkin持久化所使用的索引，默认 `zipkin`。 # arg: `-e ES_DATE_SEPARATOR`: Zipkin建立索引的日期分隔符，默认为 `-`。 # arg: `-e ES_INDEX_SHARDS`: 分片(shard)个数，默认 `5` 个。 # arg: `-e ES_INDEX_REPLICAS`: 副本(replica)个数，默认 `1` 个。 # arg: `-e ES_USERNAME`: 登录ES的账号。 # arg: `-e ES_PASSWORD`: 登录ES的密码。 docker run -d --name zipkin --network host \ -e STORAGE_TYPE=elasticsearch \ -e ES_HOSTS=192.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/qa/JB4-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/qa/JB4-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-QA/</guid><description> 链路追踪是什么意思，主要用来做什么？ sleuth是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ sleuth中的Trace和Span分别是什么意思？ 使用sleuth需要添加第三方依赖吗？ 你使用的链路追踪的可视化界面是什么？ 使用zipkin需要添加第三方依赖吗？ zipkin的默认端口是多少？ zipkin的信息是默认存储在内存中的还是在硬盘中的？ 如何对zipkin的信息进行持久化？大概流程是怎样的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/res/zipkin.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/res/zipkin.sql/</guid><description>-- database create database zipkin character set utf8mb4; use zipkin; -- -- Copyright The OpenZipkin Authors -- SPDX-License-Identifier: Apache-2.0 -- CREATE TABLE IF NOT EXISTS zipkin_spans ( `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &amp;#39;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&amp;#39;, `trace_id` BIGINT NOT NULL, `id` BIGINT NOT NULL, `name` VARCHAR(255) NOT NULL, `remote_service_name` VARCHAR(255), `parent_id` BIGINT, `debug` BIT(1), `start_ts` BIGINT COMMENT &amp;#39;Span.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/frag/%E6%AE%8B%E5%8D%B7-MQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/frag/%E6%AE%8B%E5%8D%B7-MQ/</guid><description>RocketMQ Win11搭建RocketMQ服务 心法: Win11搭建RocketMQ的前置条件
RocketMQ服务端默认使用JDK8环境，JDK11环境下建议曲线救国。 武技: 在windows平台搭建RocketMQ服务端
安装RocketMQ服务端: 安装后配置 ROCKET_HOME 环境变量: res: rocketmq-all-4.9.4-bin-release.zip: 解压缩为 rocketmq494 目录。 JDK11环境下: 单独安装JDK8环境，压缩版即可: res: jdk1.8.0_05.zip: 解压缩为 jdk8 目录。 JDK11环境下: 修改 @/bin/runserver.cmd 和 @/bin/runbroker.cmd 文件: 在第17行找到 if not exist &amp;quot;%JAVA_HOME%\bin\java.exe&amp;quot; 代码。 在第16行添加 set &amp;quot;JAVA_HOME=D:\jdk\jdk8&amp;quot; 代码。 在 @/bin 目录中启动NameSrv邮局服务: cmd: mqnamesrv.cmd -n localhost:9876: 端口默认9876。 在 @/bin 目录中启动Broker快递员服务: cmd: mqbroker.cmd -n localhost:9876 autoCreateTopicEnable=true: 自动创建topic和tag。 在 @/bin 目录中测试消费者: 消费者需要一致保持CMD命令窗口: cmd: set NAMESRV_ADDR=localhost:9876 cmd: tools.cmd org.apache.rocketmq.example.quickstart.Consumer 在 @/bin 目录中测试生产者: 生产者会发送1000个消息，然后自动退出: cmd: set NAMESRV_ADDR=localhost:9876 cmd: tools.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/qa/JB4-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/qa/JB4-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-QA/</guid><description> 你都使用过哪些MQ？ MQ的作用是什么？为什么要使用MQ？ RMQ是哪家公司的产品？ RMQ中的NameSrv有什么作用？ RMQ中的NameSrv和Broker有什么关系？ RMQ中的Topic/Tag/MessageQueue/Message有什么关系？ RMQ中的生产者组和消费者组有什么作用？为什么要分组？ 搭建一个RMQ生产者消费者模型的大概流程是怎样的？ RMQ的普通消息分为哪几种类型？ RMQ如何保证生产消息和消费消息是有序的？ RMQ和springboot整合后，可以直接使用哪个类进行生产消息？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/qa/JB4-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/qa/JB4-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-QA/</guid><description> Nacos除了做注册中心还有什么别的功能？ 将所有微服务的配置文件统一移动到配置中心有什么好处？ 如何动态读取配置中心中的某项配置？大概流程是什么？ 跨环境共享配置是什么意思？如何做到？ 跨服务共享配置是什么意思？如何做到？ 如何阻止com.alibaba.nacos.client.naming疯狂打印日志？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/frag/%E6%AE%8B%E5%8D%B7-Seata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/frag/%E6%AE%8B%E5%8D%B7-Seata/</guid><description>Seata Win11搭建Seata服务 武技: 在Win11环境下载安装并启动Seata服务
创建Seata备份表 undo_log: res: 资源/SQL/v3_seata.sql 下载 Seata: 解压缩到硬盘即可。 修改 @\conf\registry.conf 配置: 将 registry 中的 type 值替换为 nacos，然后删除除Nacos外的其他代码块和namespace项。 将 config 中的 type 值替换为 nacos，然后删除除Nacos外的其他代码块和namespace项。 将 registry.conf 文件分别拷贝到商品微服务和订单微服务的classpath下。 启动Nacos服务，因为Seata需要在Nacos配置中心生成一些配置。 初始化Seata在Nacos中的配置，在 conf 目录中执行命令: cmd: nacos-config.sh 127.0.0.1: 在Nacos配置中心查看SEATA_GROUP分组的配置文件。 res: 资源/附件/seata/nacos-config.sh 启动Seata服务: 在 @\bin 目录中执行命令: cmd: seata-server.bat -p 9000: 默认端口8091，在Nacos服务中心查看 serverAddr 服务。 在 @\conf\file.conf 的service模块中查看事务服务名 my_test_tx_group，可以修改但不建议。 开发数据源代理配置类 config.DataSourceProxyConfig: seata使用该数据源代理进行SQL操作: 标记 @Configuration 以声明为配置类。 在数据源代理配置类中管理 i.s.r.d.DataSourceProxy 类: @Bean: 使该方法以被容器管理。 @Primary: 表示当存在多个数据源代理时，该bean的优先级最高。 new DruidDataSource(): 创建一个Druid数据源实例: druidDataSource.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/qa/JB4-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/qa/JB4-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6-QA/</guid><description> 事务的ACID特性分别是什么意思？ 你搭建的微服务出现了哪种事务问题？ seata是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ seata事务协调器的搭建需要依赖nacos吗？ seata中的事务协调器TC是做什么用的？ seata中的资源管理器RM是做什么用的？ seata中的事务管理器TM是做什么用的？ seata是如何完成分布式事务整体提交和回滚的过程的？ undo_log日志的作用是什么？ seata事务对业务有入侵么？ seata整个过程中使用了本地事务么？ seata的事务过程释放资源么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/seataServer.properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/seataServer.properties/</guid><description>原版，未做任何改动 #For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html #Transport configuration, for client and server transport.type=TCP transport.server=NIO transport.heartbeat=true transport.enableTmClientBatchSendRequest=false transport.enableRmClientBatchSendRequest=true transport.enableTcServerBatchSendResponse=false transport.rpcRmRequestTimeout=30000 transport.rpcTmRequestTimeout=30000 transport.rpcTcRequestTimeout=30000 transport.threadFactory.bossThreadPrefix=NettyBoss transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler transport.threadFactory.shareBossWorker=false transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector transport.threadFactory.clientSelectorThreadSize=1 transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread transport.threadFactory.bossThreadSize=1 transport.threadFactory.workerThreadSize=default transport.shutdown.wait=3 transport.serialization=seata transport.compressor=none #Transaction routing rules configuration, only for the client service.vgroupMapping.default_tx_group=default #If you use a registry, you can ignore it service.default.grouplist=127.0.0.1:8091 service.enableDegrade=false service.disableGlobalTransaction=false #Transaction rule configuration, only for the client client.rm.asyncCommitBufferLimit=10000 client.rm.lock.retryInterval=10 client.rm.lock.retryTimes=30 client.rm.lock.retryPolicyBranchRollbackOnConflict=true client.rm.reportRetryCount=5 client.rm.tableMetaCheckEnable=true client.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9A%84UndoLog%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9A%84UndoLog%E8%A1%A8/</guid><description>CREATE TABLE IF NOT EXISTS `undo_log` ( `branch_id` BIGINT(20) NOT NULL COMMENT &amp;#39;分支事务ID&amp;#39;, `xid` VARCHAR(100) NOT NULL COMMENT &amp;#39;全局事务ID&amp;#39;, `context` VARCHAR(128) NOT NULL COMMENT &amp;#39;上下文&amp;#39;, `rollback_info` LONGBLOB NOT NULL COMMENT &amp;#39;回滚信息&amp;#39;, `log_status` INT(11) NOT NULL COMMENT &amp;#39;状态，0正常，1全局已完成&amp;#39;, `log_created` DATETIME(6) NOT NULL COMMENT &amp;#39;创建时间&amp;#39;, `log_modified` DATETIME(6) NOT NULL COMMENT &amp;#39;修改时间&amp;#39;, UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT =&amp;#39;AT事务模式撤消表&amp;#39;;</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9B%B8%E5%85%B34%E5%BC%A0%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9B%B8%E5%85%B34%E5%BC%A0%E8%A1%A8/</guid><description>-- -------------------------------- The script used when storeMode is &amp;#39;db&amp;#39; -------------------------------- -- the table to store GlobalSession data CREATE TABLE IF NOT EXISTS `global_table` ( `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `status` TINYINT NOT NULL, `application_id` VARCHAR(32), `transaction_service_group` VARCHAR(32), `transaction_name` VARCHAR(128), `timeout` INT, `begin_time` BIGINT, `application_data` VARCHAR(2000), `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`xid`), KEY `idx_status_gmt_modified` (`status` , `gmt_modified`), KEY `idx_transaction_id` (`transaction_id`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; -- the table to store BranchSession data CREATE TABLE IF NOT EXISTS `branch_table` ( `branch_id` BIGINT NOT NULL, `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `resource_group_id` VARCHAR(32), `resource_id` VARCHAR(256), `branch_type` VARCHAR(8), `status` TINYINT, `client_id` VARCHAR(64), `application_data` VARCHAR(2000), `gmt_create` DATETIME(6), `gmt_modified` DATETIME(6), PRIMARY KEY (`branch_id`), KEY `idx_xid` (`xid`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; -- the table to store lock data CREATE TABLE IF NOT EXISTS `lock_table` ( `row_key` VARCHAR(128) NOT NULL, `xid` VARCHAR(128), `transaction_id` BIGINT, `branch_id` BIGINT NOT NULL, `resource_id` VARCHAR(256), `table_name` VARCHAR(32), `pk` VARCHAR(36), `status` TINYINT NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;0:locked ,1:rollbacking&amp;#39;, `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`row_key`), KEY `idx_status` (`status`), KEY `idx_branch_id` (`branch_id`), KEY `idx_xid` (`xid`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; CREATE TABLE IF NOT EXISTS `distributed_lock` ( `lock_key` CHAR(20) NOT NULL, `lock_value` VARCHAR(20) NOT NULL, `expire` BIGINT, primary key (`lock_key`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;AsyncCommitting&amp;#39;, &amp;#39; &amp;#39;, 0); INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;RetryCommitting&amp;#39;, &amp;#39; &amp;#39;, 0); INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;RetryRollbacking&amp;#39;, &amp;#39; &amp;#39;, 0); INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;TxTimeoutCheck&amp;#39;, &amp;#39; &amp;#39;, 0);</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/frag/%E6%AE%8B%E5%8D%B7-SpringSecurity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/frag/%E6%AE%8B%E5%8D%B7-SpringSecurity/</guid><description>CH01. SpringSecurity基础入门 心法: 安全框架
安全框架就是解决系统安全的框架，可以通过配置的方式实现对资源的访问限制，目前主流产品包括Spring家族的SpringSecurity框架和Apache的Shiro框架。 心法: SpringSecurity
SpringSecurity是Spring用于提供声明式安全访问控制解决方案的安全框架。 SpringSecurity核心认证：比对用户的账号密码身份等信息，即登录。 SpringSecurity核心授权：为用户赋权或赋角色。 EP01. 搭建基础环境 添加父项目配置 &amp;lt;!--父项目--&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;version&amp;gt;2.3.12.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; 添加三方依赖 &amp;lt;!--三方依赖--&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-property--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-property&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;property&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-security--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-security-property--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-property&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;property&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 开发主配文件 server: port: 8123 开发启动类 package com.lsx; /** @author lsx */ @SpringBootApplication public class SpringSecurityApp { public static void main(String[] args) { SpringApplication.</description></item><item><title>JB5-0-项目搭建</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</guid><description>Java道经第5卷 - 第0阶 - 项目搭建
CH01. 搭建数据库 武技: 创建MySQL数据库和相关表
创建数据库实例: cmd: create database v3_alibaba character set utf8mb4; use v3_alibaba; 导入数据库表和测试数据: res: v3_alibaba.sql CH02. 父项目管理依赖 武技: 在父项目 java-book 中配置依赖管理
添加全局属性: &amp;lt;spring-cloud-version&amp;gt;Hoxton.SR12&amp;lt;/spring-cloud-version&amp;gt; &amp;lt;spring-cloud-alibaba-version&amp;gt;2.2.9.RELEASE&amp;lt;/spring-cloud-alibaba-version&amp;gt; &amp;lt;dobbo-version&amp;gt;2.7.13&amp;lt;/dobbo-version&amp;gt; &amp;lt;spring-context-support-version&amp;gt;1.0.11&amp;lt;/spring-context-support-version&amp;gt; &amp;lt;jjwt-version&amp;gt;0.9.0&amp;lt;/jjwt-version&amp;gt; &amp;lt;rocketmq-version&amp;gt;2.0.3&amp;lt;/rocketmq-version&amp;gt; 添加依赖管理: &amp;lt;!--spring-cloud-dependencies--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-alibaba-dependencies--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-alibaba-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--dubbo-spring-boot-starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${dobbo-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-context-support: 解决dubbo2.7.13的jar包冲突问题--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-context-support-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--jjwt--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jjwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jjwt-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB5-1-注册中心</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</guid><description>[!NOTE] Java道经第5卷 - 第1阶 - 注册中心 v5-1-alibaba-nacos
S01. 微服务架构 E01. 微服务演变历史 心法：单体应用 -&amp;gt; 垂直应用 -&amp;gt; 分布式应用 -&amp;gt; SOA应用 -&amp;gt; 微服务应用
1. 单体应用架构 心法：单体应用架构 Monolithic Architecture，也被各种微服务书籍戏称为巨石架构
单体架构中，用户界面、业务代码和数据库调用等所有内容都包含在同一个Jar包中。 ![[第5阶段-ALIBABA/JB5-1-注册中心/draw/单体应用架构.md#^group=ul-mRDUj0YHYd0uIlWm3o|100%]]
项 描述 优点 架构简单，项目开发，部署和维护的成本低，适用于小型项目。 缺点 1. 功能耦合度极高，单点容错率低。2. 水平扩展性极差，无法单独对某个热点业务进行集群。3. 随着时间的推移，它的代码量将变得越来越庞大，越来越难以管理。4. 任何修改都必须要重新部署整个项目。 2. 垂直应用架构 心法：垂直应用架构 Vertical Architecture
垂直应用架构就是按照按功能，将单体应用拆分为N个互不相干的应用，以此来提升整体的性能。 ![[第5阶段-ALIBABA/JB5-1-注册中心/draw/垂直应用架构.md#^group=62odhNUXys5Lfg9Onavlv|100%]]
项 描述 优点 1. 各个应用分担了整体访问的流量，解决了一部分并发问题，提高了性能。2. 高流量时，仅针对某个热点服务进行集群即可，不用整个项目集群，提高了扩展性。3. 一个应用出问题不会影响到其他应用，提高容错率。 缺点 1. 应用之间相互独立，无法相互调用。2. 应用之间难免会产生大量的重复代码，后期维护困难，一改全改。 3. 分布式应用架构 心法：分布式应用架构 Vertical Architecture
分布式应用架构在垂直应用架构的基础上，将重复的代码全部抽取到公共服务层，供其他应用来调用。 ![[第5阶段-ALIBABA/JB5-1-注册中心/draw/分布式应用架构.md#^group=OwEfxlEpNW_t4A2PCOZO2|100%]]
项 描述 优点 引入公共服务层可以提高整体心痛的代码重用性。 缺点 应用之间调用关系复杂，耦合度变高，维护困难。 4. SOA应用架构 心法：SOA应用架构 Service-Oriented Architecture</description></item><item><title>JB5-2-远程调用</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</guid><description>[!NOTE] Java道经第5卷 - 第2阶 - 远程调用 v5-2-alibaba-openfeign &amp;amp; v5-2-alibaba-dubbo
S01. 远程调用 E01. 远程调用方式 心法：微服务架构中，多个服务之间的远程调用方式
比较项 RESTful RPC 通讯协议 通常使用 HTTP 协议作为通信协议利用 HTTP 方法和状态码进行通信 可以使用多种底层协议，如 HTTP、TCP、UDP 等一般使用TCP 数据格式 通常使用 JSON 或 XML 格式 通常使用二进制格式、JSON、XML 等 性能 HTTP 通信开销较大，性能低 二进制协议通信开销较小，性能高 灵活度 灵活度高使用统一的接口和标识符来操作资源可以更容易地进行扩展和修改 灵活度低客户端和服务端需要使用特定的接口和方法来进行通信对接口的修改可能会影响到客户端和服务端的实现 状态管理 强调无状态性即服务器不应该保存客户端的状态信息 支持有状态的通信即服务器可以保存客户端的状态信息 应用 微服务架构 SOA架构 1. RESTFul 心法：REST Representational State Transfer
RESTful是一种基于资源的架构风格，强调利用统一的接口进行通信，每个资源都有一个唯一的标识符（URI），并且通过 HTTP 方法（如 GET、POST、PUT、DELETE）对资源进行操作。 2. RPC 心法：RPC Remote Promote Call
RPC 是一种远程调用的架构风格，客户端可以调用远程服务器上的函数或方法，就像调用本地函数一样，通过网络进行通信。 RPC框架的主要目标就是让远程服务调用更简单、透明。 RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。 S02. OpenFeign E01.</description></item><item><title>JB5-3-流量卫兵</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/</guid><description>[!NOTE] Java道经第5卷 - 第3阶 - 流量卫兵 v5-3-alibaba-sentinel
S01. Jmeter压测工具 心法: Jmeter压测工具
Jmeter是Apache组织基于Java开发的压力测试工具。 E01. Jmeter工具安装 武技: 安装Jmeter压测工具
1. 安装压测工具 确认 JAVA_HOME 配置是否正确。 安装Jmeter压测工具 apache-jmeter-5.2.1.zip: 解压缩即可。 启动Jmeter压测工具: 双击启动 @\bin\jmeter.bat 文件启动Jmeter压测工具。 关闭CMD窗口时，视为关闭Jmeter压测工具。 2. 调整语言环境 点击 Options -&amp;gt; Choose Language 项。 选择 Chinese(Simplified) 简体中文 项。 E02. Jmeter压测流程 武技: Jmeter压测工具使用流程
flowchart LR n1[&amp;#34;添加线程组&amp;#34;] --&amp;gt; n2[&amp;#34;添加HTTP请求&amp;#34;] --&amp;gt; n3[&amp;#34;添加结果树&amp;#34;] --&amp;gt; n4[&amp;#34;启动测试&amp;#34;] 1. 添加线程组 心法：线程组用于设置线程相关信息
右键 Test Plan: 依次选择 添加 -&amp;gt; 线程(用户) -&amp;gt; 线程组 进入线程组配置界面。 相关项 描述 示例 名称 名称随意，唯一即可 openfeign-order 线程数 一共要启动多少个线程 2 RampUp时间（秒） 全部线程需要在多少秒内启动完毕设置 -1 表示系统自动配置 -1 循环测试 每个线程要循环执行多少次勾选 永远 表示一直执行不停止 3 2.</description></item><item><title>JB5-4-服务网关</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</guid><description>[!NOTE] Java道经第5卷 - 第4阶 - 服务网关 v5-4-alibaba-gateway
S01. Gateway概念入门 E01. 网关基本概念 心法: 网关概念
API网关是所有请求的公共入口，为客户端提供统一服务。 API网关可实现一些如认证，鉴权，监控，路由转发等与业务本身无关的公共逻辑。 1. 网关优势 心法: 当微服务加入网关功能之后
微服务不再需要管理和记录其他微服务的地址和端口，统一由API网关进行管理和路由转发。 不需要为每个微服务配置认证和鉴权代码，统一由API网关进行配置。 更容易解决跨域请求问题。 2. Gateway 心法: SpringCloud-Gateway，简称Gateway
Gateway是Spring公司为了替换Zuul而开发的网关服务。 Gateway基于Filter链提供了网关基本的功能如安全，监控和限流等。 Gateway性能强劲，是第一代网关Zuul的1.6倍。 Gateway功能强大，内置了很多实用功能，如路由转发，监控，限流等。 Gateway学习成本高，其实现依赖Netty与WebFlux，而非传统的Servlet编程模型。 Gateway依赖springboot2.0+版本，且无法将其部署在web容器中运行，只能打成jar包执行。 E02. 开发订单服务 武技: 创建 v5-4-alibaba-gateway 子项目，以及 gateway-order 子项目
1. 引入三方依赖 在父项目中锁定版本： pom.xml
&amp;lt;spring-boot-version&amp;gt;2.3.12.RELEASE&amp;lt;/spring-boot-version&amp;gt; &amp;lt;spring-cloud-version&amp;gt;Hoxton.SR12&amp;lt;/spring-cloud-version&amp;gt; &amp;lt;spring-cloud-alibaba-version&amp;gt;2.2.9.RELEASE&amp;lt;/spring-cloud-alibaba-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; 在父项目中管理依赖： pom.xml
&amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-parent--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-boot-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-dependencies--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB5-5-链路追踪</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid><description>[!NOTE] Java道经第5卷 - 第5阶 - 链路追踪 v5-5-alibaba-sleuth
S01. Sleuth概念入门 心法: Sleuth链路追踪
SpringCloud中的Sleuth组件用于将一次分布式请求还原成调用链路，进行日志记录，性能监控并集中展示。 E01. Sleuth核心组件 1. TraceId 心法: Sleuth核心之 TraceId
当请求到达微服务的入口端点时，Sleuth会为该请求创建一个 TraceId 作为本次请求的唯一标识。 从请求开始到请求结束，TraceId 的值都不会发生改变。 2. SpanId 心法: Sleuth核心之 SpanId
在一次完整的请求中，每个分支请求都会生成一个 SpanId 作为唯一标识。 SpanId 用来标记请求的开始，具体过程和结束，方便统计每次请求的调用时间和元信息等。 3. Annotation 心法: Sleuth核心之 Annotation
Annotation: 用于记录一次请求的生命周期时间段，是链路追踪内部使用的重要元素。 相关概念 描述 相关公式 CS(Client Send) 客户端发出请求，开始一个请求的生命周期 SR - CS = 网络延迟时间 SR(Server Received) 服务端接收到请求，并开始进行处理 SS(Server Send) 服务端处理请求完毕，准备给客户端发送响应 SS - SR = 服务器处理时间 CR(Client Received) 客户端接收到服务端的响应，整个请求结束 CR - CS = 请求的总时间 E02.</description></item><item><title>JB5-6-消息队列</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description>[!NOTE] Java道经第5卷 - 第6阶 - 消息队列 v5-6-alibaba-rocketmq &amp;amp; v5-6-alibaba-rabbitmq
S01. MQ概念入门 E01. MQ相关基础概念 1. MQ基本概念 心法: 消息队列 MessageQueue，简称MQ
当系统中出现生产和消费的速度或稳定性等因素不一致时，就需要使用MQ作为一个抽象的中间层技术，来弥合双方的差异。 MQ主要用于对微服务间通信进行解耦，对高并发请求进行削峰填谷，异步操作提高系统性能。 关键词 中文 描述 示例 Message 消息 两个应用间传递的数据单位 简单的文本字符串，复杂的Java对象等 MessageQueue 消息队列 在消息的传输过程中，保存消息的容器 RocketMQ，RabbitMQ等 2. MQ四大特征 心法: 消息队列的四大特征
特征 描述 MQ消息不丢失 MQ采取 PUT-GET-DELETE 模式，仅在消息被完整处理后才会将其删除 MQ服务无关联 MQ下游服务崩溃，上游服务仍可继续PUT，等待下游服务恢复 MQ处理不重复 MQ中的一个消息仅被处理一次，被某个下游服务获取时会锁定 MQ处理可延时 MQ中的消息可以被延时处理，更加灵活 E02. MQ的幂等性保证 心法: 所谓幂等性
若短时间内，一个方法被多次调用的结果和只调用一次的结果相同，则该方法具有幂等性。 常见请求类型中，GET/DELETE/PUT 请求都是幂等的，只有 POST 请求不幂等。 1. MQ重复消费 心法: MQ的重复消费现象
无论那种MQ产品，当消费者消费完毕后，都会向消息队列发送一个确认消息： 比如RabbitMQ的消费者在消费完成后，会向MQ发送一个 ACK 确认消息。 比如RocketMQ的消费者在消费完成后，会向MQ发送一个 CONSUME_SUCCESS 确认消息。 若某个消费者A发送确认消息时出现网络故障，则可能发现重复消费情况： 首先MQ因为消费者A超时而判定此次消费失败（但事实上消费者A已经消费成功了，只不过确认消息没发过来）。 然后MQ会将该消息分派给其他消费者B。 最终造成消费者A和消费者B重复消费。 因此只要保证MQ的幂等性，就可以保证MQ的消息不被重复消费。 2.</description></item><item><title>JB5-7-配置中心</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid><description>[!NOTE] Java道经第5卷 - 第7阶 - 配置中心 v5-7-alibaba-nacosconfig
S01. NacosConfig概念入门 心法: 为何使用配置中心
传统微服务架构的配置文件缺点： 相对分散：在一个微服务架构下，配置文件分散在各个微服务中，不好统一配置和管理。 无法区分环境：微服务项目包含测试，开发，生产等多种不同配置的环境，需要分别手动更新维护，很麻烦。 无法实时更新：修改配置后，必须重启服务才能使配置生效。 引入配置中心组件之后： 项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。 当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。 当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新。 常见配置中心产品 描述 Apollo 携程开源，支持实时更新，灰度发布，能对所有的配置进行版本管理、操作审计等功能 Disconf 百度开源，基于Zookeeper来实现配置变更后实时通知和生效 SpringCloudConfig SpringCloud开源，和Spring是无缝集成，但无操作界面，且不支持实时更新，需要重启或刷新 NacosConfig SpingCloudAlibaba开源，支持实时更新和版本管理，推荐使用 E01. 开发测试项目 武技: 创建 v5-7-alibaba-nacosconfig/nacosconfig-order 和 v5-7-alibaba-nacosconfig/nacosconfig-product 两个子项目，用于测试配置中心
1. 添加三方依赖 分别在两个子项目中引入三方依赖： pom.xml
&amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-alibaba-nacos-discovery--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-alibaba-nacos-config--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2. 开发启动类 在 v5-7-alibaba-nacosconfig/nacosconfig-order 子项目中开发启动类： com.lsx.NacosConfigOrderApp
/** @author lsx */ @SpringBootApplication public class NacosConfigOrderApp { public static void main(String[] args) { SpringApplication.</description></item><item><title>JB5-8-事务机制</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</guid><description>[!NOTE] Java道经第5卷 - 第8阶 - 事务机制 v5-8-alibaba-seata
S01. Seata概念入门 E01. 基础入门概念 1. 分布式事务 心法: 分布式事务
分布式事务是为了保证当一个事务中的N个操作分布在不同的微服务中时，仍可以具有本地事务的ACID特性。 2. Seata基础概念 心法: Simple Extensible Autonomous Transaction Architecture
Seata是阿里巴巴架构中的分布式事务解决方案，对业务无侵入。 Seata让分布式事务的使用像本地事务的使用一样简单和高效。 Seata1.5.X版本SeataServer的配置文件只需要配置 application.yml 配置文件即可。 从1.5.2版本开始支持Mysql8版本。 核心组件 全称 中文 功能描述 TC Transaction Coordinator 事务协调器 用于协调全局事务 RM Resource Manager 资源管理器 用于发起分支事务 TM Transaction Manager 事务管理器 用于向TC申请全局事务 3. SeataAT模式 心法: Seata底层原理 - AT模式
E02. 搭建Seata环境 武技：搭建Seata使用环境
1. 创建Seata数据库 武技：创建seata专用数据库，并引入Seata服务相关的4张表
创建seata专用数据库： -- 创建数据库 create database seata character set utf8mb4; use seata; 引入 Seata相关4张表：Seata相关4张表GitHub地址 2.</description></item><item><title>JB5-9-安全框架</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</guid><description>Java道经第5卷 - 第9阶 - v5-alibaba - 安全框架
CH01. Security概念入门 心法: 安全框架
安全框架就是解决系统安全的框架，可以通过配置的方式实现对资源的访问限制. 目前主流安全框架产品包括Spring家族的SpringSecurity框架和Apache的Shiro框架。 心法: SpringSecurity安全框架
SpringSecurity是Spring用于提供声明式安全访问控制解决方案的安全框架。 SpringSecurity核心认证: 比对用户的账号密码身份等信息，即登录。 SpringSecurity核心授权: 为用户赋权或赋角色。 EP01. 搭建项目环境 心法: SpringSecurity项目涉及到的表
member: 会员表。 role: 角色表 permission: 权限表 member_role: 会员-角色中间表/关系表，会员与角色是多对多关系。 role_permission: 角色-权限中间表/关系表，角色与权限是多对多关系。 武技: 创建测试子项目 alibaba-auth 并搭建基础项目环境
添加三方依赖 pom.xml &amp;lt;!--三方依赖--&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!--alibaba-common--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lsx&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;alibaba-common&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-alibaba-nacos-discovery--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-openfeign--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mybatis-plus-boot-starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql-connector-java--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item></channel></rss>