<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>第1阶段-BASICs on lsx2216</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/</link><description>Recent content in 第1阶段-BASICs on lsx2216</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Markdown/</guid><description>S01. 流程图 %%自上而下%% graph TD A--&amp;gt;B; %%从左往右%% flowchart LR A--&amp;gt;B; 线条 %%实线 graph LR A1 --- B -.- C === D --&amp;gt; E -.-&amp;gt; F ==&amp;gt; G ==o H ==x I; A2 o--o J &amp;lt;--&amp;gt; K x--x L o-.-o M &amp;lt;-.-&amp;gt; N x-.-x O o==o P; A3 &amp;lt;==&amp;gt; Q x==x A; 文本 graph LR id1[A]--&amp;gt;id2[A]--&amp;gt;id3((圆形)); ![[Pasted image 20240108132327.png]]
graph LR 开始 --&amp;gt; f{条件}; f -- true --&amp;gt; 语句1 --&amp;gt; 结束; f -- false --&amp;gt; 语句2 --&amp;gt; 结束; graph LR subgraph 浏览器 end; subgraph 服务端 f--&amp;gt;w; end; 浏览器 --&amp;gt; f graph TB subgraph one A1 --&amp;gt; B1 end subgraph two A2 === B2 end subgraph three A3 -.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Maven/</guid><description>Maven常见命令 Maven命令格式 Maven命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下: -D: 指定参数，如 -Dmaven.property.skip=true 跳过单元测试。 -P: 指定Profile配置，可以用于区分环境。 -e: 显示Maven运行出错的信息。 -o: 离线执行命令,即不去远程仓库更新包。 -X: 显示Maven允许的Debug信息。 -U: 强制去远程更新Snapshot的插件或依赖，默认每天只更新一次。 Maven常用命令 mvn archetype:create: 创建Maven项目: -DgroupId=packageName: 指定groupId。 -DartifactId=projectName: 指定artifactId。 -DarchetypeArtifactId=maven-archetype-webapp :创建Web项目。 mvn archetype:generate: 创建Maven项目。 mvn validate: 验证项目是否正确。 mvn package: Maven打包。 mvn jar:jar: 只打Jar包。 mvn source:jar: 生成源码Jar包。 mvn generate-sources: 产生应用需要的任何额外的源代码。 mvn compile: 编译源代码。 mvn property-compile: 编译测试代码。 mvn property: 运行测试。 mvn verify: 运行检查。 mvn clean: 清理Maven项目。 mvn eclipse:eclipse: 生成Eclipse项目。 mvn eclipse:clean: 清理Eclipse配置。 mvn idea:idea: 生成IDEA项目。 mvn install: 安装项目到本地仓库。 mvn:deploy: 发布项目到远程仓库。 mvn integration-property: 在集成测试可以运行的环境中处理和发布包。 mvn dependency:tree: 显示Maven依赖树。 mvn dependency:list: 显示Maven依赖列表。 mvn dependency:sources: 下载依赖包的源码。 Web项目相关命令 mvn tomcat:run: 启动Tomcat。 mvn jetty:run: 启动Jetty。 mvn tomcat:deploy: 运行打包部署。 mvn tomcat:undeploy: 撤销部署。 mvn tomcat:start: 启动Web应用。 mvn tomcat:stop: 停止Web应用。 mvn tomcat:redeploy: 重新部署。 mvn war:exploded tomcat:exploded: 部署展开的War文件。 将本地依赖添加到Maven仓库 将 ojdbc14.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-%E6%96%B0%E6%89%8B%E6%9D%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-%E6%96%B0%E6%89%8B%E6%9D%91/</guid><description>非Maven项目打Jar包 武技：使用IDEA将非Maven管理的项目打成jar包
File - Project Structure - Project Settings - Artifacts 单击加号 - JAR - From Modules with dependicies 在打开的对话框中指定jar包输出的位置，无需添加文件名。 点击应用OK完成配置。 回到主界面 - Build - Build Artifacts 选择你的jar包，点击 build，完成jar包导出。 如果需要写README.txt等附属文件，需要在classpath下创建。 GitHub GitHub是用于版本控制和协作的代码托管平台，是一个开源的分布式的版本控制系统，只支持git这一种唯一版本库。 GitHub从08年4月上线，一直到18年6月被微软收购。 登录 GitHub官网 注册GitHub账号并登录GitHub。 创建GitHub仓库：一个仓库对应一个项目。 点击右上角头像左边的加号按钮，选择 New Respsitory 填写仓库名 Repository name，建议和项目名同名（也可以不同名）。 填写仓库描述 Description，可选。 选择仓库访问权限：Private权限在2019年之前时收费的。 勾选 Initialize this repository with a README，为你的项目生成一个README文件。 GitHub是国外网站，比较慢，建议在 DNS查询网中 查询 github.com 复制TTL最快的： 140.82.113.3 github.com 查询 github.global.ssl.fastly.net 复制TTL最快的： 151.101.109.194 github.global.ssl.fastly.net 添加在 C:\Windows\System32\drivers\etc\ 中的hosts文件末尾，如下： 如果权限不够，点击host文件，右键属性-安全-编辑-选中当前登录的账号，对其勾选完全控制。 从GitHub上clone项目到本地 心法： 你可以直接点击Download下载，但仍建议使用Git命令方式进行clone操作。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/image/Nodepad3%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/image/Nodepad3%E6%95%99%E7%A8%8B/</guid><description>Nodepad3教程 下载Nodepad3 官网地址：https://github.com/rizonesoft/Notepad3/releases/tag/RELEASE_6.23.203.2 下载文件：Notepad3_6.23.203.2_x64_Portable.zip Portable为免安装便携版本 安装Nodepad3 解压缩 推荐 D:\notepad 启动Nodepad3 双击 Notepad3.exe 建议发送桌面快捷方式 配置Nodepad3 查看 勾选 显示行长度标记 勾选 显示缩进提示 取勾 书签 外观 语法高亮方案集 Obsidian 设置 勾选 自动关闭括号 勾选 自动关闭 HTML/XML 标记 勾选 自动补全单词 勾选 自动补全语法关键字</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/qa/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/qa/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91-QA/</guid><description>学前准备工作 你平时有哪些好的学习习惯和方法？ windows中查找的快捷键是什么？ 如何设置管理员权限？ 如何关闭防火墙？ 如何显示文件的拓展名？ 如何显示隐藏文件？ 如何修改计算机名？ 面向过程思想和面向对象思想的区别是什么？ 如何区分一门语言是不是编程语言？ java的技术之父是是谁？java是哪一年诞生的？ java的原公司是什么？目前公司是什么？ java语言最大的两个特色是什么？ 源代码，字节码和机器码分别是什么意思？ 编译的过程是什么过程？ java中的编译器是谁？ c语言为什么不能跨平台？ java语言为什么能跨平台？ jvm是什么？ 只有java能产生字节码么？其他语言不可以么？ 基础环境搭建 JDK和JRE的区别是什么？ JDK需要在哪家公司的官网下载？ 如果我只需要运行java程序，可不可以仅下载JRE？ 一台电脑上可以安装多个不同版本的JDK吗？ JDK的安装路径中允许出现中文和空格吗？ 如何开启windows平台下的命令行窗口？ cmd中如何切换当前位置到E盘？ cmd中如何清屏？ cmd中如何进入到一个指定的目录中？ cmd中如何查看java的当前版本？ cmd中如何查看当前目录下的全部目录和文件？ 为何要配置path变量？path变量的值要配置到哪一层目录？ 为何要配置JAVA_HOME变量？JAVA_HOME变量的值要配置到哪一层目录？ 运行一个Java程序需要经历哪三个步骤？ 如果修改了java文件的内容，是否需要重新编译？ 使用java.exe运行java程序时，为何不能添加class后缀？ 一个java文件通过编译只能获得一个class文件吗？ 一个java文件中可以存在多个被public修饰的类吗？ 类体中只能写哪两个内容？ main方法必须写在一个public修饰的类中，才可以被运行吗？ main方法是谁调用的？ static修饰符的三个特点是什么？ main方法为什么设计为public static void修饰？ main方法可以随意更改名字吗？ java中所有的方法名后面都会跟着一对小括号吗？ 什么叫方法形参？main方法的形参名可以更改吗？ String[] 表示什么意思？ 字符，字符串和字符串数组的区别是什么？ 集成开发环境 IDE是什么意思？你用的是什么IDE？ 你的IDEA是什么版本？ 什么是工作空间？ 字符编码是什么意思？你现在项目用什么字符编码？ JDK中最核心的jar包叫什么名字？ java中package的命名规范是什么？ java中Class类的命名规范是什么？ java中的run运行和debug运行有什么区别？ java中的class文件在哪里生成？ idea在运行代码之前会帮我们编译代码吗？ idea中如何手动编译代码？ idea中如何彻底删除一个项目？ 项目管理工具 Maven是做什么用的？ Maven是哪家公司维护的？ Maven的项目一键构建是什么意思？ Maven的依赖管理是什么意思？ 如何安装Maven？ 安装Maven是否需要配置环境变量？ mvn -version 命令是干嘛用的？ 本地仓库，远程仓库和中央仓库有什么区别？ 一个依赖(jar包)是如何在仓库中进行查找的？ 如何配置本地仓库？ 为什么要配置阿里云镜像？ mvn help:system 命令是干嘛用的？ 如何将maven到整合IDEA中？ 如何创建maven的父子项目？ 包名的命名规范是什么？ maven的groupId、artifactId和version分别是什么意思？ 父项目是否需要src目录？父项目是否需要pom.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/GitBashHere/GitBashHere%E4%B8%8D%E8%A7%81%E4%BA%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/GitBashHere/GitBashHere%E4%B8%8D%E8%A7%81%E4%BA%86/</guid><description> 问题描述：
OS系统更新了Win11之后，鼠标右键的 Git Bash Here 不见了
解决方案
1. 打开注册表 Win+R -&amp;gt; regedit 2. 添加 Git Bash Here 命令 进入位置 \HKEY_CLASSES_ROOT\Directory\Background\shell\
选中 command，右键新建项 Git Bash Here
选中 Git Bash Here ，右键新建项 command 选中 command，双击右侧的 (默认)，输入 git-bash.exe 的位置：
例如我的位置：&amp;quot;D:\Git\git-bash.exe&amp;quot; &amp;quot;--cd=%v.&amp;quot; 3. 添加 Git Bash Here 图标 点击 Git Bash Here，双击右侧的 (默认)，输入 git-bash.exe 的位置： 1. 例如我的位置：D:\Git\git-bash.exe：不用加双引号。 4. 完成测试 桌面鼠标右键 显示更多选项：查看是否存在 Git Bash Here 命令选项。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/IDEA%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/IDEA%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</guid><description>IDEA插件推荐 Translation 翻译 翻译对话：使用 Ctrl + Shift + O 呼出翻译对话框 快捷翻译：选中文本后，使用 Ctrl + Shift + Y 翻译 单词本：点击IDEA右侧边栏对应图标 CodeGeeX 智能助手 需要先登录一下CodeGeeX 如 177/验证码 中文配置：在 Tools -&amp;gt; CodeGeeX 处改为中文语言，共3处 快捷解析：右键选中的代码后，使用 Alt + Shift + E 解析 快捷注释：右键选中的代码后，使用 Alt + Shift + V 注释 快速测试：右键选中的代码后，使用 Alt + Shift + V 生成单元测试 面板：点击IDEA右侧边栏对应图标 官网：https://codegeex.cn 手册：https://zhipu-ai.feishu.cn/wiki/CuvxwUDDqiErQUkFO2Tc4walnZY Gitee 代码托管 账号绑定：点击 File -&amp;gt; Settings -&amp;gt; Version Control -&amp;gt; Gitee 代码托管：点击 Git -&amp;gt; Gitee -&amp;gt; 在 Gitee 上共享项目 GenerateAllSetter 快速生成SetGet 光标置于变量处，然后使用 Alt + Enter 呼出菜单 jclasslib Bytecode Viewer 查看字节码 查看：选中Java文件后，点击 View -&amp;gt; Show Bytecode With Jclasslib 面板：点击IDEA右侧边栏对应图标 Maven Helper 查看依赖冲突 点击POM文件下方的 Dependency Analyzer 选项卡 maven-search 搜索依赖坐标 使用 Ctrl + Shift + M 呼出搜索窗口，若快捷键冲突自行解决 Redis Helpler Redis可视化 点击IDEA右侧边栏对应图标 Wechat mini program support 微信小程序项目支持 WeChat weapp Support 微信小程序项目支持 Vue Vue项目支持</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Nodepad3%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Nodepad3%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid><description>Nodepad3教程 下载Nodepad3 官网地址：https://github.com/rizonesoft/Notepad3/releases/tag/RELEASE_6.23.203.2 下载文件：Notepad3_6.23.203.2_x64_Portable.zip Portable为免安装便携版本 安装Nodepad3 解压缩 推荐 D:\notepad 启动Nodepad3 双击 Notepad3.exe 建议发送桌面快捷方式 配置Nodepad3 查看 勾选 显示行长度标记 勾选 显示缩进提示 取勾 书签 外观 语法高亮方案集 Obsidian 设置 勾选 自动关闭括号 勾选 自动关闭 HTML/XML 标记 勾选 自动补全单词 勾选 自动补全语法关键字</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E5%AF%BC%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E5%AF%BC%E5%9B%BE/</guid><description>Obsidian教程 简介 定位 Markdown笔记软件 资费 个人使用免费 同步和发布功能需要收费 支持赞助 更快速获取新版本 可加入内部社区 可获得徽章 特点 本地存储，更私密，更便捷 丰富的主题 丰富的插件 日历，思维导图，看板，GIT等等 数据可以长期保存 强调关系 内链，外链，反链，入链，出链 关系图谱 支持同步 需要花钱 支持发布 需要花钱 支持协作 需要花钱 安装 下载 OB官网 https://obsidian.md/download 阿里云盘 https://www.alipan.com/s/y4R7Uu3cAMQ 05le 安装 安装文件 Obsidian_1.5.3_Setup.exe 安装方式 傻瓜式安装 创建仓库 1.输入仓库名称 2.选择仓库位置 3.点击创建按钮 起始布局 功能按钮区 打开快速切换（Ctrl + O） 快速切换文件，适用于文件数量过多的情况 查看关系图谱（Ctrl + G） 以神经网络的形式查看文件之间的联系 新建白板 创建一张Canvas白板 打开/创建今天的日记 创建一个日记文件 插入模板 插入自定义的内容模板 打开命令面板（Ctrl + P） 打开其他仓库 帮助（F1） 打开帮助文档 设置（Ctrl + ,） 打开全局设置 文件列表区 顶部按钮 新建笔记 新建文件夹 排序 全部折叠/全部展开 内容编辑区 左右分屏 向右开辟新标签页，内容指向当前文件 上下分屏 向下开辟新标签页，内容指向当前文件 在新窗口打开 开辟新窗口，内容指向当前文件 增加文档属性 导图，看板等特殊MD文件需要添加对应的文档属性 查找（Ctrl + F） 全局查找（Ctrl + Shift + F） 替换（Ctrl + H） 导出为PDF 默认保留OB样式，但不生成目录 可在 https://edit.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E6%95%99%E7%A8%8B/</guid><description>S01. 编辑器 设置 -&amp;gt; 编辑器
取勾 缩减栏宽: 此时编辑器宽度为100%，加大编辑器宽度。 S02. 文件与链接 设置 -&amp;gt; 文件与链接
勾选 始终更新内部链接: 此时重命名文件时可以自动更新链接地址，无需手动确认。 选择 内部链接类型 为 基于当前笔记的相对路径: 此时内链会使用相对路径，更灵活。 取勾 使用Wiki链接: 此时链接使用标准的MD语法，更通用。 选择 附件默认存放路径 为 当前文件所在文件夹下指定的子文件夹中: 此时附件会自动存放到指定位置。 填写 子文件夹名称 为 image: 附件的指定文件夹名称。 S03. 外观 设置 -&amp;gt; 外观
主题选择 Things: 此时会自动切换主题: 需要提前在 .obsidian\themes\ 目录下安装对应主题。 调整 字体大小 为 18。 勾选 快速调整字体大小: 此时通过 ctrl + 鼠标滚轮 可以快速调整字体。 S04. 全局样式 设置 -&amp;gt; 外观 -&amp;gt; 全局CSS样式
创建全局样式文件 .obsidian\snippets\global.css，目录不存在则手动创建。 在全局样式文件中输入CSS代码，并保存文件: img { border: 1px solid gray; /*边框*/ margin-bottom: 10px; /*下边距*/ } 点击 设置 -&amp;gt; 外观: 在最后的 css代码片段 中选择启用 global.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/VSCode%E6%95%99%E7%A8%8B/VSCode%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/VSCode%E6%95%99%E7%A8%8B/VSCode%E6%95%99%E7%A8%8B/</guid><description>S01. 下载安装 直接在微软商店中搜索 vscode，然后点击安装即可。 S02. 插件配置 E01. 中文插件 添加中文插件：点击左侧 Extension，然后输入 Chinese，选择安装 Chinese(Simplified)(简体中文) Language Pack for Visual Studio Code 即可。 E02. 在浏览器打开 E03. 格式化文档 武技：Prettier插件配置流程
随便一篇HTML文档中，点击右键 使用...格式化文档： 在弹出的窗口中选择 配置默认格式化程序... 在弹出的窗口中选择 Prettier - Code formatter（默认值） 随便一篇HTML文档中，点击右键 格式化文档 即可完成格式化： S03. 更改快捷键 个人习惯IDEA的快捷键，所以这项选做。 E01. 快速复制行 更改为 ctrl + d E02. 格式化代码 更改为 ctrl + alt + L S04. 其他配置 E01. 放大缩小字体 点击 设置 -&amp;gt; 设置：输入 Mouse Wheel Zoom，勾选如下两项： E02. 切换默认终端 默认为powershell，点击设置切换为cmd</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements eg: int[] arr = { 1, 2, 3, 33, 105 }; ^pSbajkBV
Stack ^v6NCjE5V
0x100 ^7rqc71bQ
2 ^N4zaFf0S
105 ^Ys1iIy6h
arr ^BKmzWkXG
0X100 ^VLjZzF2l
0X104 ^kY2JkKeh
内存地址 + 4(int型占4字节) = 下一个元素的内存地址 ^VCxit9CP
Heap ^504a8vqW
0X108 ^HT9wLusU
3 ^xQM7utNr
0X112 ^KuUl7qLk
33 ^remcFmIi
1 ^S27VN11m
0 ^sSaO1Ivl
1 ^CBZWI1Lw
2 ^Cj0SiafB
3 ^tiaXpdDV
数组下标 ^8mBU1ANF</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements eg: int[][] arr = { {1,2,3}, {33,44,2,13}, {105} }; ^pSbajkBV
Stack ^v6NCjE5V
0xA01 ^7rqc71bQ
0X001 ^2BPAvWDk
0X521 ^N4zaFf0S
0xAA0 ^Ys1iIy6h
105 ^hdddstKz
33 ^Laf9u4pa
44 ^0cOyuYtQ
2 ^0Kv1sfrB
13 ^2VkKkBKr
arr ^BKmzWkXG
0XA01 ^VLjZzF2l
0XA05 ^kY2JkKeh
0XA09 ^VCxit9CP
0X521 ^nPs5jZC6
0X525 ^pjWspjaJ
0X529 ^2SK3WZOC
0X533 ^4HLWba64
0xAA0 ^7YfKC1rc
Heap ^504a8vqW
0X001 ^hRP3taNn
0X005 ^S4gUu19d</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/qa/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/qa/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA-QA/</guid><description>文档化编程思想 注释是否参与编译？ 单行注释写在代码上面还是后面？ 在注释中使用 TODO: 有什么作用？ 文档注释和单行/多行注释的区别在于什么？ javadoc.exe 工具是做什么用的？ 文档注释中的 @author 是做什么用的？ 文档注释中，方法的参数和返回值分别用哪两个注解进行标注？ 输出与特殊字符 换行输出语句允许空输出吗？ 格式化输出语句允许空输出吗？ java中的换行符和制表符分别是什么？ System.out.println(1 + (2 + 3) + &amp;quot;4&amp;quot; + 5 + 6); 的结果是多少？ 格式化输出语句模板中的 %.2f 表示什么？ 什么是转义字符？如何使用？ 特殊符号 \n 和 \t 分别有什么效果？ 常量与特殊进制 什么叫常量？什么叫变量？ 被final修饰的变量是否可以认为是一个常量？ java中是否可以直接编写二进制数？ java中的八进制数使用什么作为前缀？ java中的十六进制数使用什么作为前缀？ 4 + 6 这个计算操作在计算机底层的流程是怎样的？ 什么叫原码，真值，反码和补码？ 如何对一个补码求其原码？ Integer.toBinaryString() 输出的是原码还是补码？ 变量与代码沼泽 声明变量是怎样一个过程？ 如何理解 int money = 100; 这行代码？ 变量的三要素是什么？ 一个变量名的硬性要求是什么？ 什么叫java关键字，什么叫java保留字？ 基本数据的类型 java中存放整数的数据类型有哪个四个？ java中1个byte类型的变量占几个bit位？ java中1个byte类型的变量的存值范围是多少？ java中1个int类型变量的存值范围是多少？ java中整数常量的默认类型是什么？ 针对 byte a = 100;，100默认类型是int，为什么可以用byte类型变量接收？ java中浮点数常量的默认类型是什么？ java中的字符型占几个字节？ java中的字符型是否可以直接赋值数字，表示什么？ java中的布尔型究竟是占1byte还是占1bit？ java中的八个基本数据类型是否都可以进行互相转换？转换原则是什么？ 浮点数转成整数时是按照四舍五入的规则，还是按照向下取整的规则？ 字符型能否转换成浮点数？ 代码 short s1 = 1; s1 = s1 + 1; 有编译错误吗？ 不同类型之间计算，结果返回类型大的还是类型小的？ java中对一个2147482647值的int型变量加1，会发生什么现象？ 引用数据的类型 java中有多少个基本数据类型？有多少个引用数据类型？ 引用数据类型的通用声明赋值格式是什么？ java中唯一不需要导包的包是哪一个？ 什么是API？什么是API文档？ 字符串的底层是什么结构？ 字符串的长度是可变的吗？ 非static方法使用什么调用？static方法使用什么调用？ 如何判断两个字符串是否一模一样？ 如何判断一个字符串是否是空字符串？ 如何判断一个字符串中是否只存在一个 &amp;ldquo;A&amp;rdquo; 字符串？ 如何删除字符串中的全部空格？ 一般在什么情况下，代码会爆发空指针异常？ java中的索引一般都是从几开始的？目标数据不存在或未找到时一般都会返回哪个数字？ 正则表达式专题 什么是正则表达式？ 正则表达式除了对字符出进行规则匹配之外，还能对字符串做什么？ 虚拟机内存分布 JVM的运行时数据区在逻辑上被分为哪几块？ java栈和java堆的区别是什么？ 什么是内存地址？ java栈一般存放什么？java堆一般存放是什么？ 凡是new出来的实例都存放在堆内存中吗？ 什么是装箱和拆箱？从JDK的哪个版本开始自动拆装箱？ 什么时候需要装箱？ 常用运算符专题 0%3的结果是多少？ 0做除数的结果是什么？0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/res/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/res/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid><description>对称加密算法 代表：3DES / AES / DES等 举例：将 a 变成 4，将 b 变成 5，于是密码 ab 被加密成了 45。 总结：加密规则规律固定，了解规律即可破解，安全性极低。 单向HASH加密算法 代表：MD5 / SHA1等 举例：将 a 变为 #，将 b 变成 1，于是密码 ab 被加密成了 #1。 总结：HASH算法无规律，无法直接反向破解，但可通过建立彩虹表进行查表破解，如： 我的密码经过MD5加密后变成 Q!#FV!#0G! 你的密码经过MD5加密后也是 Q!#FV!#0G! 于是你自然知道我的密码是什么了，虽然破解费点时间，但也不是绝对的安全。 浮动HASH加密算法 代表：BCRYPT： 举例：将 a 变为 k，将 b 变成 6，于是密码 ab 被加密成了 k6： 然后再加上一些随机salt（盐份），变成 k6#$ 由于每次添加的slat都是随机的，所以彩虹表暴力破解也无能为力。 总结：BCRYPT是HASH算法的升级版，将salt随机混入加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题，是目前最安全的算法。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/qa/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/qa/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-QA/</guid><description>CH01. OOP抽象思想 如何理解OOP？四大特征是什么？ 面向对象编程和面向过程编程的区别是什么？ 面向对象编程和面向过程编程的关联是什么？ 何使适合使用面向对象编程？何使适合使用面向过程编程？ 面向对象编程的语言有哪些？ 面向过程编程的语言有哪些？ OOP思想关心的是具体的实现流程，还是对象的属性方法？ 如何理解对象具有唯一性？ 对象拥有属性和方法对吗？ 如何理解抽象？ CH02. OOP封装机制 如何理解封装？ java封装的最小单元是什么？ 类通过什么得到实例？ 实例通过什么得到类？ 封装可以保护对象的内部实现细节吗？ 封装的原则是最小封装还是最大封装？ java的四个权限修饰符从大到小依次是什么？ java的静态内部类支持private修饰符吗？ static修饰的静态类只能写在其它类的内部吗？ 非静态成员使用实例名调用还是类名调用？ 静态成员使用实例名调用还是类名调用？ 静态成员有哪三个特点？ 成员属性和局部变量有什么区别？ 引用类型的成员属性的默认值是什么？ double类型的成员属性的默认值是什么？ 当方法传递的参数是基本数据类型时，代表传递副本还是引用？ 当方法传递的参数是引用数据类型时，代表传递副本还是引用？ 成员属性支持四种权限修饰符吗？ 成员方法支持四种权限修饰符吗？ 静态方法可以访问非静态属性吗？ 非静态方法可以访问非静态属性吗？ 初始化块是在哪个阶段执行的？ 初始化块包括哪几种？ 构造器是每new一次执行一次吗？ 构造器的名字必须和类名一模一样吗？ 构造器可以拥有返回值吗？可以使用 void 返回值吗？ 构造器和方法在写法上有什么区别？ 构造器可以被 static 修饰吗？ 构造器可以被 private 修饰吗？ 是每一个类（除接口外）都存在一个构造器吗？ 当我显示声明一个类的构造器时，默认的隐式无参构造器会被覆盖吗？ 一个类可以拥有多个构造器吗？ 如果在构造器中编写 this()，表示什么意思？ 动态块是每new一次执行一次吗？ 动态块和构造器有什么区别？ 静态块是每new一次执行一次吗？ 静态块中只能访问静态成员吗？ 动态快和静态块的区别？ CH03. OOP继承机制 继承的目的是什么？ 继承的关键字是什么？ 子类能否继承父类的private成员？ 子类能否继承父类的构造器？ 被 final 修饰的类能够被继承吗？ 被 final 修饰类中的所有属性也都是final的吗？ java中的祖先类是哪一个？ this() 和 super() 的区别？ super() 必须写在构造器的第一行吗？ 实例化子类的时候，是必须先调用父类的构造器吗？ 子类中可使用 super.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/qa/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/qa/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6-QA/</guid><description>异常处理 所有异常的父类是什么？ 一套异常结构中，try{} 是做什么的？ 一套异常结构中，try{} 必须存在吗？ 一套异常结构中，try{} 可以存在2个吗？ 一套异常结构中，catch(){} 是做什么的？ 一套异常结构中，catch(){} 必须存在吗？ 一套异常结构中，catch(){} 可以存在2个吗？ 一套异常结构中，catch(){} 中可以同时捕获多种异常吗？ 一套异常结构中，catch(){} 中同时捕获多种异常时，顺序重要吗？ 一套异常结构中，catch(){} 中有哪几种处理方案？ 一套异常结构中，finally{} 是做什么的？ 一套异常结构中，finally{} 必须存在吗？ 一套异常结构中，finally{} 可以存在2个吗？ 如果一个异常被处理了，那么它下面的代码会不会被执行？ ArithmeticException 是什么异常？ ArrayIndexOutOfBoundsException 是什么异常？ NullPointerException 是什么异常？ 可以使用 try-with-resources 写法的前提是什么？ 如果若try/catch块中存在return，则return和finally中的代码谁先执行？ finally{} 中可以成功修改基本类型的返回值吗？ finally{} 中可以成功修改引用类型的返回值吗？ 若 try{}，catch(){} 和 finally{} 中同时存在return，则最终只会执行哪一个？ 如何知道某个异常是不是运行时异常？ 若某个方法抛出了运行时异常，则调用方必须要手动处理吗？ 若某个方法抛出了可控异常，则调用方必须要手动处理吗？ 使用多态调用方法时，是否需要处理可控异常是看左边还是看右边？ 泛型容器 一个类可以添加多个泛型吗？ 构造器名后面能使用泛型吗？ 构造器参数能使用泛型吗？ 什么叫泛型擦除？ 成员方法上可以直接使用类上的泛型吗？ 静态方法上可以直接使用类上的泛型吗？ 成员方法上可以在方法返回值前自定义泛型吗？ 静态方法上可以在方法返回值前自定义泛型吗？ &amp;lt;?&amp;gt; 表示什么意思？ &amp;lt;? super Number&amp;gt; 表示什么意思？ &amp;lt;? extends Number&amp;gt; 表示什么意思？ List结构是相对的有序的吗？ List是可以直接打印的吗？ ArrayList和LinkedList的底层实现分别是什么？ ArrayList和LinkedList的区别是什么？ 时间戳是什么意思？如何获取当前时间戳？ List和Set的区别是什么？ Set中能存储null值吗？ 什么是哈希分布？ 如果发生了哈希冲突怎么办？ 实现了Comparable接口的类需要重写哪个方法？ 实现了Comparator接口的类需要重写哪个方法？ TreeSet和HashSet的区别是什么？ TreeSet是对所有的类都可以进行排序吗？ 若某个实体类没有实现Comparable接口，且treeSet在构造时也没有指定自定义的比较器，则treeSet将无法存储该实体类吗？ 在继承关系中，List和Set接口是兄弟关系吗？ 在继承关系中，List和Map接口是兄弟关系吗？ Map是以什么方式存值的？ Map中的key值能重复吗？能使用null吗？ Map中的value值能重复吗？能使用null吗？ Map接口是Set接口的底层实现吗？ Map中的键一般都是什么类型？ Map中的值一般都是什么类型？ 如何遍历一个Map容器？ HashMap底层是什么结构？ HashMap容量的初始容量是多少？ HashMap底层如何存取数据？ HashMap中，什么叫哈希冲突？如何解决哈希冲突？ HashMap中，当哈希冲突时，是头插链表，还是尾插链表？ HashMap中，当Entry数组某位置上的链表长度超过多少时会转为红黑树结构？ HashMap中，什么叫rehash操作？什么时候触发rehash操作？ 常用工具 JDK1.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>字节码指令 0x00(nop)：什么都不做。 0x01(aconst_null)：将null推送至栈顶。 0x02(iconst_m1)：将int型-1推送至栈顶。 0x03(iconst_0)：将int型0推送至栈顶。 0x04(iconst_1)：将int型1推送至栈顶。 0x05(iconst_2)：将int型2推送至栈顶。 0x06(iconst_3)：将int型3推送至栈顶。 0x07(iconst_4)：将int型4推送至栈顶。 0x08(iconst_5)：将int型5推送至栈顶。 0x09(lconst_0)：将long型0推送至栈顶。 0x0a(lconst_1)：将long型1推送至栈顶。 0x0b(fconst_0)：将float型0推送至栈顶。 0x0c(fconst_1)：将float型1推送至栈顶。 0x0d(fconst_2)：将float型2推送至栈顶。 0x0e(dconst_0)：将double型0推送至栈顶。 0x0f(dconst_1)：将double型1推送至栈顶。 0x10(bipush)：将单字节的常量值(-128~127)推送至栈顶。 0x11(sipush)：将一个短整型常量值(-32768~32767)推送至栈顶。 0x12(ldc)：将int,float或string型常量值从常量池中推送至栈顶。 0x13(ldc_w)：将int,float或string型常量值从常量池中推送至栈顶(宽索引)。 0x14(1dc2_w)：将long或double型常量值从常量池中推送至栈顶（宽索引）。 0x15(iload)：将指定的int型局部变量推送至栈顶。 0x16(lload)：将指定的long型局部变量推送至栈顶。 0x17(fload)：将指定的float型局部变量推送至栈顶。 0x18(dload)：将指定的double型局部变量推送至栈顶。 0x19(aload)：将指定的引用类型局部变量推送至栈顶。 0x1a(iload_0)：将第一个int型局部变量推送至栈顶。 0x1b(iload_1)：将第二个int型局部变量推送至栈顶。 0x1c(iload_2)：将第三个int型局部变量推送至栈顶。 0x1d(iload_3)：将第四个int型局部变量推送至栈顶。 0x1e(lload_0)：将第一个long型局部变量推送至栈顶。 0x1f(lload_1)：将第二个long型局部变量推送至栈顶。 0x20(lload_2)：将第三个long型局部变量推送至栈顶。 0x21(lload_3)：将第四个long型局部变量推送至栈顶。 0x22(fload_0)：将第一个float型局部变量推送至栈顶。 0x23(fload_1)：将第二个float型局部变量推送至栈顶。 0x24(fload_2)：将第三个float型局部变量推送至栈顶。 0x25(fload_3)：将第四个float 型局部变量推送至栈顶。 0x26(dload_0)：将第一个double型局部变量推送至栈顶。 0x27(dload_1)：将第二个double型局部变量推送至栈顶。 0x28(dload_2)：将第三个double型局部变量推送至栈顶。 0x29(dload_3)：将第四个double型局部变量推送至栈顶。 0x2a(aload_0)：将第一个引用类型局部变量推送至栈顶。 0x2b(aload_1)：将第二个引用类型局部变量推送至栈顶。 0x2c(aload_2)：将第三个引用类型局部变量推送至栈顶。 0x2d(aload_3)：将第四个引用类型局部变量推送至栈顶。 0x2e(iaload)：将int型数组指定索引的值推送至栈顶。 0x2f(laload)：将long型数组指定索引的值推送至栈顶。 0x30(faload)：将float型数组指定索引的值推送至栈顶。 0x31(daload)：将double型数组指定索引的值推送至栈顶。 0x32(aaload)：将引用型数组指定索引的值推送至栈顶。 0x33(baload)：将boolean或byte型数组指定索引的值推送至栈顶。 0x34(caload)：将char型数组指定索引的值推送至栈顶。 0x35(saload)：将short型数组指定索引的值推送至栈顶。 0x36(istore)：将栈顶int型数值存入指定局部变量。 0x37(lstore)：将栈项long型数值存入指定局部变量。 0x38(fstore)：将栈顶float型数值存入指定局部变量。 0x39(dstore)：将栈项double型数值存入指定局部变量。 0x3a(astore)：将栈顶引用型数值存入指定局部变量。 0x3b(istore_0)：将栈顶int型数值存入第一个局部变量。 0x3c(istore_1)：将栈顶int型数值存入第二个局部变量。 0x3d(istore_2)：将栈顶int型数值存入第三个局部变量。 0x3e(istore_3)：将栈项int型数值存入第四个局部变量。 0x3f(lstore_0)：将栈项long型数值存入第一个局部变量。 0x40(lstore_1)：将栈顶long型数值存入第二个局部变量。 0x41(lstore_2)：将栈顶long型数值存入第三个局部变量。 0x42(lstore_3)：将栈顶long型数值存入第四个局部变量。 0x43(fstore_0)：将栈顶float型数值存入第一个局部变量。 0x44(fstore_1)：将栈顶float型数值存入第二个局部变量。 0x45(fstore_2)：将栈顶float型数值存入第三个局部变量。 0x46(fstore_3)：将栈顶float型数值存入第四个局部变量。 0x47(dstore_0)：将栈顶double型数值存入第一个局部变量。 0x48(dstore_1)：将栈顶double型数值存入第二个局部变量。 0x49(dstore_2)：将栈顶double型数值存入第三个局部变量。 0x4a(dstore_3)：将栈顶double型数值存入第四个局部变量。 0x4b(astore_0)：将栈顶引用型数值存入第一个局部变量。 0x4c(astore_1)：将栈项引用型数值存入第二个局部变量。 0x4d(astore_2)：将栈顶引用型数值存入第三个局部变量 0x4e(astore_3)：将栈项引用型数值存入第四个局部变量。 0x4f(iastore)：将栈项int型数值存入指定数组的指定索引位置 0x50(lastore)：将栈顶long型数值存入指定数组的指定索引位置。 0x51(fastore)：将栈项float型数值存入指定数组的指定索引位置。 0x52(dastore)：将栈顶double型数值存入指定数组的指定索引位置。 0x53(aastore)：将栈顶引用型数值存入指定数组的指定索引位置。 0x54(bastore)：将栈顶boolean或byte型数值存入指定数组的指定索引位置。 0x55(castore)：将栈顶char型数值存入指定数组的指定索引位置。 0x56(sastore)：将栈顶short型数值存入指定数组的指定索引位置。 0x57(pop)：将栈项数值弹出( 数值不能是long或double类型的)。 0x58(pop2)：将栈项的一个(long或double类型的)或两个数值弹出(其它)。 0x59(dup)：复制栈顶数值并将复制值压入栈顶 0x5a(dup_x1)：复制栈顶数值并将两个复制数值压入栈顶。 0x5b(dup_x2)：复制栈顶数值并将三个（或两个）复制数值压入栈顶。 0x5c(dup2)：复制栈顶一个（long或double类型的）或两个（其他）数值并将其复制压入栈顶。 0x5d(dup2_x1)：dup_x1指令的双倍版本。 0x5e(dup2_x2)：dup_x2指令的双倍版本。 0x5f(swap)：将栈最顶端的两个数值互换（数值不能是long或double类型的）。 0x60(iadd)：将栈顶两int型数值相加并将结果压入栈顶。 0x61(ladd)：将栈顶两long型数值相加并将结果压入栈顶。 0x62(fadd)：将栈顶两float型数值相加并将结果压入栈顶。 0x63(dadd)：将栈顶两double型数值相加并将结果压入栈顶。 0x64(isub)：将栈顶两int型数值相减并将结果压入栈顶。 0x65(lsub)：将栈顶两long型数值相减并将结果压入栈顶。 0x66(fsub)：将栈顶两float型数值相减并将结果压入栈顶。 0x67(dsub)：将栈顶两double型数值相减并将结果压入栈顶。 0x68(imul)：将栈顶两int型数值相乘并将结果压入栈顶.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid><description>心法: 字符串的创建方式 - 字面量
字面量创建方式指的是直接使用双引号将字符串引起来并赋值给一个变量: 如 String s01 = &amp;quot;hello&amp;quot; 代码。 若此时字符串池中已存在该字符串的引用地址: 则直接将字符串在常量池中的地址赋值给栈变量 s01。 若此时字符串池中并没有该字符串的引用地址: 则先在堆内存中创建一个实例，值为 hello，然后将该实例的地址存入字符串池中。 然后将该实例在堆内存中的地址赋值给栈变量 s01。 心法: 字符串的创建方式 - 实例化
字符串是引用数据类型，所以可以使用 new 关键字进行实例化创建: 如 String s01 = new String(&amp;quot;hello&amp;quot;) 代码。 该操作会在堆中创建一个实例，并将该实例在堆中的内存地址赋值给栈变量 s01。 若此时字符串池中已存在该字符串的引用地址: 则将该字符串在常量池中保存的地址赋值给栈变量 s01。 若此时字符串池中并没有该字符串的引用地址: 则将该实例在堆内存中的地址赋值给栈变量 s01。 package jvm.metadata; /** @author lsx */ @SuppressWarnings(&amp;#34;all&amp;#34;) public class StringTableTest { @Test public void testStringAddress() { /* * 1. 检查字符串池，其中并不存在 &amp;#34;lucky&amp;#34; 的引用 * - 在堆中创建一个值为 &amp;#34;lucky&amp;#34; 的实例0xAAA * - 将地址0xAAA存入字符串池 * 2.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/qa/JB1-6-%E8%99%9A%E6%8B%9F%E6%9C%BA-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/qa/JB1-6-%E8%99%9A%E6%8B%9F%E6%9C%BA-QA/</guid><description>类的加载过程 Java开发中，一个类文件的产生，需要经过哪三个步骤？ Java开发中，编译过程的底层主要做了些什么事情？ 只有Java语言才能编译出class文件吗？ Java开发中，运行指的是运行class文件本身，还是class文件中的字节码指令？ 运行过程中的加载和解释分别是什么意思？ Java字节码文件中的魔数是什么？有什么作用？ ClassLoader所负责的工作是什么？ JDK8版本的JVM中，提供了几种类型的类加载器？ JDK11版本的JVM中，提供了几种类型的类加载器？ AppClassLoader类加载器负责加载哪些内容？ AppClassLoader类加载器的父加载器是谁？ BootClassLoader类加载器负责加载哪些内容？ BootClassLoader类加载器的父加载器是谁？ BootClassLoader类加载器负责加载哪些内容？ BootClassLoader类加载器有父加载器吗？ BootClassLoader类加载器可以用Java代码获取到吗？ JDK11版本中，三个类加载器均继承了哪个类？ 为什么要使用双亲委派模型？请举例说明。 什么是双亲委派模型，JDK8版本和JDK11版本中的双亲委派模型有什么区别？ 自定义类加载器需要继承哪个类？ 如何打破双亲委派模型？ 一个类在什么情况下会被加载？ 如何保证一个类只能被加载一次？ 一个类在整个加载过程中会被分为哪三个步骤？ 一个类在加载时的Load过程是什么过程？ Load过程会执行字节码指令吗？ 什么是instanceKlass，存在哪里？存些什么？ Class实例和instanceKlass实例是什么关系？ 基本数据类型的Load过程和引用数据类型的Load过程一样吗？ 基本数据类型的Load过程和数组类型的Load过程一样吗？ 一个类在加载时的Link过程是什么过程？其内部又被分为哪三个步骤？ 编译使其的检查过程和运行时期的验证过程有什么区别？ Prepare过程主要是做些什么事？ Prepare过程中，对final修饰的属性有什么特殊处理？ Prepare过程主要是做些什么事？ 符号引用和直接引用有什么区别？ Init过程主要是做些什么事？ 如果一个类中既有静态属性，又有静态块，则如何决定执行顺序？ 一个类在初始化时，会先对其父类进行初始化，然后再对自己进行初始化吗？ 你觉得，实例化过程的本质是什么？ 实例化过程中会使用到instanceKlass中的数据吗？ 为实例的内存空间有哪两种方式？分别适用于什么场景？ JVM是如何解决实例化的过程中存在的并发问的？ 一个实例在内存中被分为哪三部分？分别存储什么内容？ 一个实例的对象头中被分为哪三部分？分别存储什么内容？ 一个实例中的对齐填充区是干什么用的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%8F%8D%E8%A7%A3%E6%9E%90%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%8F%8D%E8%A7%A3%E6%9E%90%E8%AF%A6%E8%A7%A3/</guid><description>字节码反解析 心法: 字节码反解析工具 javap.exe
javap.exe 是JDK自带的反解析工具，它的作用是根据class字节码文件反解析出当前类的code区指令: 包括常量池，本地变量表，异常表，行号表等信息。 javap.exe 命令格式: javap.exe &amp;lt;options&amp;gt; &amp;lt;classes&amp;gt;: &amp;lt;options&amp;gt;: 反解析的选项，可以使用 javap -help 来查看完整选项。 &amp;lt;classes&amp;gt;: class字节码文件。 附件-官方字节码指定文档 附件-字节码指令表 武技: 反解析字节码文件
开发源代码 ByteCode: 运行或编译： com.lsx.classfile.ByteCode
/** @author lsx */ public class ByteCode { public static void main(String[] args) { int a = 1; int b = 2; System.out.println(a + b); } } 使用CMD反解析字节码文件 ByteCode.class: # 进入 `ByteCode.class` 字节码文件所在目录 cd D:\idea\workspace\**\target\classes\com\lsx\classfile # 反解析字节码文件 javap -v -p ByteCode.class 使用JClassLib反解析字节码文件 ByteCode.class: 安装 jclasslib Bytecode Viewer 插件。 编译 ByteCode.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6%E8%A1%A8/</guid><description>类的常用助记符 心法: 类的常用助记符
助记符 标志值 含义 ACC_PUBLIC 0x0001 该类被public修饰 ACC_FINAL 0x0010 该类被final修饰 ACC_SUPER 0x0020 该类允许使用 invokespecial 指令 ACC_INTERFACE 0x0200 该类是一个接口 ACC_ABSTRACT 0x0400 该类被抽象的，包括接口和抽象类 ACC_SYNTHETIC 0x1000 该类由编译器自动生成，不是由源代码生成 ACC_ANNOTATION 0x2000 该类是一个注解类 ACC_ENUM 0x4000 该类是一个枚举类 方法的常用助记符 心法: 方法的常用助记符
助记符 标志值 含义 ACC_PUBLIC 0x0001 该方法被public修饰 ACC_PRIVATE 0x0002 该方法被private修饰 ACC_PROTECTED 0x0004 该方法被protected修饰 ACC_STATIC 0x0008 该方法被static修饰 ACC_FINAL 0x0010 该方法被final修饰 ACC_SYHCHRONRIZED 0x0020 该方法被synchronized修饰 ACC_BRIDGE 0x0040 该方法由编译器自动生成，是一个桥接方法 ACC_VARARGS 0x0080 该方法具有参数 ACC_NATIVE 0x0100 该方法被native修饰 ACC_ABSTRACT 0x0400 该方法被abstract修饰 ACC_STRICTFP 0x0800 该方法是否为strictfp ACC_SYNTHETIC 0x1000 该方法由编译器自动生成，不是由源代码生成 属性的常用助记符 心法: 属性的常用助记符</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E8%A1%A8/</guid><description>字节码 助记符 含义 0x00 nop 什么都不做。 0x01 aconst_null 将null推送至栈顶。 0x02 iconst_m1 将int型-1推送至栈顶。 0x03 iconst_0 将int型0推送至栈顶。 0x04 iconst_1 将int型1推送至栈顶。 0x05 iconst_2 将int型2推送至栈顶。 0x06 iconst_3 将int型3推送至栈顶。 0x07 iconst_ 4 将int型4推送至栈顶。 0x08 iconst_5 将int型5推送至栈顶。 0x09 lconst_0 将long型0推送至栈顶。 0x0a lconst_1 将long型1推送至栈顶。 0x0b fconst_0 将float型0推送至栈顶。 0x0c fconst_1 将float型1推送至栈顶 0x0d fconst_2 将float型2推送至栈顶。 0x0e dconst_0 将double型0推送至栈顶。 0x0f dconst_1 将double型1推送至栈顶。 0x10 bipush 将单字节的常量值(-128~127)推送至栈顶。 0x11 sipush 将一个短整型常量值(-32768~32767)推送至栈顶。 0x12 ldc 将int,float或string型常量值从常量池中推送至栈顶，对于String类型来说，此时先到StringPool中查找是否存在该字符串的引用，若不存在则会在堆中创建该字符串，并将其引用驻留在字符串池中。 0x13 ldc_w 将int,float或string型常量值从常量池中推送至栈顶(宽索引)，对于String类型来说，此时先到StringPool中查找是否存在该字符串的引用，若不存在则会在堆中创建该字符串，并将其引用驻留在字符串池中。。 0x14 1dc2_w 将long或double型常量值从常量池中推送至栈顶（宽索引），对于String类型来说，此时先到StringPool中查找是否存在该字符串的引用，若不存在则会在堆中创建该字符串，并将其引用驻留在字符串池中。。 0x15 iload 将指定的int型局部变量推送至栈顶。 0x16 lload 将指定的long型局部变量推送至栈顶。 0x17 fload 将指定的float型局部变量推送至栈顶。 0x18 dload 将指定的double型局部变量推送至栈顶。 0x19 aload 将指定的引用类型局部变量推送至栈顶。 0x1a iload_0 将第一个int型局部变量推送至栈顶。 0x1b iload_1 将第二个int型局部变量推送至栈顶。 0x1c iload_2 将第三个int型局部变量推送至栈顶。 0x1d iload_3 将第四个int型局部变量推送至栈顶。 0x1e lload_0 将第一个long型局部变量推送至栈顶。 0x1f lload_1 将第二个long型局部变量推送至栈顶。 0x20 lload_2 将第三个long型局部变量推送至栈顶。 0x21 lload_3 将第四个long型局部变量推送至栈顶。 0x22 fload_0 将第一个float型局部变量推送至栈顶。 0x23 fload_1 将第二个float型局部变量推送至栈顶。 0x24 fload_2 将第三个float型局部变量推送至栈顶 0x25 fload_3 将第四个float 型局部变量推送至栈顶。 0x26 dload_0 将第一个double型局部变量推送至栈顶。 0x27 dload_1 将第二个double型局部变量推送至栈顶。 0x28 dload_2 将第三个double型局部变量推送至栈顶。 0x29 dload_3 将第四个double型局部变量推送至栈顶。 0x2a aload_0 将第一个引用类型局部变量推送至栈顶。 0x2b aload_1 将第二个引用类型局部变量推送至栈顶。 0x2c aload_2 将第三个引用类型局部变量推送至栈顶。 0x2d aload_3 将第四个引用类型局部变量推送至栈顶。 0x2e iaload 将int型数组指定索引的值推送至栈顶。 0x2f laload 将long型数组指定索引的值推送至栈顶。 0x30 faload 将float型数组指定索引的值推送至栈顶。 0x31 daload 将double型数组指定索引的值推送至栈顶。 0x32 aaload 将引用型数组指定索引的值推送至栈顶。 0x33 baload 将boolean或byte型数组指定索引的值推送至栈顶。 0x34 caload 将char型数组指定索引的值推送至栈顶。 0x35 saload 将short型数组指定索引的值推送至栈顶。 0x36 istore 将栈顶int型数值存入指定局部变量。 0x37 lstore 将栈项long型数值存入指定局部变量。 0x38 fstore 将栈顶float型数值存入指定局部变量。 0x39 dstore 将栈项double型数值存入指定局部变量。 0x3a astore 将栈顶引用型数值存入指定局部变量。 0x3b istore_0 将栈顶int型数值存入第一个局部变量。 0x3c istore_1 将栈顶int型数值存入第二个局部变量。 0x3d istore_2 将栈顶int型数值存入第三个局部变量。 0x3e istore_3 将栈项int型数值存入第四个局部变量。 0x3f lstore_0 将栈项long型数值存入第一个局部变量。 0x40 lstore_1 将栈顶long型数值存入第二个局部变量。 0x41 lstore_2 将栈顶long型数值存入第三个局部变量。 0x42 lstore_3 将栈顶long型数值存入第四个局部变量。 0x43 fstore_0 将栈顶float型数值存入第一个局部变量。 0x44 fstore_1 将栈顶float型数值存入第二个局部变量。 0x45 fstore_2 将栈顶float型数值存入第三个局部变量。 0x46 fstore_3 将栈顶float型数值存入第四个局部变量。 0x47 dstore_0 将栈顶double型数值存入第一个局部变量。 0x48 dstore_1 将栈顶double型数值存入第二个局部变量。 0x49 dstore_2 将栈顶double型数值存入第三个局部变量。 0x4a dstore_3 将栈顶double型数值存入第四个局部变量。 0x4b astore_0 将栈顶引用型数值存入第一个局部变量。 0x4c astore_1 将栈项引用型数值存入第二个局部变量。 0x4d astore_2 将栈顶引用型数值存入第三个局部变量 0x4e astore_3 将栈项引用型数值存入第四个局部变量。 0x4f iastore 将栈项int型数值存入指定数组的指定索引位置 0x50 lastore 将栈顶long型数值存入指定数组的指定索引位置。 0x51 fastore 将栈项float型数值存入指定数组的指定索引位置。 0x52 dastore 将栈顶double型数值存入指定数组的指定索引位置。 0x53 aastore 将栈顶引用型数值存入指定数组的指定索引位置。 0x54 bastore 将栈顶boolean或byte型数值存入指定数组的指定索引位置。 0x55 castore 将栈顶char型数值存入指定数组的指定索引位置 0x56 sastore 将栈顶short型数值存入指定数组的指定索引位置。 0x57 pop 将栈项数值弹出( 数值不能是long或double类型的)。 0x58 pop2 将栈项的一个(long或double类型的)或两个数值弹出(其它)。 0x59 dup 复制栈顶数值并将复制值压入栈顶 0x5a dup_x1 复制栈顶数值并将两个复制数值压入栈顶。 0x5b dup_x2 复制栈顶数值并将三个（或两个）复制数值压入栈顶。 0x5c dup2 复制栈顶一个（long或double类型的）或两个（其他）数值并将其复制压入栈顶 0x5d dup2_x1 dup_x1指令的双倍版本。 0x5e dup2_x2 dup_x2指令的双倍版本。 0x5f swap 将栈最顶端的两个数值互换（数值不能是long或double类型的）。 0x60 iadd 将栈顶两int型数值相加并将结果压入栈顶。 0x61 ladd 将栈顶两long型数值相加并将结果压入栈顶。 0x62 fadd 将栈顶两float型数值相加并将结果压入栈顶。 0x63 dadd 将栈顶两double型数值相加并将结果压入栈顶。 0x64 isub 将栈顶两int型数值相减并将结果压入栈顶。 0x65 lsub 将栈顶两long型数值相减并将结果压入栈顶。 0x66 fsub 将栈顶两float型数值相减并将结果压入栈顶。 0x67 dsub 将栈顶两double型数值相减并将结果压入栈顶。 0x68 imul 将栈顶两int型数值相乘并将结果压入栈顶.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VisualGC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VisualGC/</guid><description>res: VisualGC插件</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ArrayBlockingQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ArrayBlockingQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements ArrayBlockingQueue ^D34fOHsu
获取可重入锁 ^h20THk0r
E ^sMYGxJE3
E ^dzTjrjdP
E ^VUI5Z60Z
入队 ^enuxeCLZ
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
获取可重入锁 ^IrV6RtZX
队列已满时阻塞等待 ^iDmLmpOM
E ^MQPZumf1
E ^SwzznZ2j
E ^ZG0NsZnA
队列为空时阻塞等待 ^5ODiO4kX
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1075668358, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;Y4MeJO0jTIt-6S5Hme7Wu&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;T9Lfgq-8bByOD1_Mn9UrU&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713682136578, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 162, &amp;#34;versionNonce&amp;#34;: 1727667674, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CAS%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CAS%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程A ^2qTJDx9k
共享资源 volatile num = 3 ^LvbRpQEP
比较 Compare ^yzb5BkqC
交换 swap ^ZWYzfBIW
主存 ^dEG3fZZ8
获取 资源 ^VrwxvZA2
预期值：3 真实值：3 ^ggNwXGm5
CAS过程是原子的 ^fsat6yoQ
修改 num = 4 ^fQRDsSFT
线程B ^v2pwYf9f
比较 Compare ^chZKXhtb
交换 swap ^axbOkDyM
预期值：3 真实值：4 ^WuZu0rPr
获取 资源 ^aOr4xG4z
共享资源 volatile num = 4 ^KtdgYddT
重新 获取 资源 ^6tLThhKr
%%</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CompletableFuture%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CompletableFuture%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements void taskF() ^a2QnPHwB
耗3秒 ^UakMCz6o
准备6个任务方法 ^B9Oy7sBx
String taskB() ^eRDio6D4
String taskC() ^C9poGHbt
void taskE() ^HrEECLdn
void taskD() ^8TeeVJ5C
耗2秒 ^ATcyKYuR
耗3秒 ^WyGiwdx9
耗1秒 ^ZpNHKSjb
耗2秒 ^LuOKHA0W
耗1秒 ^vNRO3u40
String taskA() ^N8KB0MeI
每个调用均返回一个 Future 实例
ComplateableFuture.runAsync(this::taskD) ComplateableFuture.runAsync(this::taskE) ComplateableFuture.runAsync(this::taskF) ^3gsfrD17
异步调用3个无返回值的任务方法 ^z6g17Eqm
CompletableFuture.allOf(fA, fB, fC, fD, fE, fF) ^nfoGUGQi
每个调用均返回一个 Future 实例
ComplateableFuture.supplyAsync(this::taskA) ComplateableFuture.supplyAsync(this::taskB) ComplateableFuture.supplyAsync(this::taskC) ^wJlCGwQz</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ConcurrentLinkedQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ConcurrentLinkedQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements ConcurrentLinkedQueue ^D34fOHsu
CAS出队，保证安全 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
Node(E) ^VUI5Z60Z
入队 ^enuxeCLZ
add(E) ^a2QnPHwB
出队 ^Su0qNSQf
poll() ^nh2vkAQd
创建新节点Node(E) ^UakMCz6o
CAS入队，保证安全 ^IrV6RtZX
队列为空时直接返回null ^iDmLmpOM
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 386, &amp;#34;versionNonce&amp;#34;: 1422769030, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;O8IrQr8wIGjGha06Bs8i3&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;T9Lfgq-8bByOD1_Mn9UrU&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713594261499, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 155, &amp;#34;versionNonce&amp;#34;: 1956784090, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -382.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Condition%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Condition%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements Condition队列A ^OHmoAQUx
线程01 ^w0WhlixR
线程02 ^5HWEnlMz
A.signal() A.signalAll() ^tKZeca0k
其他线程 ^ChAQgoxc
B.await() ^CncGKOQK
线程04 ^kyMozPMv
线程03 ^DjkRZvO3
B.signal() B.signalAll() ^cfZJmfDA
B.await() ^c8l7Jp8g
Condition队列B ^JIbADBSl
其他线程 ^a99406fK
A.await() ^QWKBDMwS
B.await() ^iZ7Lp5rx
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34;, &amp;#34;version&amp;#34;: 1095, &amp;#34;versionNonce&amp;#34;: 1030719810, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;sb4foQMxOMu0P48fDgVJL&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -299, &amp;#34;y&amp;#34;: -59.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CyclicBarrier%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CyclicBarrier%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程98 ^WjWjU1tG
await() ^Y981JvbI
await() ^p93xAK3F
线程11 ^VIFWaBL4
线程12 ^fJD7blw9
线程13 ^i2VSGpvv
await() ^G9Q7xxLc
线程97 ^eBo40W9K
await() ^NqNp3XCP
CyclicBarrier(3) ^D34fOHsu
await() ^rLhjcRs0
资源 ^ZNePuoyq
await() ^0IfcwhyW
线程01 ^h20THk0r
线程02 ^tbEhULnG
线程03 ^SGofBPu4
await() ^arQbAsxW
await() ^hd6qiskj
第二批 放行3个 ^pbeacwk5
第一批 放行3个 ^WXdtVTdz
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34;, &amp;#34;version&amp;#34;: 2043, &amp;#34;versionNonce&amp;#34;: 131723806, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Ojkartur46M6hP-m-mooL&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -299.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/DelayQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/DelayQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements DelayQueue ^D34fOHsu
队列为空时阻塞等待 ^h20THk0r
队列内部会根据延迟时间戳进行排序 ^sMYGxJE3
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
获取可重入锁 ^UakMCz6o
仅支持存储 Delayed 接口的实现类，且存储时需要设置延迟时间戳 ^DKPqvImy
获取可重入锁 ^6ytEMycW
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1683243590, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;kp1RAGMf12-mkfS7UPn1f&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713598072465, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 164, &amp;#34;versionNonce&amp;#34;: 1807510810, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Exchanger%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Exchanger%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements exchanger(&amp;quot; 面包 &amp;ldquo;) ^arQbAsxW
线程 01 ^tQGWiKih
线程02 ^lcsWFdSD
Exchanger ^xyZ8XNI4
攒够两个 exchange() ^HQ8dprlh
返回 &amp;ldquo;10元&amp;rdquo; ^tFX7sylE
开始交换数据 ^gxa56jBo
exchanger(&amp;rdquo; 10元 &amp;ldquo;) ^8FcDDgOc
返回 &amp;ldquo;面包&amp;rdquo; ^wz9W3GFJ
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 425, &amp;#34;versionNonce&amp;#34;: 155367042, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Yfkml9ZdwA5p-Sb-5qbWi&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -300, &amp;#34;y&amp;#34;: -1000, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 40, &amp;#34;height&amp;#34;: 200, &amp;#34;seed&amp;#34;: 511417502, &amp;#34;groupIds&amp;#34;: [ &amp;#34;u2FVUxwbm4BN3dY0ZAGIC&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;tQGWiKih&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;caFnoNqGLlLo8x1igf87B&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;48OZMXUoCiWf_oPaohaQo&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713082677314, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 181, &amp;#34;versionNonce&amp;#34;: 709585566, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;tQGWiKih&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -290, &amp;#34;y&amp;#34;: -937.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingDeque%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingDeque%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements LinkedBlockingDeque ^D34fOHsu
队列为空时阻塞等待 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
Node(E) ^VUI5Z60Z
takeFirst(E) ^a2QnPHwB
出队 ^Su0qNSQf
takeLast() ^nh2vkAQd
获取可重入锁 ^UakMCz6o
创建新节点Node(E) ^DKPqvImy
获取可重入锁 ^6ytEMycW
出队 ^l2NbJYO2
addFirst(E) ^AnYpLIqI
入队 ^XXQcsjnZ
addLast() ^o1nICsC5
入队 ^pWdaHism
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 403, &amp;#34;versionNonce&amp;#34;: 7748506, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;DTr2poJZ37xwOwO4FxZJo&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -840, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 120, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1516086662, &amp;#34;groupIds&amp;#34;: [ &amp;#34;u7atYc3fmidYuMjuNON3N&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;-2g6OGlk7hYQtEUAXC1Sx&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;AnYpLIqI&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713595236029, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 187, &amp;#34;versionNonce&amp;#34;: 365978374, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;AnYpLIqI&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -384.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements LinkedBlockingQueue ^D34fOHsu
队列为空时阻塞等待 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
Node(E) ^VUI5Z60Z
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
获取 putLock 锁 ^UakMCz6o
创建新节点Node(E) ^DKPqvImy
获取 takeLock 锁 ^6ytEMycW
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 388, &amp;#34;versionNonce&amp;#34;: 112834586, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;vP_ERt4u8krVa0dBq24Vs&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713594173825, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 162, &amp;#34;versionNonce&amp;#34;: 619769478, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedTransferQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedTransferQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements LinkedTransferQueue ^D34fOHsu
若队列不为空 直接获取队列头 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
null ^VUI5Z60Z
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
若队列中存在null节点 则直接将数据填充到该节点中 并 notify() 该节点上的线程 ^UakMCz6o
若队列中不存在null节点 则创建新节点Node(E) ^DKPqvImy
若队列为空 在队列中留一个null节点 并使当前线程在该节点上 wait() ^6ytEMycW
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1217081670, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;wduy2qz9TjLdjjih4Wl81&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713597181290, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 164, &amp;#34;versionNonce&amp;#34;: 1039134234, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LockSupport%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LockSupport%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements unpark(线程01) ^QWKBDMwS
线程99 ^Xc2Af7jL
等待队列 ^o3ermnMd
线程01 ^GytHnaMR
线程02 ^SPn2RM5B
线程03 ^bhN6YeJh
线程99 ^n8Gr2kqr
其他线程 ^BdecUV7R
park() ^6dFzZh3z
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 339, &amp;#34;versionNonce&amp;#34;: 833884994, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;pUlmvZBzMHw0CjZaYNjYb&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;dotted&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -600, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 35, &amp;#34;seed&amp;#34;: 1467050306, &amp;#34;groupIds&amp;#34;: [ &amp;#34;fhswVm-AuLC_tz-hR18wl&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;Xc2Af7jL&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;Zm6inINLWYuI81dXY2jjc&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713079483472, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 139, &amp;#34;versionNonce&amp;#34;: 29047262, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Xc2Af7jL&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -382.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Phaser%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Phaser%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程04 ^h20THk0r
线程05 ^tbEhULnG
线程06 ^SGofBPu4
onAdvance(0,6) ^Zb9q2oU4
onAdvance(1,4) ^qGKBcmhc
onAdvance(2,2) ^kfGEuDS3
线程01 ^vRrpNeXl
线程02 ^HG0G6cbF
线程03 ^MRrEqcwD
阶段 1 ^nQra9M1O
淘汰 2 ^HEKAR52s
阶段 0 ^xOWRf3Re
淘汰 2 ^dWN8Sk7P
阶段 2 ^ZG1Xslm3
淘汰 2 ^kXikYR0f
bulkRegister(6) ^0NwC5jMh
Phaser ^OatgPqAk
arriveAndAwaitAdvance() ^otRnaNgu
存活 6 ^wL74GZ4L
存活 4 ^2SDGKOed
存活 2 ^63rZCSIT
全部线程 均被淘汰 ^YUzfTIRA</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Semaphore%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Semaphore%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements Semaphore(2) ^OHmoAQUx
信号 ^yJOL2WmJ
信号 ^Iye16DQ4
线程A ^w0WhlixR
线程B ^5HWEnlMz
线程C ^fUb3jR4e
阻塞等待 ^NiLiiOvk
acquire() 成功 ^tKZeca0k
资源 ^ChAQgoxc
线程A携带 信号访问 ^yAJsMghJ
线程C携带 信号访问 ^BdEGC9Pl
线程A结束 release() ^2W9JWVsh
acquire() 成功 ^i5RlSNyp
acquire() 失败 ^CncGKOQK
acquire() 成功 ^7Zj0RbPr
线程B携带 信号访问 ^0Vc1kzi5
线程C等待中 ^dvTCWF2O
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34;, &amp;#34;version&amp;#34;: 594, &amp;#34;versionNonce&amp;#34;: 313298178, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;sLJcxu3RmGhCVS_IECqBn&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -300, &amp;#34;y&amp;#34;: -60, &amp;#34;strokeColor&amp;#34;: &amp;#34;#e03131&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffc9c9&amp;#34;, &amp;#34;width&amp;#34;: 200, &amp;#34;height&amp;#34;: 0, &amp;#34;seed&amp;#34;: 515843458, &amp;#34;groupIds&amp;#34;: [ &amp;#34;NAK_mEoTBp2YpUiggVe-m&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: { &amp;#34;type&amp;#34;: 2 }, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;CncGKOQK&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713077408450, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false, &amp;#34;startBinding&amp;#34;: { &amp;#34;elementId&amp;#34;: &amp;#34;ZmKaUmd0KaeAYvoFVkgCJ&amp;#34;, &amp;#34;focus&amp;#34;: -0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/SynchronousQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/SynchronousQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements SynchronousQueue ^D34fOHsu
仅当有人想要获取数据的时候 才会执行入队操作 ^sMYGxJE3
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
有人获取数据时入队 ^UakMCz6o
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1282263322, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;X_gBblqp8dhdG6JOFKu8R&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713596372312, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 164, &amp;#34;versionNonce&amp;#34;: 1359113606, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ThreadLocal%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ThreadLocal%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements ThreadLocal.ThreadLocalMap
假设内存地址为 [0x99] ^sJlAYJH8
Entry ^61mS3QQk
0x100 ^Bi6FKzoO
key ^HCWszNU2
value ^Z9hW4R4y
&amp;ldquo;hello&amp;rdquo; ^aHNeHRnt
tl.set(&amp;ldquo;hello&amp;rdquo;) ^vunxpe2k
tl.get() ^kTOHfOGL
线程A ^vchDU4RM
ThreadLocal tl = new ThreadLocal();
假设内存地址为 [0x100] ^udoMXBCT
ThreadLocal.ThreadLocalMap
假设内存地址为 [0x33] ^GowV4Uvv
Entry ^YIyd937r
0x100 ^JrU54kEW
key ^qIwVMhkO
value ^eTysRJtU
&amp;ldquo;world&amp;rdquo; ^MkIPGhL7
tl.set(&amp;ldquo;hello&amp;rdquo;) ^oc9xpbMI
tl.get() ^FcBBisVR
线程B ^N2T47CFv
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E5%88%86%E6%AE%B5%E9%94%81%E5%8E%9F%E5%AD%90%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E5%88%86%E6%AE%B5%E9%94%81%E5%8E%9F%E5%AD%90%E7%B1%BB/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程A ^7JJ7ZOaT
线程B ^FZmJWdXa
线程C ^BNRsHARp
compare ^LWLqec4W
num+=3 ^Si60yojC
LongAdder类 ^AmU4F3k2
Base区 ^OeYDIsWk
线程A在base区 执行 num+=3 ^XnsS0kTT
第1段结果 ^j21ZRIUn
3 ^OIm3FcYc
cell[0] ^Tr8u4xyk
cell[1] ^Nr3UmDTU
线程B 对本cell中的long变量 执行 num++ ^GFa1IdfQ
线程C 对本cell中的long变量 执行 num&amp;ndash; ^3dp2rwQz
第2段结果 ^TRe3azcx
1 ^z1d5TSnd
第3段结果 ^dfQhEvHq
-1 ^iMfKseQ6
最终汇总结果 ^0VthUiIX
3 ^XrVmbSic
分段 汇总 ^2staYJcC
num++ ^ySfXlIR2
num&amp;ndash; ^Foivu7Jt</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 用于存放任务的 Queue队列 ^B9Oy7sBx
用于存放线程的 HashSet集合 ^N8KB0MeI
ThreadPoolExecutor线程池 ^q8dwWW4C
ThreadPoolExecutor线程池 ^ocid2FUT
用于存放任务的 Queue队列 ^Xbtfhlxl
用于存放线程的 HashSet集合 ^wdqSlUO4
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 876, &amp;#34;versionNonce&amp;#34;: 1298515782, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;JaPXObNds2_ZV6PwQYlvM&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -200, &amp;#34;y&amp;#34;: -1200, &amp;#34;strokeColor&amp;#34;: &amp;#34;#2f9e44&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#b2f2bb&amp;#34;, &amp;#34;width&amp;#34;: 400, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 603310406, &amp;#34;groupIds&amp;#34;: [ &amp;#34;1SqlelWt2gR9l-26Gx5C-&amp;#34;, &amp;#34;LpDJ1POtts2qko5-m5Cch&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;ocid2FUT&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713608886935, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 116, &amp;#34;versionNonce&amp;#34;: 2050078746, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;ocid2FUT&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 1, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -103.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements start() ^TGdM5GsN
线程被选中 join() ^rLovs06r
线程被挂起 yeild() ^JGLPabM5
同步资源 已被上锁 ^kBKoZGja
notify()，nofityAll() unpark()，interrupt() ^0U7nf4ds
超时 interrupt() ^OxoOvoHI
Running 运行态 ^OAmTugj1
Ready 就绪态 ^8cW8Dwk7
New
初始态 ^DIv6HKr4
Block
阻塞态 ^dmycxkvy
Time_Waiting
计时等待态 ^Cpi0wsM3
Waiting
等待态 ^L4oYPRPg
同步资源 已被解锁 ^Tbujkkju
wait() join() park() ^mcGmB1Kf
sleep(t)，wait(t) join(t)，parkNanos(t), parkUntil(t) ^KNsZcQtJ
Terminated
终止态 ^XCMowt1F
线程任务结束 线程任务异常 ^FkDy38zs
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 运算器 ^L1ROTTTd
控制器 ^yJeN0kfB
寄存器 ^P7bYzL36
缓存L1 ^oQ8B6hDn
缓存L2 ^LJHXZPdf
CPU核心-01 ^yxneW5vq
缓存L3 ^5eWoTrex
CPU核心-02 ^Ho9lDtzZ
运算器 ^5MQxGl5U
控制器 ^HEdfd7NP
寄存器 ^tEjqKDsS
缓存L1 ^6z2F9yqg
缓存L2 ^zDnYCtCC
内存 ^x3Q9m3wo
IO-Bridge ^QsakQpyc
系统 总线 ^9ZNUh10o
访问 ^xlTxiZNA
其他设备
如USB/显卡/磁盘/网卡驱动等 ^fnnhO6kf
IO总线 ^Uyz7F5ru
内存总线 ^r72OwT6m
高速缓存行 ^H2M9G2oe
高速缓存行 ^oqVmqtGU
高速缓存行 ^Vt7UviNu
CPU ^gaRDG4Fl
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 进程A - 独享数据空间 ^PKGuwj75
进程B - 独享数据空间 ^8Nqbmden
线程A ^mvSYkr94
线程B ^aIzTooU2
切换 开销 小 ^IVOyiGJP
争抢CPU资源，完成线程切换 ^Wkme7FgO
线程C ^QlAGCMSk
线程D ^S0PfMJb5
切换 开销 小 ^dsbUNB0s
争抢CPU资源，完成线程切换 ^oBI5r4ov
切换 开销 大 ^flY4NEqL
OS系统 ^U29PU3Bd
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 568, &amp;#34;versionNonce&amp;#34;: 393019210, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;1KF5Ai7pvAYL6ECz9wVTz&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 1, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -260, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 900, &amp;#34;height&amp;#34;: 260, &amp;#34;seed&amp;#34;: 1684561271, &amp;#34;groupIds&amp;#34;: [ &amp;#34;BQsAisIiJ3gSXWm9Mj5ig&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [], &amp;#34;updated&amp;#34;: 1711617651321, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 546, &amp;#34;versionNonce&amp;#34;: 559739478, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;zXu_JDoRkH2yg29HGR0lr&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 1, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -300, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 900, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1327361689, &amp;#34;groupIds&amp;#34;: [ &amp;#34;BQsAisIiJ3gSXWm9Mj5ig&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;U29PU3Bd&amp;#34; } ], &amp;#34;updated&amp;#34;: 1711617651321, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 58, &amp;#34;versionNonce&amp;#34;: 1692567050, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;U29PU3Bd&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: 16.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid><description>ReentrantLock锁原理 lock()源码 ctrl + alt + b: 列出全部该方法的实现类。
心法： 以非公平锁为例：
lock() 底层流程：
调用 Sync 类（AQS子类）的 lock()。 调用 NonfairSync 类（Sync子类）的 lock()。 通过CAS将 state 的值由 0 改为 1。 若成功，调用 exclusiveOwnerThread() 将当前线程记录在 AbstractOwnableSynchronizer 类中的 exclusiveOwnerThread 变量中，表示当前线程独占这把锁。 若失败：调用 acquire(1)。 acquire(1) 底层流程：
调用 tryAcquire() 尝试获取锁，若成功直接获取锁。 若失败： 调用 addWaiter() 将当前线程加入等待队列。 调用 acquireQueued() 在队列中不断轮询申请获取锁。 若加入等待队列也失败，直接调用 selfInterrupt() 打断当前线程。 tryAcquire() 底层流程：
调用 NonfairSync 类中的 tryAcquire()。 调用 ReentrantLock 类中的 nonfairTryAcquire()。 若当前 state 值为 0： 通过CAS将 state 的值由 0 改为 1。 令当前线程独占这把锁。 返回true。 若当前线程已经独占了这把锁： state 自增1，表示重入一次。 返回true。 若条件均不满足，返回false。 addWaiter() 底层流程：</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/qa/JB1-7-%E5%A4%9A%E7%BA%BF%E7%A8%8B-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/qa/JB1-7-%E5%A4%9A%E7%BA%BF%E7%A8%8B-QA/</guid><description>多线程基础入门 进程和线程的区别是什么？ 多线程模型的优势是什么？缺点是什么？ 多线程之间是如何切换的？ 开辟新的线程有哪几种方式？ 继承了Thread的线程类和实现了Runnable的线程类有什么区别？ 线程类中重写的run()是做什么用的？ 如何启动一个线程？ 对一个线程调用start()能够让线程立刻执行吗？ 对一个线程调用t.start()和调用t.run()的区别是什么？ 如何阻止Junit方法运行结束？ 什么是守护线程？JVM中的GC线程是守护线程吗？ 如何设置一个线程为守护线程？守护线程的设置代码必须写在启动之前吗？ 在守护线程中产生的新线程也是守护线程吗？ 一个线程的生命周期分为哪几种状态？ 一个线程是否有可能同时处于两种生命周期状态？ 一个线程如何从NEW状态进入到RUNNABLE状态？ 一个线程的RUNNABLE状态又细分为哪两种状态？分别什么意思？ 一个线程如何进入BLOCK状态？如何解除？ 一个线程如何进入WAITING状态？如何解除？ 一个线程如何进入TIME_WAITING状态？如何解除？ 一个线程如何进入TERMINATED状态？ 一个挂起的线程解除了挂起状态之后会回归到哪种状态？ Thread类中的哪个方法用于获取当前线程实例？ 如何停止一个正在运行的线程？如何停止一个正在挂起的线程？ 让线程睡眠会阻止线程向下继续运行吗？ 线程睡眠的代码，是让代码所在的线程睡眠吗？ 线程插队的代码，是让代码所在的线程被插队吗？ 线程让步到底让出的是什么？ 线程插队的代码写在start()之前吗？ 多线程内存模型 一颗CPU中可以存在几个核心？ 一个CPU核心由哪三部分组成？ 一颗CPU核心中的运算器，控制器和寄存器分别是做什么用的？ 每个CPU核心都独享L1，L2和L3缓存吗？ 每个CPU核心都能至少独立运行几个线程？ 全部CPU共享同一个主存吗？ 多线程能从主存中获取数据吗？ 多线程能在主存上直接操作数据？ CPU读取数据的顺序是什么？ JMM的8种原子性操作分别是什么？ volatile是否可以保证线程可见性？请举例说明。 volatile是否可以保证线程有序性？请举例说明。 volatile是否可以保证线程安全性？请举例说明。 volatile修饰引用数据类型时，能对引用数据类型的内部的变化立即可见吗？ 当某线程修改了volatile变量之后，会发生什么？ 线程如何读取volatile变量？ 什么是指令重排序？添加volatile关键字后，能阻止指令重排序吗？如何阻止？ 什么是高速缓存行？一个高速缓存行有多少个字节？ 如何利用高速缓存行提高程序运行效率？ 多线程同步代码 如何理解同步和异步？各自的优缺点是什么？ 何为线程不安全？ 多线程是只有在争抢同一共享资源的时候才存在安全隐患吗？ 你对线程安全的建议有哪些？ synchronized底层使用的是公平锁吗？ synchronized可以保证可见性吗？ synchronized可以保证有序性吗？ synchronized可以保证安全性吗？ synchronized获取锁和释放锁的底层流程是什么？ 可以使用this作为同步锁实例吗？ 可以使用一个字符串变量或一个Integer变量作为锁实例吗？ 若运行过程中，锁实例发生了改变，同步效果会立即消失吗？ 多个线程必须申请同一把锁时才会发生同步现象吗？ 对非静态方法直接添加synchronized修饰，默认添加什么锁？ 对静态方法直接添加synchronized修饰，默认添加什么锁？ synchronized锁可重入吗？ synchronized锁通过什么来记录重入次数？ 隔离区中的代码若爆发异常会不会自动释放锁？ 什么叫死锁？怎么避免死锁？ synchronized锁升级流程是怎样的？ synchronized为何要使用锁升级的方案？ 锁实例在什么地方记录锁的信息？ 什么是偏向锁？偏向的是什么？ 若偏向锁被少量的线程争抢，会升级成什么锁？ 若偏向锁被很多的线程争抢，会升级成什么锁？ 可以对所有的实例都添加偏向锁吗？ 匿名偏向锁和偏向锁有什么区别？ 对标没有任何锁信息的实例添加sync标记之后，锁升级成什么？ 对标记了匿名偏向锁的实例添加sync标记之后，锁升级成什么？ 轻量级锁在锁实例的MarkWord中记录的是线程ID吗？ 自旋消耗CPU资源吗？ 自旋锁不适用于什么样的情况？ 轻量级锁在什么情况下会升级为重量级锁？ 什么是自适应自旋？ 轻量级锁和重量级锁的区别是什么？ 重量级锁消耗CPU资源吗？ CAS自旋全名是什么？ CAS的compare过程是加锁的吗？ CAS的swap过程是加锁的吗？ 什么是CAS中的ABA问题？如何解决该问题？ 如果共享资源是一个基础数据类型变量，那么ABA问题有什么影响？ 如果共享资源是一个引用数据类型变量，那么ABA问题有什么影响？ 如何解决ABA问题？ i++是一个原子操作吗？ 原子类能保证线程安全是因为底层使用了sync锁吗？ AtomicLong和LongAdder的区别是什么？ LongAdder的底层原理是什么？能解决什么问题？ 引用型属性原子类的属性是必须被volatile修饰，且不能被private/static/final修饰吗？ ThreadLocal的特点是什么？能否保证线程安全？ ThreadLocal底层是什么结构？存储的值的key是什么？ 什么叫内存泄露？什么叫内存溢出？ ThreadLocal在用完之后要不要手动调用remove()？ CAS比较与交换 AQS的核心是什么？ ReentrantLock和synchronized的相同点和不同点？ ReentrantLock使用AQS中的state变量做什么事情？ ReentrantReadWriteLock的特点是什么？ CountDownLatch使用AQS中的state变量做什么事情？ CountDownLatch的倒数过程，关心的是线程数还是门闩数？ Semaphore使用AQS中的state变量做什么事情？ Semaphore中的acquire()获取失败时，会阻塞当前线程吗？ 多线程通信方式 什么是生产消费者模型？ wait()和notify()方法来自于哪个类？ notify()是指定线程唤醒还是随机线程唤醒？ wait()和sleep()的区别是什么？ 如何手动停止一个运行状态的线程？ 如何手动停止一个挂起状态的线程？ Condition中的await()和Object中的wait()有什么区别？ Condition中的signal()和Object中的notify()有什么区别？ LockSupport的特点是什么？ unpack()如果在pack()之前被调用会如何？ CyclicBarrier的特点是什么？ CyclicBarrier的倒数过程，关心的是线程数还是门闩数？ CyclicBarrier中的await()过程，会阻塞当前线程吗？ Exchanger的特点是什么？ Exchanger的exchange()过程或阻塞当前线程吗？ 多线程同步容器 ArrayList、HashSet和HashMap如何转成同步的容器？ Vector和ArrayList的区别？ CopyOnWriteArrayList的特点是什么？适用于什么场景？ HashTable和HashMap的区别？ ConcurrentHashMap的底层原理是什么？ ConcurrentHashMap底层存储数据时加锁吗？ ConcurrentHashMap底层哈希冲突时如何解决？ ConcurrentHashMap底层链表的添加操作加锁吗？ ConcurrentHashMap底层的链表何时会变成红黑树？ ConcurrentSkipListMap底层使用的是什么数据结构？ ConcurrentHashMap1.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/ConcurrentHashMap%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/ConcurrentHashMap%E6%BA%90%E7%A0%81/</guid><description>S01. 构造器源码 心法: ConcurrentHashMap构造器源码
校验加载因子，初始容量，预估的修改线程并发数（为了兼容JDK1.7版本）等参数，不合法就抛出异常: 加载因子默认0.75F，初始容量默认16，预估的修改线程并发数默认为1。 若数组初始容量小于预估的修改线程并发数，则重新赋值数组初始容量为预估的修改线程并发数。 计算数组最终容量，若大于最大容量则重新赋值为最大容量，否则向上取到最近的2的幂次方值。 将数组大小赋值给 sizeCtl 状态变量，该变量用于数组初始化和扩容。 /** ConcurrentHashMap构造器源码 */ public class ConcurrentHashMap { /** * 该变量用于数组初始化和扩容 * sizeCtl = -1: 表示数组正在初始化。 * sizeCtl = -(1 + N个线程数): 表示有N个线程正在一起扩容这个数组。 * sizeCtl = 0: 表示还没有被初始化，默认值。 * sizeCtl &amp;gt; 0: 表示下次扩容的阈值。 */ private transient volatile int sizeCtl; /** 数组最大容量 */ private static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; /** 加载因子 * * 加载因子是用来确认table数组是否需要动态扩展，默认值0.75 * 比如table数组大小为16，装载因子为0.75时，threshold就是12 * 即当table的实际大小超过12时，table就需要动态扩容。 */ private static final float LOAD_FACTOR = 0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%81%8F%E5%90%91%E9%94%81%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%81%8F%E5%90%91%E9%94%81%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B/</guid><description>锁升级流程 新建obj实例 启用偏向锁（默认） 标记匿名偏向锁 禁用偏向锁 标记无锁 一个线程来袭 升级为偏向锁 此时obj偏向该线程，但该线程不生成LR 该线程离开后也不会删除obj中的偏向锁信息 一个线程来袭 该线程是当前锁实例 偏向的线程
直接放行，未发生竞争 该线程不是当前锁实例 偏向的线程
撤销偏向锁 此过程比较消耗性能 将obj升级为轻锁 两个线程各自在自己的线程栈中生成LockRecord 两个线程开始争抢资源 假设线程B 争抢到了资源 线程B 备份MarkWord到自己的LockRecord 重写MarkWord为自己的 &amp;ldquo;LR地址 + 00&amp;rdquo; 进入隔离区开始执行任务 离开时还原MarkWord信息 线程A 在用户内存空间里CAS自旋等待 次数过多或线程数过多时升级为重锁 若隔离区代码发生了严重耗时的情况 直接升级为重锁</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%B0%8F%E8%AF%B4-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BD%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%B0%8F%E8%AF%B4-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BD%AC/</guid><description>第一回 初生牛犊 我是一个线程，我一出生就被编了个号：0x3704，然后被领到一个昏暗的屋子里，在这里我发现了很多和我一模一样的同伴。
我身边的同伴0x6900呆的时间比较长，他带着沧桑的口气对我说：“我们线程的宿命就是处理包裹，把包裹处理完以后还得马上回到这里，否则可能永远也回不来了。”
我一脸懵逼：“包裹？什么包裹？”
“不要着急，马上你就会明白的，我们这里不养闲人。”
果然，么哦多久，屋子里的门开了，一个面貌凶恶的家伙吼道：“0x3704，出来！”
我一出来就被塞了一个沉重的包裹，上面还附带着一个写满了惭怍步骤的纸。
“快去，把这个包裹处理了。”
“去哪处理？”
“跟着指示走，先到就绪车间。”
果然，地上有指示箭头，跟着它来到了一间命令的大屋子，这里已经有不少线程了，大家都很紧张，好像时刻准备着往前冲。
我刚一进来，就听见广播说：“0x3704，进入车间。”
我赶紧往前走，身后有很多人一轮。
“它太幸运了，刚进入就绪状态就能够运行。”
“是不是有关系？”
“不是，你看人家的优先级多高啊，唉。”
前边就是车间，这里简直是太美了，怪不得老线程总是唠叨着说：“要是能一直呆在这里就好了。”
这里空间大，视野好，空气清新，鸟语花香，还有很多从来没见过的人，像服务员一样等着为我服务。
他们也有编号，更重要的是每个人还有标签，上面写着：硬盘，数据库，内存，网卡。。。
我现在也理解不了，看操作步骤吧
第一步：从包裹中取出参数。
打开包裹，里边有个HttpRequest对象，可以取到userName，password两个参数。
第二部：执行登录操作。
奥，原来是有人要登录啊，我把两个参数交给数据库服务员，他拿着数据慢腾腾地走了。
他怎么这么慢？不过我是不是正好可以在车间里多呆一会儿？反正也没法执行第三步。
就在这时，车间的广播响了：“0x3704，我是CPU，记住你现在正在执行的步骤，然后马上带着包裹离开！”
我慢腾腾地开始收拾。
“快点，别的线程马上就要进来了。”
离开这个车间，又来到一个大屋子，这里有很多线程在慢吞吞地喝茶，打牌。
“哥们，你没事干了？”
“你新来的吧，你不知道我在等数据库服务员给我数据啊！据说他们比我们慢好几十万倍，在这里好好歇歇吧。”
“啊？这么慢？我这里有人登录系统，能等这么长时间吗？”
“放心，你听没听说过人间一天，CPU一年？我们这里是用纳秒，毫秒计时的，特年鉴等待一秒，相当于我们好几天呢，来得及。”
干脆睡一会儿吧，不知道过了多久，广播又响了：“0x3704，你的数据来了，快去执行！”
我转身往cpu车间跑，却发现这里只出不进！
后面传来阵阵哄笑：“果然是新人，不知道还得去就绪车间。”
于是赶紧到就绪车间，这次就没有那么好运了，等了好久才被再次叫到CPU车间。
在等待的时候，听到有人小声议论：
“听说了么，最近有个线程被kill掉了。”
“为啥啊？”
“这家伙赖在CPU车间不走，把CPU占用率搞成100%，后来被kill掉了。”
“kill掉以后去哪里了？”
“可能被垃圾回收了吧？”
我心里打了个寒颤，赶紧接着处理，剩下的动作快多了，第二步登陆成功。
第三步：构建登陆成功后的主页。
这一步有点费事，因为有很多HTML要处理，不知道代码谁写的，处理起来很烦人。
我正在紧张制作HTML呢，CPU又开始喊了：
“0x3704，我是CPU，记住你现在正在执行的步骤，然后马上带着包裹离开！”
“为啥啊？”
“每个线程只能在CPU上运行一段时间，到了时间就得让别人用了，你去就绪车间带着，等着叫你吧。”
就这样我一直在“就绪——运行”两个状态之间不知道轮转了多少次，终于按照步骤清单把工作做完了。
最后顺利把含HTML的包裹发了回去。至于登录以后干什么事，我就不管了。马上就要回到我那昏暗的房间了，真有点舍不得这里。不过相对于有些线程，我还是幸运的，他们运行完以后就被彻底地销毁了，而我还活着！
回到了小黑屋，老线程0x6900问：
“怎么样？第一天有什么感觉？”
“我们的世界规则很复杂，首先你不知道什么时候会被条中执行；第二，在执行的过程中随时可能被打断，让出CPU车间；第三，一旦出现硬盘，数据库这样的耗时的操作，也得让出CPU去等待；第四，就是数据来了，你也不一定马上执行，还得等着CPU挑选。”
“小伙子理解的不错啊。”
“我不明白为什么很多线程执行完任务就死了，为什么咱们还活着？”
“你还不知道？长生不老是我们的特权！我们这里有个正式的名称，叫线程池！”
第二回 渐入佳境 平淡的日子就这么一天天地过去，作为一个线程，我每天的生活就是取包裹，处理包裹，然后回到我们昏暗的家：线程池。
有一天我回来的时候，听到有个兄弟说，今天要好好休息一下，明天就是疯狂的一天，我看了看日历，明天是11月11号。
果然，零点刚过，不知道那些人类怎么了，疯狂地投递包裹，为了硬度蜂拥而至的海量包裹，线程池里没有一个人能闲下来，全部出去处理包裹，CPU车间的利用率超高，硬盘在嗡嗡转，网卡疯狂地闪，即便如此，还是处理不完，堆积如山。
我们也没有办法，实在是太多太多了，这些包裹大部分都是浏览页面，下订单，买，买，买。
不知道过了多久，包裹山终于消失了。终于能够喘口气，我想我永远都不会忘记这一天。
通过这个时间，我明白了我所处的世界：这是一个电子商务的网站！
我每天的工作就是处理用户的登录，浏览，购物车，下单，付款。
我问线程池的元老0x6900：“我们要工作到什么时候？”
“要一直等到系统重启的那一刻。”0x6900说道。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/draw/OSI%E5%88%86%E5%B1%82%E5%8D%8F%E8%AE%AE.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/draw/OSI%E5%88%86%E5%B1%82%E5%8D%8F%E8%AE%AE.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 应用层 ^jTskek4M
传输层 ^pQxzPd3s
赵四发送 &amp;ldquo;hello&amp;rdquo; ^HikCKVJP
&amp;ldquo;hello&amp;rdquo; ^k7L2iUi5
TCP头 ^ZV0rPciG
网络层 ^gIEExIYH
&amp;ldquo;hello&amp;rdquo; ^EYEqMBVd
TCP头 ^6MJtw3da
IP头 ^7VDSKI8y
链路层 ^1bqp0k7r
&amp;ldquo;hello&amp;rdquo; ^vj9LEMFk
TCP头 ^r8b9NF66
IP头 ^bxLBw9w1
以太网头 ^pzSSTwKV
刘能接收 &amp;ldquo;hello&amp;rdquo; ^U866PfTY
&amp;ldquo;hello&amp;rdquo; ^tieO8laO
TCP头 ^HibXhDJP
&amp;ldquo;hello&amp;rdquo; ^f9wTbb47
TCP头 ^r63dfMw8
IP头 ^fN4wZ7fC
&amp;ldquo;hello&amp;rdquo; ^AF6X9DiD
TCP头 ^thl8FY4C
IP头 ^Wq3Ggv8c
以太网头 ^lJ5Phe33
物理层
以太网电缆 ^6ugeYIjU
%%</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>因特网基础入门 心法： 计算机网络是我们生活中不可或缺的一种信息服务基础设施：
网络 Network：由若干节点主机和连接这些主机的链路组成： 主机包括台式电脑，大型服务器，笔记本电脑，平板，智能设备，以及物联网智能硬件等。 res: 资源/图片/网络编程$计算机网络组成结构图 互联网：由多个网络通过路由器互连而形成的一个覆盖范围更大的网络： 路由器是一种专用计算机，是实现分组交换的关键构建，用于转发数据包。 因特网 Internet 是世界上最大的互联网，采用TCP/IP协议。 因特网目前已经标准化，所有的RFC技术文档都可以免费下载，且接受Email发送的意见或建议。 因特网发展史： 1969年，第一个分组交换网阿帕网 ARPANET 诞生。 1983年，TCP/IP协议称为阿帕网的标准协议，即因特网诞生。 1990年，阿帕网任务完成，正式关闭。 1991年，美国政府开始对接入因特网的单位收费。 1993年，美国政府将因特网交给各种因特网服务提供者 ISP 来负责运营。 1995年，因特网彻底商业化，形成了多层次ISP结构的因特网。 因特网服务提供者 Internet Service Provider： ISP从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。 任何机构和个人向ISP缴纳费用，获取IP地址，即可接入因特网。 中国的三大ISP是中国电信，中国联通和中国移动。 res: 资源/图片/网络编程$因特网接入流程 因特网协会ISOC：一个国际性组织，负责对因特网进行全面管理和推广，下设三大部门： 因特网体系结构委员会IAB，负责管理因特网有关协议的开发； 因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化； 因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。 制订因特网的正式标准要经过4个阶段： 因特网草案（在这个阶段还不是RFC文档） 建议标准（从这个阶段开始就成为RFC文档） 草案标准 因特网标准 数据的三种交换方式 心法： 从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源：
电路交换 心法： 传统两两相连的方式，当电话数量很多时，电话线也很多，就很不方便，所以要使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个中间设备将这些电话连接起来，这个中间设备就是电话交换机：
电路交换的三个步骤： 建立连接（分配通信资源） 通话（一直占用通信资源） 释放连接（归还通信资源） 电路交换的优缺点： 当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。这是因为计算机数据是突发式地出现在传输线路上的，而不是像打电话一样一直占用着通信资源。 试想一下这种情况，当用户正在输入和编辑一份待传输的文件时，用户所占用的通信资源暂时未被利用，该通信资源也不能被其它用户利用，宝贵的通信线路资源白白被浪费了 因此计算机通常采用的是分组交换，而不是线路交换 分组交换 心法：
报文：通常我们把表示该消息的整块数据成为一个报文： 分组交换步骤： 在发送报文之前，先把较长的报文划分成一个个更小的等长数据段，在每一个数据段前面。加上一些由必要的控制信息组成的首部后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。首部起到了很大的作用，首先首部中肯定包含了分组的目的地址，否则分组传输路径中的各分组交换机（也就是个路由器）就不知道如何转发分组了 路由器处理分组的过程是：分组交换机收到一个分组后，先将分组暂存下来，按照首部中的目的地址进行查表转发，找到合适的转发接口，通过该接口将分组转发给下一个分组交换机。 电路交换的优缺点： 分组从源主机到目的主机，可走不同的路径（也就是不同的路由）。 分组乱序：也就是分组到达目的站的顺序不一定与分组在源站的发送顺序相同。 分组也可能出现丢失，误码，重复等问题（后面介绍） 分组交换过程中各角色的功能 发送方：构造分组和发送分组 路由器：缓存分组和转发分组 接收方：接收分组和还原报文 报文交换 心法： 报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就要求交换结点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，通常被较先进的分组交换方式所取代。因此，不再详细介绍报文交换。</description></item><item><title>JB1-1-新手村</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/</guid><description>[!NOTE] Java道经第1卷 - 第1阶 - 新手村55 v1-1-basic-rookie (JAR)
S01. 学前准备工作 武技: 课前练习
金山打字赛: 安装金山打字通，进入英文打字，文章模块，一轮N进5，二轮5进2，三轮2进1。 幻灯片大赛: 制作8张以上任意主题的幻灯片，作品展示，创意点评。 E01. Java语言年龄分代 心法: Java语言是第4代计算机语言，同时也涵盖了第5代的SQL语言
分代 面向 描述 运行效率 开发效率 语言举例 第1代 机器 打孔机 + 指令条模式 极高 极低 二进制 第2代 指令 有自主分析，但少了些灵魂，不够高级 较高 较低 汇编 第3代 过程 关心每一个流程和每一个细节，属于高级语言 中等 中等 C语言 第4代 对象 关注对象属性，对象方法，对象关系和对象调用 较低 较高 Java，C++等语言 第5代 结果 需求-结果模型 中等 极高 SQL语言 E02. Java核心技术特点 心法: Java语言的核心特点
Java曾用名Green和Oak，后因印度尼西亚盛产咖啡的爪洼岛而改名。 Java是Sun公司（09年被Oracle收购）的詹姆斯高斯林团队在1994年研发出来的一门计算机编程语言。 Java分为JavaSE（标准），JavaME（个人）和JavaEE（企业）三个版本。 技术特点 描述 简单高效 Java是基于C++起来的，但是去除了很多C++的难点，上手难度低 潜力无限 Java拥有无穷无尽的强大类库，即各种功能拓展包，所以拥有无限潜力 平易近人 Java是一门面向对象的语言，相比过程和细节，更关心属性和方法，更接近人类的思维 粉丝泛滥 Java粉丝量大，社区活跃，文档齐全，始终处于TIOBE编程语言排行榜前几名 身体健壮 Java内部具有非常完善的异常处理机制，不容易使系统崩溃 安全可靠 Java有指针，但不支持直接操作指针，所以不容易中毒 场景丰富 Java被应用于安卓，金融，服务器，电商网站，嵌入式，大数据，高频交易空间，科学应用等场景 掌声一片 Java的源代码是在JVM上进行编译的，编译结果为字节码，字节码是可以跨平台的 E03.</description></item><item><title>JB1-2-基础启航</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/</guid><description>[!NOTE] Java道经第1卷 - 第2阶 - 基础启航 v1-2-basic-start (JAR)
CH01. 文档化编程思想 心法: 注释
注释是对代码的一种文字说明，提高可读性，不参与编译过程，尽量少写废话。 允许在任何注释中使用 TODO 前缀来标记一个待做事项。 EP01. 代码的基本注释 心法: 代码的基本注释 - 用于描述代码
类别 开始符号 结束符号 位置 示例 单行注释 // 无 写在方法内，独占1行，尽量规避行尾注释 // 我是单行注释 多行注释 /* */ 写在方法内，独占1或N行，尽量规避行尾注释 /* 我是多行注释 */ EP02. 产品的文档注释 心法: 产品的文档注释 - 用于描述产品
文档注释的意义: 每个产品都应该配一套独立的文档说明。 文档注释的格式: 在类，方法，属性之上使用 /** xxx */ 格式编写文档注释。 文档注释中可以使用 &amp;lt;h1&amp;gt;，&amp;lt;p&amp;gt; 等HTML标签进行美化。 心法: 文档注释的优点
文档注释的优点 描述 易修改 文档注释和代码处于同一个Java文件中，修改代码的同时，顺便就修改了文档 易统一 文档注释有固定的格式和功能注解，保证了所有文档的统一性和通用性 可提取 允许使用JavaDoc工具提取出代码中的文档注释，并生成真正的HTML文档 心法: 文档注释中的常用注解</description></item><item><title>JB1-3-面向对象</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid><description>[!NOTE] Java道经第1卷 - 第3阶 - 面向对象 v1-3-basic-oop (JAR)
CH01. OOP抽象思想 EP01. 万物皆为对象 心法: 对象 Object
对象一词是19世纪的现象学大师胡塞尔提出并定义的，他认为: 对象是世界中的物体在人脑中的映像。 对象是人的意识之所以为意识的反映。 对象是作为一种概念而存在的先念的东西。 举例说明: 比如当我们认识到一种新的物体，它叫树，于是在我们的意识当中就形成了树的概念。 这个概念会一直存在于我们的思维当中，并不会因为这棵树被砍掉而消失。 这个概念就是现实世界当中的物体在我们意识当中的映象，就是一个对象。 心法: 对象的三大特点
万事万物皆对象，如一个苹果，一项政策，一种心情等。 对象具有唯一性，即使是同一个模子刻出来的，也不会互相影响。 对象可以具有属性和方法，属性用来描述对象的静态信息，方法用来描述对象的动态行为。 EP02. 面向对象编程 心法: 面向对象编程 Object Oriented Programming (OOP)，简称OOP
OOP是一种编程思想，在考虑问题时以具体的对象为单位，考虑其属性和方法，而不关心其具体的实现流程。 心法: 面向对象编程 VS 面向过程编程
宏观上使用面向对象进行设计，但微观上仍然需要使用面向过程进行实现: 编程思想 关注点 关键字 适用场景 示例 面向过程编程 具体的实现流程 步骤 简单的，无需复杂协作的微观场景 把大象放进冰箱的步骤 面向对象编程 对象的属性方法 调用 复杂的，需要高度协作的宏观场景 设计一款高性能的冰箱 EP03. 抽象编程思想 心法: 抽象
抽象即抽出相象的部分，也叫提取，提炼，归纳或总结，即抽选出一些我们比较关注的属性和方法的过程。 CH02. OOP封装机制 心法: 封装机制 Encapsulation
封装是一个先装后封的过程: 封装动作 描述 其他 装 将抽象出来的一些属性和方法打包到类中 1.</description></item><item><title>JB1-4-高级进阶</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</guid><description>Java道经第1卷 - 第4阶 - v1-4-basic-senior(JAR) - 高级进阶
CH01. 异常例外 心法: 异常 Exception，也叫例外
异常会在程序运行时发生并打断程序运行，比如: 赵四每天开车去上班，一般情况下半个小时内就能到公司。 今天突发堵车，赵四与公司取得联系然后告知情况，以免影响工作。 而对于程序而言，堵车就是一种异常，与公司联系告知情况，就是一种异常处理。 异常处理: 异常可以被直接抛出或手动捕获处理，但异常无法直接被解决。 所谓的异常处理，也仅仅是一些紧急补救或通知方案而已。 心法: 异常分类
异常分类 是否接收Javac检查 是否可以不处理 描述 示例 运行异常 非受检 可以不处理 一般指逻辑错误，应积极避免 类转换，数组越界，空指针等 可控异常 受检 必须处理 一般由外界因素造成 IO异常，SQL异常，类丢失等 EP01. 异常基本结构 心法: 异常基本结构
try{}: 用于包裹可能会爆发异常的代码，必须且只能存在1个。 catch(){}: 按照由小到大的顺序捕获并处理1或N种异常，处理方案除发短信/邮件给coder外: log.error(e.getMessage()): 日志记录异常信息。 System.exit(-1): 退出虚拟机。 e.printStackTrace(): 打印堆栈信息。 finally{}: 无论程序是否爆发异常，其中的代码都一定会执行，仅能存在0或1个: 一般在finally中做一些恢复操作和释放资源的操作。 武技: 测试try-catch-finally异常结构
开发测试方法 TryCatchTest -&amp;gt; testTryCatchStructure(): package exception; /** @author lsx */ public class TryCatchTest { @Test public void testTryCatchStructure() { try { // try{}块中存放的是可能会爆发异常的代码 int[] arr = {1, 2}; System.</description></item><item><title>JB1-5-数据结构</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>Java道经第1卷 - 第5阶 - v1-5-basic-algorithm(JAR) - 数据结构
CH01. 数组数据结构 EP01. 冒泡排序算法 心法: 冒泡排序算法 - 交换
基础概念: 冒泡排序过程中，较大或较小的元素会经由交换慢慢浮到数列的顶端，故名冒泡排序。 核心思想: 从头开始，不断地比较相邻的两个元素，并进行对应的交换，直到最后排序完成。 心法: 冒泡排序算法流程
假设需要对长度为 N 的数组进行升序排序。 第 1 轮操作: 从头开始比较每一对相邻元素，共需比较 N-1 次。 若前数比后数大则交换，否则跳过，即让大的元素向后移动。 轮次结束后，数组 N-1号位 元素一定是数组中 第1大 的元素。 第 2 轮操作: 从头开始比较每一对相邻元素，共需比较 N-2 次。 若前数比后数大则交换，否则跳过，即让大的元素向后移动。 轮次结束后，数组 N-2号位 元素一定是数组中 第2大 的元素。 第 N-1 轮操作: 比较最后一对相邻元素，共需比较 1 次。 若前数比后数大则交换，否则跳过，即让大的元素向后移动。 轮次结束后，数组 2号位 元素一定是数组中 第2大 的元素。 排序完成。 武技: 使用冒泡排序算法对数组进行升序排序
开发测试方法 BubbleSortTest -&amp;gt; testBubbleSort(): package sort; /** @author lsx */ public class BubbleSortTest { /** 使用冒泡排序算法对数组 [3, 1, 4, 2, 5] 进行升序排序*/ @Test public void testBubbleSort() { int[] arr = {101, 2, 23, 133, 412, 23, 412, 51, 235}; // 每一轮: 9个数，两两相比，要比9-1轮 for (int i = 0, j = arr.</description></item><item><title>JB1-6-虚拟内存</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid><description>[!NOTE] Java道经第1卷 - 第6阶 - 虚拟内存 v1-6-basic-jvm (JAR)
S01. 虚拟内存模型 武技: 使用javap工具反解析字节码文件
编译 xxx.java 源文件，使其产生字节码文件。 右键 xxx.class 字节码文件，选择 Open In -&amp;gt; Terminal。 使用 javap -v xxx.class 命令反解析字节码文件。 武技: 使用jclasslib插件反解析字节码文件
安装 jclasslib Bytecode Viewer 插件。 编译 xxx.java 源文件，使其产生字节码文件。 将焦点置于 xxx.java 源文件。 点击 View -&amp;gt; Show Bytecode With Jclasslib 查看字节码信息。 E01. 虚拟机概念 1. 虚拟机具体产品 心法: Java虚拟机 Java Virtual Machine，简称 JVM
JVM只是一套规范标准而非具体产品，如 Exact/HotSpot 等产品才是JVM的具体实现。 JVM产品 描述 SunClassic Sun公司的第一款商用JVM实现，仅包含解释器，性能差，JDK1.4时被淘汰 Exact Sun公司第二款商用JVM实现，包含解释器和JIT即时编译器，性能高，但不够流行，没人用 HotSpot Oracle公司的一款JVM实现，包含解释器和即时JIT编译器，性能高，唯一拥有方法区的JVM JRockit BEA公司的一款专注于服务端开发的JVM实现，仅包含JIT即使编译器，性能最高2008年，BEA公司被Oracle收购，并将其优秀的特性都整合到了HotSpot虚拟机中 J9 IBM公司出的一款IT4J虚拟机，内部代号J9，在IBM产品中性能很高，其他产品中表现稍差 武技: 查看当前JVM具体产品</description></item><item><title>JB1-7-并发编程</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid><description>[!NOTE] Java道经第1卷 - 第7阶 - 并发编程 v1-7-basic-thread (JAR)
S01. 多线程基础入门 E01. 线程基础概念 1. 进程VS线程 启动一个程序至少启动了一个进程，启动一个进程至少启动了一个线程。 名称 描述 切换开销 数据空间 进程 OS进行分配和管理资源的基本单位 大 进程间独立 线程 CPU调度和分派的基本单位，是进程的一条执行路径 小 线程间共享 ![[excalidraw/进程和线程的区别#^group=1KF5Ai7pvAYL6ECz9wVTz 9999]] 2. 线程调度器 心法: 线程调度器 Thread Scheduler，简称TS
线程调度：指操作系统在多线程环境下决定哪个线程应该在何时运行的过程： 当多线程需要共享CPU资源时，需要一种机制来合理地分配CPU时间片，以最大程度地提高系统的吞吐量和响应性能。 线程调度器：是操作系统内核中，负责线程调度的一个重要组件。 线程调度方案 描述（线程调度器简称TS） 抢占式调度 TS允许更高优先级的任务在任何时刻抢占当前任务，以确保系统能够及时响应高优先级任务的需求该方案是win11默认的调度方案 时间片轮转 TS先将CPU的执行时间划分成N个随机片段，然后为每个线程分配一个固定的时间片每个时间片内，TS都随机选择一个线程执行，当时间片结束时将CPU资源分配给下一个线程该方案可以避免线程饥饿，即避免某个线程长时间占用CPU的情况，从而提高了系统的响应速度和效率 优先级调度 TS根据线程的优先级来确定下一个执行的线程，容易产生线程饥饿问题 多级反馈队列调度 假设创建3个优先级队列A,B和C，三个队列优先级递减，且时间片递减（分别为10ms, 20ms和30ms）1. 当系统启动时，所有的线程都被TS放入队列A，分配时间片10ms2. 当线程T在10ms内仍没执行完任务，则让出CPU，降级到队列B，以获得更大的时间片3. 当线程T在20ms内仍没执行完任务，则让出CPU，降级到队列C，以获得更大的时间片4. 当线程T在30ms内仍没执行完任务，则重新分配到队列C，循环往复，直到完成 3. 多线程优势 CPU的工作就是从内存中将指令一条一条取出并执行，当内存中没有任何指令时，CPU就会处于空闲状态。 多线程模型的最大好处就是可以提高CPU的资源利用率，即让尽量少的CPU处于空闲状态。 4. 并发VS并行 心法: 并发 Concurrency
多任务交替运行：在并发中，多个任务或操作可能交替执行，每个任务都在一段时间内得到处理，但不一定是同时执行。 并发通常用于描述系统中同时存在多个活动任务或操作的情况，这些任务可能是独立的，也可能是相关联的。 心法: 并行 Parallelism
多任务同时运行：在并行中，多个任务或操作确实同时执行，每个任务都在不同的处理器核心上独立运行。 并行通常用于描述系统中真正同时执行多个任务的情况，这些任务通常是相互独立的，彼此不受影响。 E02.</description></item><item><title>JB1-8-设计模式</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>Java道经第1卷 - 第8阶 - v1-8-basic-design(JAR) - 设计模式
心法: 设计模式分类
GoF四人帮在《设计模式 - 可复用面向对象软件基础》一书总结了23种设计模式，根据用途分为3类。 第一类: 创建型设计模式: 中文 英文 设计模式的核心特点 单例模式 Singleton 保证系统中仅可以存在唯一实例 建造者模式 Builder 创建实例和使用实例的代码解耦，注重细节 工厂模式 Factory 创建实例和使用实例的代码解耦，注重整体 原型模式 Prototype 克隆实例 第二类: 结构型设计模式: 中文 英文 设计模式的核心特点 适配器模式 Adapter 接口和接口兼容 桥接模式 Bridge 抽象和接口解耦，抽离配置 过滤器模式 Filter 根据指定条件进行过滤 装饰器模式 Decorator 在不破坏原结构的情况下扩展类 组合模式 Composite 使用树形结构来表示整体和局部的层次结构 外观模式 Facade 在客户端和复杂系统结构之间再添加一层 享元模式 Flyweight 利用缓存池技术减少重复对象的创建过程 代理模式 Proxy 聘用代理来代替执行客户端任务，拓展客户业务功能 第三类: 行为型设计模式: 中文 英文 设计模式的核心特点 策略模式 Strategy 将各种策略封装成类，并交给用户来决定使用哪一种 模板模式 Template 父类控制整体流程，子类实现每个流程的具体步骤 空对象模式 Null Object 设计空对象以避免空指针异常以及省略调用方的null值检查 命令模式 Command 对 Invoker 命令调用者和 Receiver 命令接收者进行解耦 解释器模式 Interpreter - 迭代器模式 Iterator - 中介者模式 Mediator - 备忘录模式 Memento - 观察者模式 Observer - 状态模式 State - 访问者模式 Visitor - 责任链模式 Chain of Responsibility - CH01.</description></item><item><title>JB1-9-网络编程</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid><description>Java道经第1卷 - 第9阶 - v1-9-basic-net(JAR) - 网络编程
S01. 网络模型 E01. 基础概念 1. 何为网络编程 网络编程的本质就是N台计算机之间的数据交换，客户端发送请求到服务端，服务端需要一直保持启动状态。 而整个数据交换过程被分了层，主要目的是解耦，易于各个分层的独立实现和维护。 2. OSI分层模型 OSI（Open System Interconnect）开放式系统互联是 ISO（国际标准化组织）组织在1985年研究的网络互连模型，旨在普及网络应用，统一网络标准，以更方便的进行互通互联。 OSI七层模型如下，其中应用层，表示层和会话层可以被统一称为应用层，即七层模型和五层模型的说法都是可以的： ![[第1阶段-BASIC/JB1-9-网络编程/draw/OSI分层协议.excalidraw.md#^group=P42Or2SHc2pqwsNG_uaex|100%]]
3. OSI分层协议 心法：OSI五层模型中分别使用的协议类型
分层 描述 协议栈 应用层 处理应用到应用的通信 HTTP, Telnet, FTP, TFTP, DNS, SMTP等 传输层 处理端口到端口的通信 TCP, UDP等 网络层 处理IP地址到IP地址的通信 IP, ICMP, RIP, IGMP等 数据链路层 处理Mac地址到Mac地址的通信 ARP, RARP, IEEE802.3, PPP, CSMA/CD等 物理层 处理硬件到硬件的通信 FE自协商, Manchester, MLT-3, 4A, PAM5等 E02. 应用层 心法：应用层是整个网络分层中的最上层（最贴近用户），负责处理应用程序的数据传输
应用层的网络服务协议有 HTTP, Telnet, FTP, TFTP, DNS, SMTP 等等。 1.</description></item></channel></rss>