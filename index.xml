<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lsx2216</title><link>https://lsx2216.netlify.app/</link><description>Recent content on lsx2216</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://lsx2216.netlify.app/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Markdown/</guid><description>S01. 流程图 %%自上而下%% graph TD A--&amp;gt;B; %%从左往右%% flowchart LR A--&amp;gt;B; 线条 %%实线 graph LR A1 --- B -.- C === D --&amp;gt; E -.-&amp;gt; F ==&amp;gt; G ==o H ==x I; A2 o--o J &amp;lt;--&amp;gt; K x--x L o-.-o M &amp;lt;-.-&amp;gt; N x-.-x O o==o P; A3 &amp;lt;==&amp;gt; Q x==x A; 文本 graph LR id1[A]--&amp;gt;id2[A]--&amp;gt;id3((圆形)); ![[Pasted image 20240108132327.png]]
graph LR 开始 --&amp;gt; f{条件}; f -- true --&amp;gt; 语句1 --&amp;gt; 结束; f -- false --&amp;gt; 语句2 --&amp;gt; 结束; graph LR subgraph 浏览器 end; subgraph 服务端 f--&amp;gt;w; end; 浏览器 --&amp;gt; f graph TB subgraph one A1 --&amp;gt; B1 end subgraph two A2 === B2 end subgraph three A3 -.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-Maven/</guid><description>Maven常见命令 Maven命令格式 Maven命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下: -D: 指定参数，如 -Dmaven.property.skip=true 跳过单元测试。 -P: 指定Profile配置，可以用于区分环境。 -e: 显示Maven运行出错的信息。 -o: 离线执行命令,即不去远程仓库更新包。 -X: 显示Maven允许的Debug信息。 -U: 强制去远程更新Snapshot的插件或依赖，默认每天只更新一次。 Maven常用命令 mvn archetype:create: 创建Maven项目: -DgroupId=packageName: 指定groupId。 -DartifactId=projectName: 指定artifactId。 -DarchetypeArtifactId=maven-archetype-webapp :创建Web项目。 mvn archetype:generate: 创建Maven项目。 mvn validate: 验证项目是否正确。 mvn package: Maven打包。 mvn jar:jar: 只打Jar包。 mvn source:jar: 生成源码Jar包。 mvn generate-sources: 产生应用需要的任何额外的源代码。 mvn compile: 编译源代码。 mvn property-compile: 编译测试代码。 mvn property: 运行测试。 mvn verify: 运行检查。 mvn clean: 清理Maven项目。 mvn eclipse:eclipse: 生成Eclipse项目。 mvn eclipse:clean: 清理Eclipse配置。 mvn idea:idea: 生成IDEA项目。 mvn install: 安装项目到本地仓库。 mvn:deploy: 发布项目到远程仓库。 mvn integration-property: 在集成测试可以运行的环境中处理和发布包。 mvn dependency:tree: 显示Maven依赖树。 mvn dependency:list: 显示Maven依赖列表。 mvn dependency:sources: 下载依赖包的源码。 Web项目相关命令 mvn tomcat:run: 启动Tomcat。 mvn jetty:run: 启动Jetty。 mvn tomcat:deploy: 运行打包部署。 mvn tomcat:undeploy: 撤销部署。 mvn tomcat:start: 启动Web应用。 mvn tomcat:stop: 停止Web应用。 mvn tomcat:redeploy: 重新部署。 mvn war:exploded tomcat:exploded: 部署展开的War文件。 将本地依赖添加到Maven仓库 将 ojdbc14.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-%E6%96%B0%E6%89%8B%E6%9D%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/frag/%E6%AE%8B%E5%8D%B7-%E6%96%B0%E6%89%8B%E6%9D%91/</guid><description>非Maven项目打Jar包 武技：使用IDEA将非Maven管理的项目打成jar包
File - Project Structure - Project Settings - Artifacts 单击加号 - JAR - From Modules with dependicies 在打开的对话框中指定jar包输出的位置，无需添加文件名。 点击应用OK完成配置。 回到主界面 - Build - Build Artifacts 选择你的jar包，点击 build，完成jar包导出。 如果需要写README.txt等附属文件，需要在classpath下创建。 GitHub GitHub是用于版本控制和协作的代码托管平台，是一个开源的分布式的版本控制系统，只支持git这一种唯一版本库。 GitHub从08年4月上线，一直到18年6月被微软收购。 登录 GitHub官网 注册GitHub账号并登录GitHub。 创建GitHub仓库：一个仓库对应一个项目。 点击右上角头像左边的加号按钮，选择 New Respsitory 填写仓库名 Repository name，建议和项目名同名（也可以不同名）。 填写仓库描述 Description，可选。 选择仓库访问权限：Private权限在2019年之前时收费的。 勾选 Initialize this repository with a README，为你的项目生成一个README文件。 GitHub是国外网站，比较慢，建议在 DNS查询网中 查询 github.com 复制TTL最快的： 140.82.113.3 github.com 查询 github.global.ssl.fastly.net 复制TTL最快的： 151.101.109.194 github.global.ssl.fastly.net 添加在 C:\Windows\System32\drivers\etc\ 中的hosts文件末尾，如下： 如果权限不够，点击host文件，右键属性-安全-编辑-选中当前登录的账号，对其勾选完全控制。 从GitHub上clone项目到本地 心法： 你可以直接点击Download下载，但仍建议使用Git命令方式进行clone操作。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/image/Nodepad3%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/image/Nodepad3%E6%95%99%E7%A8%8B/</guid><description>Nodepad3教程 下载Nodepad3 官网地址：https://github.com/rizonesoft/Notepad3/releases/tag/RELEASE_6.23.203.2 下载文件：Notepad3_6.23.203.2_x64_Portable.zip Portable为免安装便携版本 安装Nodepad3 解压缩 推荐 D:\notepad 启动Nodepad3 双击 Notepad3.exe 建议发送桌面快捷方式 配置Nodepad3 查看 勾选 显示行长度标记 勾选 显示缩进提示 取勾 书签 外观 语法高亮方案集 Obsidian 设置 勾选 自动关闭括号 勾选 自动关闭 HTML/XML 标记 勾选 自动补全单词 勾选 自动补全语法关键字</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/qa/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/qa/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91-QA/</guid><description>学前准备工作 你平时有哪些好的学习习惯和方法？ windows中查找的快捷键是什么？ 如何设置管理员权限？ 如何关闭防火墙？ 如何显示文件的拓展名？ 如何显示隐藏文件？ 如何修改计算机名？ 面向过程思想和面向对象思想的区别是什么？ 如何区分一门语言是不是编程语言？ java的技术之父是是谁？java是哪一年诞生的？ java的原公司是什么？目前公司是什么？ java语言最大的两个特色是什么？ 源代码，字节码和机器码分别是什么意思？ 编译的过程是什么过程？ java中的编译器是谁？ c语言为什么不能跨平台？ java语言为什么能跨平台？ jvm是什么？ 只有java能产生字节码么？其他语言不可以么？ 基础环境搭建 JDK和JRE的区别是什么？ JDK需要在哪家公司的官网下载？ 如果我只需要运行java程序，可不可以仅下载JRE？ 一台电脑上可以安装多个不同版本的JDK吗？ JDK的安装路径中允许出现中文和空格吗？ 如何开启windows平台下的命令行窗口？ cmd中如何切换当前位置到E盘？ cmd中如何清屏？ cmd中如何进入到一个指定的目录中？ cmd中如何查看java的当前版本？ cmd中如何查看当前目录下的全部目录和文件？ 为何要配置path变量？path变量的值要配置到哪一层目录？ 为何要配置JAVA_HOME变量？JAVA_HOME变量的值要配置到哪一层目录？ 运行一个Java程序需要经历哪三个步骤？ 如果修改了java文件的内容，是否需要重新编译？ 使用java.exe运行java程序时，为何不能添加class后缀？ 一个java文件通过编译只能获得一个class文件吗？ 一个java文件中可以存在多个被public修饰的类吗？ 类体中只能写哪两个内容？ main方法必须写在一个public修饰的类中，才可以被运行吗？ main方法是谁调用的？ static修饰符的三个特点是什么？ main方法为什么设计为public static void修饰？ main方法可以随意更改名字吗？ java中所有的方法名后面都会跟着一对小括号吗？ 什么叫方法形参？main方法的形参名可以更改吗？ String[] 表示什么意思？ 字符，字符串和字符串数组的区别是什么？ 集成开发环境 IDE是什么意思？你用的是什么IDE？ 你的IDEA是什么版本？ 什么是工作空间？ 字符编码是什么意思？你现在项目用什么字符编码？ JDK中最核心的jar包叫什么名字？ java中package的命名规范是什么？ java中Class类的命名规范是什么？ java中的run运行和debug运行有什么区别？ java中的class文件在哪里生成？ idea在运行代码之前会帮我们编译代码吗？ idea中如何手动编译代码？ idea中如何彻底删除一个项目？ 项目管理工具 Maven是做什么用的？ Maven是哪家公司维护的？ Maven的项目一键构建是什么意思？ Maven的依赖管理是什么意思？ 如何安装Maven？ 安装Maven是否需要配置环境变量？ mvn -version 命令是干嘛用的？ 本地仓库，远程仓库和中央仓库有什么区别？ 一个依赖(jar包)是如何在仓库中进行查找的？ 如何配置本地仓库？ 为什么要配置阿里云镜像？ mvn help:system 命令是干嘛用的？ 如何将maven到整合IDEA中？ 如何创建maven的父子项目？ 包名的命名规范是什么？ maven的groupId、artifactId和version分别是什么意思？ 父项目是否需要src目录？父项目是否需要pom.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/GitBashHere/GitBashHere%E4%B8%8D%E8%A7%81%E4%BA%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/GitBashHere/GitBashHere%E4%B8%8D%E8%A7%81%E4%BA%86/</guid><description> 问题描述：
OS系统更新了Win11之后，鼠标右键的 Git Bash Here 不见了
解决方案
1. 打开注册表 Win+R -&amp;gt; regedit 2. 添加 Git Bash Here 命令 进入位置 \HKEY_CLASSES_ROOT\Directory\Background\shell\
选中 command，右键新建项 Git Bash Here
选中 Git Bash Here ，右键新建项 command 选中 command，双击右侧的 (默认)，输入 git-bash.exe 的位置：
例如我的位置：&amp;quot;D:\Git\git-bash.exe&amp;quot; &amp;quot;--cd=%v.&amp;quot; 3. 添加 Git Bash Here 图标 点击 Git Bash Here，双击右侧的 (默认)，输入 git-bash.exe 的位置： 1. 例如我的位置：D:\Git\git-bash.exe：不用加双引号。 4. 完成测试 桌面鼠标右键 显示更多选项：查看是否存在 Git Bash Here 命令选项。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/IDEA%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/IDEA%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</guid><description>IDEA插件推荐 Translation 翻译 翻译对话：使用 Ctrl + Shift + O 呼出翻译对话框 快捷翻译：选中文本后，使用 Ctrl + Shift + Y 翻译 单词本：点击IDEA右侧边栏对应图标 CodeGeeX 智能助手 需要先登录一下CodeGeeX 如 177/验证码 中文配置：在 Tools -&amp;gt; CodeGeeX 处改为中文语言，共3处 快捷解析：右键选中的代码后，使用 Alt + Shift + E 解析 快捷注释：右键选中的代码后，使用 Alt + Shift + V 注释 快速测试：右键选中的代码后，使用 Alt + Shift + V 生成单元测试 面板：点击IDEA右侧边栏对应图标 官网：https://codegeex.cn 手册：https://zhipu-ai.feishu.cn/wiki/CuvxwUDDqiErQUkFO2Tc4walnZY Gitee 代码托管 账号绑定：点击 File -&amp;gt; Settings -&amp;gt; Version Control -&amp;gt; Gitee 代码托管：点击 Git -&amp;gt; Gitee -&amp;gt; 在 Gitee 上共享项目 GenerateAllSetter 快速生成SetGet 光标置于变量处，然后使用 Alt + Enter 呼出菜单 jclasslib Bytecode Viewer 查看字节码 查看：选中Java文件后，点击 View -&amp;gt; Show Bytecode With Jclasslib 面板：点击IDEA右侧边栏对应图标 Maven Helper 查看依赖冲突 点击POM文件下方的 Dependency Analyzer 选项卡 maven-search 搜索依赖坐标 使用 Ctrl + Shift + M 呼出搜索窗口，若快捷键冲突自行解决 Redis Helpler Redis可视化 点击IDEA右侧边栏对应图标 Wechat mini program support 微信小程序项目支持 WeChat weapp Support 微信小程序项目支持 Vue Vue项目支持</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Nodepad3%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Nodepad3%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid><description>Nodepad3教程 下载Nodepad3 官网地址：https://github.com/rizonesoft/Notepad3/releases/tag/RELEASE_6.23.203.2 下载文件：Notepad3_6.23.203.2_x64_Portable.zip Portable为免安装便携版本 安装Nodepad3 解压缩 推荐 D:\notepad 启动Nodepad3 双击 Notepad3.exe 建议发送桌面快捷方式 配置Nodepad3 查看 勾选 显示行长度标记 勾选 显示缩进提示 取勾 书签 外观 语法高亮方案集 Obsidian 设置 勾选 自动关闭括号 勾选 自动关闭 HTML/XML 标记 勾选 自动补全单词 勾选 自动补全语法关键字</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E5%AF%BC%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E5%AF%BC%E5%9B%BE/</guid><description>Obsidian教程 简介 定位 Markdown笔记软件 资费 个人使用免费 同步和发布功能需要收费 支持赞助 更快速获取新版本 可加入内部社区 可获得徽章 特点 本地存储，更私密，更便捷 丰富的主题 丰富的插件 日历，思维导图，看板，GIT等等 数据可以长期保存 强调关系 内链，外链，反链，入链，出链 关系图谱 支持同步 需要花钱 支持发布 需要花钱 支持协作 需要花钱 安装 下载 OB官网 https://obsidian.md/download 阿里云盘 https://www.alipan.com/s/y4R7Uu3cAMQ 05le 安装 安装文件 Obsidian_1.5.3_Setup.exe 安装方式 傻瓜式安装 创建仓库 1.输入仓库名称 2.选择仓库位置 3.点击创建按钮 起始布局 功能按钮区 打开快速切换（Ctrl + O） 快速切换文件，适用于文件数量过多的情况 查看关系图谱（Ctrl + G） 以神经网络的形式查看文件之间的联系 新建白板 创建一张Canvas白板 打开/创建今天的日记 创建一个日记文件 插入模板 插入自定义的内容模板 打开命令面板（Ctrl + P） 打开其他仓库 帮助（F1） 打开帮助文档 设置（Ctrl + ,） 打开全局设置 文件列表区 顶部按钮 新建笔记 新建文件夹 排序 全部折叠/全部展开 内容编辑区 左右分屏 向右开辟新标签页，内容指向当前文件 上下分屏 向下开辟新标签页，内容指向当前文件 在新窗口打开 开辟新窗口，内容指向当前文件 增加文档属性 导图，看板等特殊MD文件需要添加对应的文档属性 查找（Ctrl + F） 全局查找（Ctrl + Shift + F） 替换（Ctrl + H） 导出为PDF 默认保留OB样式，但不生成目录 可在 https://edit.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/Obsidian%E6%95%99%E7%A8%8B/Obsidian%E6%95%99%E7%A8%8B/</guid><description>S01. 编辑器 设置 -&amp;gt; 编辑器
取勾 缩减栏宽: 此时编辑器宽度为100%，加大编辑器宽度。 S02. 文件与链接 设置 -&amp;gt; 文件与链接
勾选 始终更新内部链接: 此时重命名文件时可以自动更新链接地址，无需手动确认。 选择 内部链接类型 为 基于当前笔记的相对路径: 此时内链会使用相对路径，更灵活。 取勾 使用Wiki链接: 此时链接使用标准的MD语法，更通用。 选择 附件默认存放路径 为 当前文件所在文件夹下指定的子文件夹中: 此时附件会自动存放到指定位置。 填写 子文件夹名称 为 image: 附件的指定文件夹名称。 S03. 外观 设置 -&amp;gt; 外观
主题选择 Things: 此时会自动切换主题: 需要提前在 .obsidian\themes\ 目录下安装对应主题。 调整 字体大小 为 18。 勾选 快速调整字体大小: 此时通过 ctrl + 鼠标滚轮 可以快速调整字体。 S04. 全局样式 设置 -&amp;gt; 外观 -&amp;gt; 全局CSS样式
创建全局样式文件 .obsidian\snippets\global.css，目录不存在则手动创建。 在全局样式文件中输入CSS代码，并保存文件: img { border: 1px solid gray; /*边框*/ margin-bottom: 10px; /*下边距*/ } 点击 设置 -&amp;gt; 外观: 在最后的 css代码片段 中选择启用 global.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/VSCode%E6%95%99%E7%A8%8B/VSCode%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/res/VSCode%E6%95%99%E7%A8%8B/VSCode%E6%95%99%E7%A8%8B/</guid><description>S01. 下载安装 直接在微软商店中搜索 vscode，然后点击安装即可。 S02. 插件配置 E01. 中文插件 添加中文插件：点击左侧 Extension，然后输入 Chinese，选择安装 Chinese(Simplified)(简体中文) Language Pack for Visual Studio Code 即可。 E02. 在浏览器打开 E03. 格式化文档 武技：Prettier插件配置流程
随便一篇HTML文档中，点击右键 使用...格式化文档： 在弹出的窗口中选择 配置默认格式化程序... 在弹出的窗口中选择 Prettier - Code formatter（默认值） 随便一篇HTML文档中，点击右键 格式化文档 即可完成格式化： S03. 更改快捷键 个人习惯IDEA的快捷键，所以这项选做。 E01. 快速复制行 更改为 ctrl + d E02. 格式化代码 更改为 ctrl + alt + L S04. 其他配置 E01. 放大缩小字体 点击 设置 -&amp;gt; 设置：输入 Mouse Wheel Zoom，勾选如下两项： E02. 切换默认终端 默认为powershell，点击设置切换为cmd</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements eg: int[] arr = { 1, 2, 3, 33, 105 }; ^pSbajkBV
Stack ^v6NCjE5V
0x100 ^7rqc71bQ
2 ^N4zaFf0S
105 ^Ys1iIy6h
arr ^BKmzWkXG
0X100 ^VLjZzF2l
0X104 ^kY2JkKeh
内存地址 + 4(int型占4字节) = 下一个元素的内存地址 ^VCxit9CP
Heap ^504a8vqW
0X108 ^HT9wLusU
3 ^xQM7utNr
0X112 ^KuUl7qLk
33 ^remcFmIi
1 ^S27VN11m
0 ^sSaO1Ivl
1 ^CBZWI1Lw
2 ^Cj0SiafB
3 ^tiaXpdDV
数组下标 ^8mBU1ANF</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/draw/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements eg: int[][] arr = { {1,2,3}, {33,44,2,13}, {105} }; ^pSbajkBV
Stack ^v6NCjE5V
0xA01 ^7rqc71bQ
0X001 ^2BPAvWDk
0X521 ^N4zaFf0S
0xAA0 ^Ys1iIy6h
105 ^hdddstKz
33 ^Laf9u4pa
44 ^0cOyuYtQ
2 ^0Kv1sfrB
13 ^2VkKkBKr
arr ^BKmzWkXG
0XA01 ^VLjZzF2l
0XA05 ^kY2JkKeh
0XA09 ^VCxit9CP
0X521 ^nPs5jZC6
0X525 ^pjWspjaJ
0X529 ^2SK3WZOC
0X533 ^4HLWba64
0xAA0 ^7YfKC1rc
Heap ^504a8vqW
0X001 ^hRP3taNn
0X005 ^S4gUu19d</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/qa/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/qa/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA-QA/</guid><description>文档化编程思想 注释是否参与编译？ 单行注释写在代码上面还是后面？ 在注释中使用 TODO: 有什么作用？ 文档注释和单行/多行注释的区别在于什么？ javadoc.exe 工具是做什么用的？ 文档注释中的 @author 是做什么用的？ 文档注释中，方法的参数和返回值分别用哪两个注解进行标注？ 输出与特殊字符 换行输出语句允许空输出吗？ 格式化输出语句允许空输出吗？ java中的换行符和制表符分别是什么？ System.out.println(1 + (2 + 3) + &amp;quot;4&amp;quot; + 5 + 6); 的结果是多少？ 格式化输出语句模板中的 %.2f 表示什么？ 什么是转义字符？如何使用？ 特殊符号 \n 和 \t 分别有什么效果？ 常量与特殊进制 什么叫常量？什么叫变量？ 被final修饰的变量是否可以认为是一个常量？ java中是否可以直接编写二进制数？ java中的八进制数使用什么作为前缀？ java中的十六进制数使用什么作为前缀？ 4 + 6 这个计算操作在计算机底层的流程是怎样的？ 什么叫原码，真值，反码和补码？ 如何对一个补码求其原码？ Integer.toBinaryString() 输出的是原码还是补码？ 变量与代码沼泽 声明变量是怎样一个过程？ 如何理解 int money = 100; 这行代码？ 变量的三要素是什么？ 一个变量名的硬性要求是什么？ 什么叫java关键字，什么叫java保留字？ 基本数据的类型 java中存放整数的数据类型有哪个四个？ java中1个byte类型的变量占几个bit位？ java中1个byte类型的变量的存值范围是多少？ java中1个int类型变量的存值范围是多少？ java中整数常量的默认类型是什么？ 针对 byte a = 100;，100默认类型是int，为什么可以用byte类型变量接收？ java中浮点数常量的默认类型是什么？ java中的字符型占几个字节？ java中的字符型是否可以直接赋值数字，表示什么？ java中的布尔型究竟是占1byte还是占1bit？ java中的八个基本数据类型是否都可以进行互相转换？转换原则是什么？ 浮点数转成整数时是按照四舍五入的规则，还是按照向下取整的规则？ 字符型能否转换成浮点数？ 代码 short s1 = 1; s1 = s1 + 1; 有编译错误吗？ 不同类型之间计算，结果返回类型大的还是类型小的？ java中对一个2147482647值的int型变量加1，会发生什么现象？ 引用数据的类型 java中有多少个基本数据类型？有多少个引用数据类型？ 引用数据类型的通用声明赋值格式是什么？ java中唯一不需要导包的包是哪一个？ 什么是API？什么是API文档？ 字符串的底层是什么结构？ 字符串的长度是可变的吗？ 非static方法使用什么调用？static方法使用什么调用？ 如何判断两个字符串是否一模一样？ 如何判断一个字符串是否是空字符串？ 如何判断一个字符串中是否只存在一个 &amp;ldquo;A&amp;rdquo; 字符串？ 如何删除字符串中的全部空格？ 一般在什么情况下，代码会爆发空指针异常？ java中的索引一般都是从几开始的？目标数据不存在或未找到时一般都会返回哪个数字？ 正则表达式专题 什么是正则表达式？ 正则表达式除了对字符出进行规则匹配之外，还能对字符串做什么？ 虚拟机内存分布 JVM的运行时数据区在逻辑上被分为哪几块？ java栈和java堆的区别是什么？ 什么是内存地址？ java栈一般存放什么？java堆一般存放是什么？ 凡是new出来的实例都存放在堆内存中吗？ 什么是装箱和拆箱？从JDK的哪个版本开始自动拆装箱？ 什么时候需要装箱？ 常用运算符专题 0%3的结果是多少？ 0做除数的结果是什么？0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/res/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/res/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid><description>对称加密算法 代表：3DES / AES / DES等 举例：将 a 变成 4，将 b 变成 5，于是密码 ab 被加密成了 45。 总结：加密规则规律固定，了解规律即可破解，安全性极低。 单向HASH加密算法 代表：MD5 / SHA1等 举例：将 a 变为 #，将 b 变成 1，于是密码 ab 被加密成了 #1。 总结：HASH算法无规律，无法直接反向破解，但可通过建立彩虹表进行查表破解，如： 我的密码经过MD5加密后变成 Q!#FV!#0G! 你的密码经过MD5加密后也是 Q!#FV!#0G! 于是你自然知道我的密码是什么了，虽然破解费点时间，但也不是绝对的安全。 浮动HASH加密算法 代表：BCRYPT： 举例：将 a 变为 k，将 b 变成 6，于是密码 ab 被加密成了 k6： 然后再加上一些随机salt（盐份），变成 k6#$ 由于每次添加的slat都是随机的，所以彩虹表暴力破解也无能为力。 总结：BCRYPT是HASH算法的升级版，将salt随机混入加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题，是目前最安全的算法。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/qa/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/qa/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-QA/</guid><description>CH01. OOP抽象思想 如何理解OOP？四大特征是什么？ 面向对象编程和面向过程编程的区别是什么？ 面向对象编程和面向过程编程的关联是什么？ 何使适合使用面向对象编程？何使适合使用面向过程编程？ 面向对象编程的语言有哪些？ 面向过程编程的语言有哪些？ OOP思想关心的是具体的实现流程，还是对象的属性方法？ 如何理解对象具有唯一性？ 对象拥有属性和方法对吗？ 如何理解抽象？ CH02. OOP封装机制 如何理解封装？ java封装的最小单元是什么？ 类通过什么得到实例？ 实例通过什么得到类？ 封装可以保护对象的内部实现细节吗？ 封装的原则是最小封装还是最大封装？ java的四个权限修饰符从大到小依次是什么？ java的静态内部类支持private修饰符吗？ static修饰的静态类只能写在其它类的内部吗？ 非静态成员使用实例名调用还是类名调用？ 静态成员使用实例名调用还是类名调用？ 静态成员有哪三个特点？ 成员属性和局部变量有什么区别？ 引用类型的成员属性的默认值是什么？ double类型的成员属性的默认值是什么？ 当方法传递的参数是基本数据类型时，代表传递副本还是引用？ 当方法传递的参数是引用数据类型时，代表传递副本还是引用？ 成员属性支持四种权限修饰符吗？ 成员方法支持四种权限修饰符吗？ 静态方法可以访问非静态属性吗？ 非静态方法可以访问非静态属性吗？ 初始化块是在哪个阶段执行的？ 初始化块包括哪几种？ 构造器是每new一次执行一次吗？ 构造器的名字必须和类名一模一样吗？ 构造器可以拥有返回值吗？可以使用 void 返回值吗？ 构造器和方法在写法上有什么区别？ 构造器可以被 static 修饰吗？ 构造器可以被 private 修饰吗？ 是每一个类（除接口外）都存在一个构造器吗？ 当我显示声明一个类的构造器时，默认的隐式无参构造器会被覆盖吗？ 一个类可以拥有多个构造器吗？ 如果在构造器中编写 this()，表示什么意思？ 动态块是每new一次执行一次吗？ 动态块和构造器有什么区别？ 静态块是每new一次执行一次吗？ 静态块中只能访问静态成员吗？ 动态快和静态块的区别？ CH03. OOP继承机制 继承的目的是什么？ 继承的关键字是什么？ 子类能否继承父类的private成员？ 子类能否继承父类的构造器？ 被 final 修饰的类能够被继承吗？ 被 final 修饰类中的所有属性也都是final的吗？ java中的祖先类是哪一个？ this() 和 super() 的区别？ super() 必须写在构造器的第一行吗？ 实例化子类的时候，是必须先调用父类的构造器吗？ 子类中可使用 super.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/qa/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/qa/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6-QA/</guid><description>异常处理 所有异常的父类是什么？ 一套异常结构中，try{} 是做什么的？ 一套异常结构中，try{} 必须存在吗？ 一套异常结构中，try{} 可以存在2个吗？ 一套异常结构中，catch(){} 是做什么的？ 一套异常结构中，catch(){} 必须存在吗？ 一套异常结构中，catch(){} 可以存在2个吗？ 一套异常结构中，catch(){} 中可以同时捕获多种异常吗？ 一套异常结构中，catch(){} 中同时捕获多种异常时，顺序重要吗？ 一套异常结构中，catch(){} 中有哪几种处理方案？ 一套异常结构中，finally{} 是做什么的？ 一套异常结构中，finally{} 必须存在吗？ 一套异常结构中，finally{} 可以存在2个吗？ 如果一个异常被处理了，那么它下面的代码会不会被执行？ ArithmeticException 是什么异常？ ArrayIndexOutOfBoundsException 是什么异常？ NullPointerException 是什么异常？ 可以使用 try-with-resources 写法的前提是什么？ 如果若try/catch块中存在return，则return和finally中的代码谁先执行？ finally{} 中可以成功修改基本类型的返回值吗？ finally{} 中可以成功修改引用类型的返回值吗？ 若 try{}，catch(){} 和 finally{} 中同时存在return，则最终只会执行哪一个？ 如何知道某个异常是不是运行时异常？ 若某个方法抛出了运行时异常，则调用方必须要手动处理吗？ 若某个方法抛出了可控异常，则调用方必须要手动处理吗？ 使用多态调用方法时，是否需要处理可控异常是看左边还是看右边？ 泛型容器 一个类可以添加多个泛型吗？ 构造器名后面能使用泛型吗？ 构造器参数能使用泛型吗？ 什么叫泛型擦除？ 成员方法上可以直接使用类上的泛型吗？ 静态方法上可以直接使用类上的泛型吗？ 成员方法上可以在方法返回值前自定义泛型吗？ 静态方法上可以在方法返回值前自定义泛型吗？ &amp;lt;?&amp;gt; 表示什么意思？ &amp;lt;? super Number&amp;gt; 表示什么意思？ &amp;lt;? extends Number&amp;gt; 表示什么意思？ List结构是相对的有序的吗？ List是可以直接打印的吗？ ArrayList和LinkedList的底层实现分别是什么？ ArrayList和LinkedList的区别是什么？ 时间戳是什么意思？如何获取当前时间戳？ List和Set的区别是什么？ Set中能存储null值吗？ 什么是哈希分布？ 如果发生了哈希冲突怎么办？ 实现了Comparable接口的类需要重写哪个方法？ 实现了Comparator接口的类需要重写哪个方法？ TreeSet和HashSet的区别是什么？ TreeSet是对所有的类都可以进行排序吗？ 若某个实体类没有实现Comparable接口，且treeSet在构造时也没有指定自定义的比较器，则treeSet将无法存储该实体类吗？ 在继承关系中，List和Set接口是兄弟关系吗？ 在继承关系中，List和Map接口是兄弟关系吗？ Map是以什么方式存值的？ Map中的key值能重复吗？能使用null吗？ Map中的value值能重复吗？能使用null吗？ Map接口是Set接口的底层实现吗？ Map中的键一般都是什么类型？ Map中的值一般都是什么类型？ 如何遍历一个Map容器？ HashMap底层是什么结构？ HashMap容量的初始容量是多少？ HashMap底层如何存取数据？ HashMap中，什么叫哈希冲突？如何解决哈希冲突？ HashMap中，当哈希冲突时，是头插链表，还是尾插链表？ HashMap中，当Entry数组某位置上的链表长度超过多少时会转为红黑树结构？ HashMap中，什么叫rehash操作？什么时候触发rehash操作？ 常用工具 JDK1.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</guid><description>字节码指令 0x00(nop)：什么都不做。 0x01(aconst_null)：将null推送至栈顶。 0x02(iconst_m1)：将int型-1推送至栈顶。 0x03(iconst_0)：将int型0推送至栈顶。 0x04(iconst_1)：将int型1推送至栈顶。 0x05(iconst_2)：将int型2推送至栈顶。 0x06(iconst_3)：将int型3推送至栈顶。 0x07(iconst_4)：将int型4推送至栈顶。 0x08(iconst_5)：将int型5推送至栈顶。 0x09(lconst_0)：将long型0推送至栈顶。 0x0a(lconst_1)：将long型1推送至栈顶。 0x0b(fconst_0)：将float型0推送至栈顶。 0x0c(fconst_1)：将float型1推送至栈顶。 0x0d(fconst_2)：将float型2推送至栈顶。 0x0e(dconst_0)：将double型0推送至栈顶。 0x0f(dconst_1)：将double型1推送至栈顶。 0x10(bipush)：将单字节的常量值(-128~127)推送至栈顶。 0x11(sipush)：将一个短整型常量值(-32768~32767)推送至栈顶。 0x12(ldc)：将int,float或string型常量值从常量池中推送至栈顶。 0x13(ldc_w)：将int,float或string型常量值从常量池中推送至栈顶(宽索引)。 0x14(1dc2_w)：将long或double型常量值从常量池中推送至栈顶（宽索引）。 0x15(iload)：将指定的int型局部变量推送至栈顶。 0x16(lload)：将指定的long型局部变量推送至栈顶。 0x17(fload)：将指定的float型局部变量推送至栈顶。 0x18(dload)：将指定的double型局部变量推送至栈顶。 0x19(aload)：将指定的引用类型局部变量推送至栈顶。 0x1a(iload_0)：将第一个int型局部变量推送至栈顶。 0x1b(iload_1)：将第二个int型局部变量推送至栈顶。 0x1c(iload_2)：将第三个int型局部变量推送至栈顶。 0x1d(iload_3)：将第四个int型局部变量推送至栈顶。 0x1e(lload_0)：将第一个long型局部变量推送至栈顶。 0x1f(lload_1)：将第二个long型局部变量推送至栈顶。 0x20(lload_2)：将第三个long型局部变量推送至栈顶。 0x21(lload_3)：将第四个long型局部变量推送至栈顶。 0x22(fload_0)：将第一个float型局部变量推送至栈顶。 0x23(fload_1)：将第二个float型局部变量推送至栈顶。 0x24(fload_2)：将第三个float型局部变量推送至栈顶。 0x25(fload_3)：将第四个float 型局部变量推送至栈顶。 0x26(dload_0)：将第一个double型局部变量推送至栈顶。 0x27(dload_1)：将第二个double型局部变量推送至栈顶。 0x28(dload_2)：将第三个double型局部变量推送至栈顶。 0x29(dload_3)：将第四个double型局部变量推送至栈顶。 0x2a(aload_0)：将第一个引用类型局部变量推送至栈顶。 0x2b(aload_1)：将第二个引用类型局部变量推送至栈顶。 0x2c(aload_2)：将第三个引用类型局部变量推送至栈顶。 0x2d(aload_3)：将第四个引用类型局部变量推送至栈顶。 0x2e(iaload)：将int型数组指定索引的值推送至栈顶。 0x2f(laload)：将long型数组指定索引的值推送至栈顶。 0x30(faload)：将float型数组指定索引的值推送至栈顶。 0x31(daload)：将double型数组指定索引的值推送至栈顶。 0x32(aaload)：将引用型数组指定索引的值推送至栈顶。 0x33(baload)：将boolean或byte型数组指定索引的值推送至栈顶。 0x34(caload)：将char型数组指定索引的值推送至栈顶。 0x35(saload)：将short型数组指定索引的值推送至栈顶。 0x36(istore)：将栈顶int型数值存入指定局部变量。 0x37(lstore)：将栈项long型数值存入指定局部变量。 0x38(fstore)：将栈顶float型数值存入指定局部变量。 0x39(dstore)：将栈项double型数值存入指定局部变量。 0x3a(astore)：将栈顶引用型数值存入指定局部变量。 0x3b(istore_0)：将栈顶int型数值存入第一个局部变量。 0x3c(istore_1)：将栈顶int型数值存入第二个局部变量。 0x3d(istore_2)：将栈顶int型数值存入第三个局部变量。 0x3e(istore_3)：将栈项int型数值存入第四个局部变量。 0x3f(lstore_0)：将栈项long型数值存入第一个局部变量。 0x40(lstore_1)：将栈顶long型数值存入第二个局部变量。 0x41(lstore_2)：将栈顶long型数值存入第三个局部变量。 0x42(lstore_3)：将栈顶long型数值存入第四个局部变量。 0x43(fstore_0)：将栈顶float型数值存入第一个局部变量。 0x44(fstore_1)：将栈顶float型数值存入第二个局部变量。 0x45(fstore_2)：将栈顶float型数值存入第三个局部变量。 0x46(fstore_3)：将栈顶float型数值存入第四个局部变量。 0x47(dstore_0)：将栈顶double型数值存入第一个局部变量。 0x48(dstore_1)：将栈顶double型数值存入第二个局部变量。 0x49(dstore_2)：将栈顶double型数值存入第三个局部变量。 0x4a(dstore_3)：将栈顶double型数值存入第四个局部变量。 0x4b(astore_0)：将栈顶引用型数值存入第一个局部变量。 0x4c(astore_1)：将栈项引用型数值存入第二个局部变量。 0x4d(astore_2)：将栈顶引用型数值存入第三个局部变量 0x4e(astore_3)：将栈项引用型数值存入第四个局部变量。 0x4f(iastore)：将栈项int型数值存入指定数组的指定索引位置 0x50(lastore)：将栈顶long型数值存入指定数组的指定索引位置。 0x51(fastore)：将栈项float型数值存入指定数组的指定索引位置。 0x52(dastore)：将栈顶double型数值存入指定数组的指定索引位置。 0x53(aastore)：将栈顶引用型数值存入指定数组的指定索引位置。 0x54(bastore)：将栈顶boolean或byte型数值存入指定数组的指定索引位置。 0x55(castore)：将栈顶char型数值存入指定数组的指定索引位置。 0x56(sastore)：将栈顶short型数值存入指定数组的指定索引位置。 0x57(pop)：将栈项数值弹出( 数值不能是long或double类型的)。 0x58(pop2)：将栈项的一个(long或double类型的)或两个数值弹出(其它)。 0x59(dup)：复制栈顶数值并将复制值压入栈顶 0x5a(dup_x1)：复制栈顶数值并将两个复制数值压入栈顶。 0x5b(dup_x2)：复制栈顶数值并将三个（或两个）复制数值压入栈顶。 0x5c(dup2)：复制栈顶一个（long或double类型的）或两个（其他）数值并将其复制压入栈顶。 0x5d(dup2_x1)：dup_x1指令的双倍版本。 0x5e(dup2_x2)：dup_x2指令的双倍版本。 0x5f(swap)：将栈最顶端的两个数值互换（数值不能是long或double类型的）。 0x60(iadd)：将栈顶两int型数值相加并将结果压入栈顶。 0x61(ladd)：将栈顶两long型数值相加并将结果压入栈顶。 0x62(fadd)：将栈顶两float型数值相加并将结果压入栈顶。 0x63(dadd)：将栈顶两double型数值相加并将结果压入栈顶。 0x64(isub)：将栈顶两int型数值相减并将结果压入栈顶。 0x65(lsub)：将栈顶两long型数值相减并将结果压入栈顶。 0x66(fsub)：将栈顶两float型数值相减并将结果压入栈顶。 0x67(dsub)：将栈顶两double型数值相减并将结果压入栈顶。 0x68(imul)：将栈顶两int型数值相乘并将结果压入栈顶.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/frag/%E6%AE%8B%E5%8D%B7-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid><description>心法: 字符串的创建方式 - 字面量
字面量创建方式指的是直接使用双引号将字符串引起来并赋值给一个变量: 如 String s01 = &amp;quot;hello&amp;quot; 代码。 若此时字符串池中已存在该字符串的引用地址: 则直接将字符串在常量池中的地址赋值给栈变量 s01。 若此时字符串池中并没有该字符串的引用地址: 则先在堆内存中创建一个实例，值为 hello，然后将该实例的地址存入字符串池中。 然后将该实例在堆内存中的地址赋值给栈变量 s01。 心法: 字符串的创建方式 - 实例化
字符串是引用数据类型，所以可以使用 new 关键字进行实例化创建: 如 String s01 = new String(&amp;quot;hello&amp;quot;) 代码。 该操作会在堆中创建一个实例，并将该实例在堆中的内存地址赋值给栈变量 s01。 若此时字符串池中已存在该字符串的引用地址: 则将该字符串在常量池中保存的地址赋值给栈变量 s01。 若此时字符串池中并没有该字符串的引用地址: 则将该实例在堆内存中的地址赋值给栈变量 s01。 package jvm.metadata; /** @author lsx */ @SuppressWarnings(&amp;#34;all&amp;#34;) public class StringTableTest { @Test public void testStringAddress() { /* * 1. 检查字符串池，其中并不存在 &amp;#34;lucky&amp;#34; 的引用 * - 在堆中创建一个值为 &amp;#34;lucky&amp;#34; 的实例0xAAA * - 将地址0xAAA存入字符串池 * 2.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/qa/JB1-6-%E8%99%9A%E6%8B%9F%E6%9C%BA-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/qa/JB1-6-%E8%99%9A%E6%8B%9F%E6%9C%BA-QA/</guid><description>类的加载过程 Java开发中，一个类文件的产生，需要经过哪三个步骤？ Java开发中，编译过程的底层主要做了些什么事情？ 只有Java语言才能编译出class文件吗？ Java开发中，运行指的是运行class文件本身，还是class文件中的字节码指令？ 运行过程中的加载和解释分别是什么意思？ Java字节码文件中的魔数是什么？有什么作用？ ClassLoader所负责的工作是什么？ JDK8版本的JVM中，提供了几种类型的类加载器？ JDK11版本的JVM中，提供了几种类型的类加载器？ AppClassLoader类加载器负责加载哪些内容？ AppClassLoader类加载器的父加载器是谁？ BootClassLoader类加载器负责加载哪些内容？ BootClassLoader类加载器的父加载器是谁？ BootClassLoader类加载器负责加载哪些内容？ BootClassLoader类加载器有父加载器吗？ BootClassLoader类加载器可以用Java代码获取到吗？ JDK11版本中，三个类加载器均继承了哪个类？ 为什么要使用双亲委派模型？请举例说明。 什么是双亲委派模型，JDK8版本和JDK11版本中的双亲委派模型有什么区别？ 自定义类加载器需要继承哪个类？ 如何打破双亲委派模型？ 一个类在什么情况下会被加载？ 如何保证一个类只能被加载一次？ 一个类在整个加载过程中会被分为哪三个步骤？ 一个类在加载时的Load过程是什么过程？ Load过程会执行字节码指令吗？ 什么是instanceKlass，存在哪里？存些什么？ Class实例和instanceKlass实例是什么关系？ 基本数据类型的Load过程和引用数据类型的Load过程一样吗？ 基本数据类型的Load过程和数组类型的Load过程一样吗？ 一个类在加载时的Link过程是什么过程？其内部又被分为哪三个步骤？ 编译使其的检查过程和运行时期的验证过程有什么区别？ Prepare过程主要是做些什么事？ Prepare过程中，对final修饰的属性有什么特殊处理？ Prepare过程主要是做些什么事？ 符号引用和直接引用有什么区别？ Init过程主要是做些什么事？ 如果一个类中既有静态属性，又有静态块，则如何决定执行顺序？ 一个类在初始化时，会先对其父类进行初始化，然后再对自己进行初始化吗？ 你觉得，实例化过程的本质是什么？ 实例化过程中会使用到instanceKlass中的数据吗？ 为实例的内存空间有哪两种方式？分别适用于什么场景？ JVM是如何解决实例化的过程中存在的并发问的？ 一个实例在内存中被分为哪三部分？分别存储什么内容？ 一个实例的对象头中被分为哪三部分？分别存储什么内容？ 一个实例中的对齐填充区是干什么用的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%8F%8D%E8%A7%A3%E6%9E%90%E8%AF%A6%E8%A7%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%8F%8D%E8%A7%A3%E6%9E%90%E8%AF%A6%E8%A7%A3/</guid><description>字节码反解析 心法: 字节码反解析工具 javap.exe
javap.exe 是JDK自带的反解析工具，它的作用是根据class字节码文件反解析出当前类的code区指令: 包括常量池，本地变量表，异常表，行号表等信息。 javap.exe 命令格式: javap.exe &amp;lt;options&amp;gt; &amp;lt;classes&amp;gt;: &amp;lt;options&amp;gt;: 反解析的选项，可以使用 javap -help 来查看完整选项。 &amp;lt;classes&amp;gt;: class字节码文件。 附件-官方字节码指定文档 附件-字节码指令表 武技: 反解析字节码文件
开发源代码 ByteCode: 运行或编译： com.lsx.classfile.ByteCode
/** @author lsx */ public class ByteCode { public static void main(String[] args) { int a = 1; int b = 2; System.out.println(a + b); } } 使用CMD反解析字节码文件 ByteCode.class: # 进入 `ByteCode.class` 字节码文件所在目录 cd D:\idea\workspace\**\target\classes\com\lsx\classfile # 反解析字节码文件 javap -v -p ByteCode.class 使用JClassLib反解析字节码文件 ByteCode.class: 安装 jclasslib Bytecode Viewer 插件。 编译 ByteCode.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E5%8A%A9%E8%AE%B0%E7%AC%A6%E8%A1%A8/</guid><description>类的常用助记符 心法: 类的常用助记符
助记符 标志值 含义 ACC_PUBLIC 0x0001 该类被public修饰 ACC_FINAL 0x0010 该类被final修饰 ACC_SUPER 0x0020 该类允许使用 invokespecial 指令 ACC_INTERFACE 0x0200 该类是一个接口 ACC_ABSTRACT 0x0400 该类被抽象的，包括接口和抽象类 ACC_SYNTHETIC 0x1000 该类由编译器自动生成，不是由源代码生成 ACC_ANNOTATION 0x2000 该类是一个注解类 ACC_ENUM 0x4000 该类是一个枚举类 方法的常用助记符 心法: 方法的常用助记符
助记符 标志值 含义 ACC_PUBLIC 0x0001 该方法被public修饰 ACC_PRIVATE 0x0002 该方法被private修饰 ACC_PROTECTED 0x0004 该方法被protected修饰 ACC_STATIC 0x0008 该方法被static修饰 ACC_FINAL 0x0010 该方法被final修饰 ACC_SYHCHRONRIZED 0x0020 该方法被synchronized修饰 ACC_BRIDGE 0x0040 该方法由编译器自动生成，是一个桥接方法 ACC_VARARGS 0x0080 该方法具有参数 ACC_NATIVE 0x0100 该方法被native修饰 ACC_ABSTRACT 0x0400 该方法被abstract修饰 ACC_STRICTFP 0x0800 该方法是否为strictfp ACC_SYNTHETIC 0x1000 该方法由编译器自动生成，不是由源代码生成 属性的常用助记符 心法: 属性的常用助记符</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E8%A1%A8/</guid><description>字节码 助记符 含义 0x00 nop 什么都不做。 0x01 aconst_null 将null推送至栈顶。 0x02 iconst_m1 将int型-1推送至栈顶。 0x03 iconst_0 将int型0推送至栈顶。 0x04 iconst_1 将int型1推送至栈顶。 0x05 iconst_2 将int型2推送至栈顶。 0x06 iconst_3 将int型3推送至栈顶。 0x07 iconst_ 4 将int型4推送至栈顶。 0x08 iconst_5 将int型5推送至栈顶。 0x09 lconst_0 将long型0推送至栈顶。 0x0a lconst_1 将long型1推送至栈顶。 0x0b fconst_0 将float型0推送至栈顶。 0x0c fconst_1 将float型1推送至栈顶 0x0d fconst_2 将float型2推送至栈顶。 0x0e dconst_0 将double型0推送至栈顶。 0x0f dconst_1 将double型1推送至栈顶。 0x10 bipush 将单字节的常量值(-128~127)推送至栈顶。 0x11 sipush 将一个短整型常量值(-32768~32767)推送至栈顶。 0x12 ldc 将int,float或string型常量值从常量池中推送至栈顶，对于String类型来说，此时先到StringPool中查找是否存在该字符串的引用，若不存在则会在堆中创建该字符串，并将其引用驻留在字符串池中。 0x13 ldc_w 将int,float或string型常量值从常量池中推送至栈顶(宽索引)，对于String类型来说，此时先到StringPool中查找是否存在该字符串的引用，若不存在则会在堆中创建该字符串，并将其引用驻留在字符串池中。。 0x14 1dc2_w 将long或double型常量值从常量池中推送至栈顶（宽索引），对于String类型来说，此时先到StringPool中查找是否存在该字符串的引用，若不存在则会在堆中创建该字符串，并将其引用驻留在字符串池中。。 0x15 iload 将指定的int型局部变量推送至栈顶。 0x16 lload 将指定的long型局部变量推送至栈顶。 0x17 fload 将指定的float型局部变量推送至栈顶。 0x18 dload 将指定的double型局部变量推送至栈顶。 0x19 aload 将指定的引用类型局部变量推送至栈顶。 0x1a iload_0 将第一个int型局部变量推送至栈顶。 0x1b iload_1 将第二个int型局部变量推送至栈顶。 0x1c iload_2 将第三个int型局部变量推送至栈顶。 0x1d iload_3 将第四个int型局部变量推送至栈顶。 0x1e lload_0 将第一个long型局部变量推送至栈顶。 0x1f lload_1 将第二个long型局部变量推送至栈顶。 0x20 lload_2 将第三个long型局部变量推送至栈顶。 0x21 lload_3 将第四个long型局部变量推送至栈顶。 0x22 fload_0 将第一个float型局部变量推送至栈顶。 0x23 fload_1 将第二个float型局部变量推送至栈顶。 0x24 fload_2 将第三个float型局部变量推送至栈顶 0x25 fload_3 将第四个float 型局部变量推送至栈顶。 0x26 dload_0 将第一个double型局部变量推送至栈顶。 0x27 dload_1 将第二个double型局部变量推送至栈顶。 0x28 dload_2 将第三个double型局部变量推送至栈顶。 0x29 dload_3 将第四个double型局部变量推送至栈顶。 0x2a aload_0 将第一个引用类型局部变量推送至栈顶。 0x2b aload_1 将第二个引用类型局部变量推送至栈顶。 0x2c aload_2 将第三个引用类型局部变量推送至栈顶。 0x2d aload_3 将第四个引用类型局部变量推送至栈顶。 0x2e iaload 将int型数组指定索引的值推送至栈顶。 0x2f laload 将long型数组指定索引的值推送至栈顶。 0x30 faload 将float型数组指定索引的值推送至栈顶。 0x31 daload 将double型数组指定索引的值推送至栈顶。 0x32 aaload 将引用型数组指定索引的值推送至栈顶。 0x33 baload 将boolean或byte型数组指定索引的值推送至栈顶。 0x34 caload 将char型数组指定索引的值推送至栈顶。 0x35 saload 将short型数组指定索引的值推送至栈顶。 0x36 istore 将栈顶int型数值存入指定局部变量。 0x37 lstore 将栈项long型数值存入指定局部变量。 0x38 fstore 将栈顶float型数值存入指定局部变量。 0x39 dstore 将栈项double型数值存入指定局部变量。 0x3a astore 将栈顶引用型数值存入指定局部变量。 0x3b istore_0 将栈顶int型数值存入第一个局部变量。 0x3c istore_1 将栈顶int型数值存入第二个局部变量。 0x3d istore_2 将栈顶int型数值存入第三个局部变量。 0x3e istore_3 将栈项int型数值存入第四个局部变量。 0x3f lstore_0 将栈项long型数值存入第一个局部变量。 0x40 lstore_1 将栈顶long型数值存入第二个局部变量。 0x41 lstore_2 将栈顶long型数值存入第三个局部变量。 0x42 lstore_3 将栈顶long型数值存入第四个局部变量。 0x43 fstore_0 将栈顶float型数值存入第一个局部变量。 0x44 fstore_1 将栈顶float型数值存入第二个局部变量。 0x45 fstore_2 将栈顶float型数值存入第三个局部变量。 0x46 fstore_3 将栈顶float型数值存入第四个局部变量。 0x47 dstore_0 将栈顶double型数值存入第一个局部变量。 0x48 dstore_1 将栈顶double型数值存入第二个局部变量。 0x49 dstore_2 将栈顶double型数值存入第三个局部变量。 0x4a dstore_3 将栈顶double型数值存入第四个局部变量。 0x4b astore_0 将栈顶引用型数值存入第一个局部变量。 0x4c astore_1 将栈项引用型数值存入第二个局部变量。 0x4d astore_2 将栈顶引用型数值存入第三个局部变量 0x4e astore_3 将栈项引用型数值存入第四个局部变量。 0x4f iastore 将栈项int型数值存入指定数组的指定索引位置 0x50 lastore 将栈顶long型数值存入指定数组的指定索引位置。 0x51 fastore 将栈项float型数值存入指定数组的指定索引位置。 0x52 dastore 将栈顶double型数值存入指定数组的指定索引位置。 0x53 aastore 将栈顶引用型数值存入指定数组的指定索引位置。 0x54 bastore 将栈顶boolean或byte型数值存入指定数组的指定索引位置。 0x55 castore 将栈顶char型数值存入指定数组的指定索引位置 0x56 sastore 将栈顶short型数值存入指定数组的指定索引位置。 0x57 pop 将栈项数值弹出( 数值不能是long或double类型的)。 0x58 pop2 将栈项的一个(long或double类型的)或两个数值弹出(其它)。 0x59 dup 复制栈顶数值并将复制值压入栈顶 0x5a dup_x1 复制栈顶数值并将两个复制数值压入栈顶。 0x5b dup_x2 复制栈顶数值并将三个（或两个）复制数值压入栈顶。 0x5c dup2 复制栈顶一个（long或double类型的）或两个（其他）数值并将其复制压入栈顶 0x5d dup2_x1 dup_x1指令的双倍版本。 0x5e dup2_x2 dup_x2指令的双倍版本。 0x5f swap 将栈最顶端的两个数值互换（数值不能是long或double类型的）。 0x60 iadd 将栈顶两int型数值相加并将结果压入栈顶。 0x61 ladd 将栈顶两long型数值相加并将结果压入栈顶。 0x62 fadd 将栈顶两float型数值相加并将结果压入栈顶。 0x63 dadd 将栈顶两double型数值相加并将结果压入栈顶。 0x64 isub 将栈顶两int型数值相减并将结果压入栈顶。 0x65 lsub 将栈顶两long型数值相减并将结果压入栈顶。 0x66 fsub 将栈顶两float型数值相减并将结果压入栈顶。 0x67 dsub 将栈顶两double型数值相减并将结果压入栈顶。 0x68 imul 将栈顶两int型数值相乘并将结果压入栈顶.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VisualGC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/res/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VisualGC/</guid><description>res: VisualGC插件</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ArrayBlockingQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ArrayBlockingQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements ArrayBlockingQueue ^D34fOHsu
获取可重入锁 ^h20THk0r
E ^sMYGxJE3
E ^dzTjrjdP
E ^VUI5Z60Z
入队 ^enuxeCLZ
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
获取可重入锁 ^IrV6RtZX
队列已满时阻塞等待 ^iDmLmpOM
E ^MQPZumf1
E ^SwzznZ2j
E ^ZG0NsZnA
队列为空时阻塞等待 ^5ODiO4kX
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1075668358, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;Y4MeJO0jTIt-6S5Hme7Wu&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;T9Lfgq-8bByOD1_Mn9UrU&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713682136578, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 162, &amp;#34;versionNonce&amp;#34;: 1727667674, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CAS%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CAS%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程A ^2qTJDx9k
共享资源 volatile num = 3 ^LvbRpQEP
比较 Compare ^yzb5BkqC
交换 swap ^ZWYzfBIW
主存 ^dEG3fZZ8
获取 资源 ^VrwxvZA2
预期值：3 真实值：3 ^ggNwXGm5
CAS过程是原子的 ^fsat6yoQ
修改 num = 4 ^fQRDsSFT
线程B ^v2pwYf9f
比较 Compare ^chZKXhtb
交换 swap ^axbOkDyM
预期值：3 真实值：4 ^WuZu0rPr
获取 资源 ^aOr4xG4z
共享资源 volatile num = 4 ^KtdgYddT
重新 获取 资源 ^6tLThhKr
%%</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CompletableFuture%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CompletableFuture%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements void taskF() ^a2QnPHwB
耗3秒 ^UakMCz6o
准备6个任务方法 ^B9Oy7sBx
String taskB() ^eRDio6D4
String taskC() ^C9poGHbt
void taskE() ^HrEECLdn
void taskD() ^8TeeVJ5C
耗2秒 ^ATcyKYuR
耗3秒 ^WyGiwdx9
耗1秒 ^ZpNHKSjb
耗2秒 ^LuOKHA0W
耗1秒 ^vNRO3u40
String taskA() ^N8KB0MeI
每个调用均返回一个 Future 实例
ComplateableFuture.runAsync(this::taskD) ComplateableFuture.runAsync(this::taskE) ComplateableFuture.runAsync(this::taskF) ^3gsfrD17
异步调用3个无返回值的任务方法 ^z6g17Eqm
CompletableFuture.allOf(fA, fB, fC, fD, fE, fF) ^nfoGUGQi
每个调用均返回一个 Future 实例
ComplateableFuture.supplyAsync(this::taskA) ComplateableFuture.supplyAsync(this::taskB) ComplateableFuture.supplyAsync(this::taskC) ^wJlCGwQz</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ConcurrentLinkedQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ConcurrentLinkedQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements ConcurrentLinkedQueue ^D34fOHsu
CAS出队，保证安全 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
Node(E) ^VUI5Z60Z
入队 ^enuxeCLZ
add(E) ^a2QnPHwB
出队 ^Su0qNSQf
poll() ^nh2vkAQd
创建新节点Node(E) ^UakMCz6o
CAS入队，保证安全 ^IrV6RtZX
队列为空时直接返回null ^iDmLmpOM
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 386, &amp;#34;versionNonce&amp;#34;: 1422769030, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;O8IrQr8wIGjGha06Bs8i3&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;T9Lfgq-8bByOD1_Mn9UrU&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713594261499, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 155, &amp;#34;versionNonce&amp;#34;: 1956784090, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -382.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Condition%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Condition%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements Condition队列A ^OHmoAQUx
线程01 ^w0WhlixR
线程02 ^5HWEnlMz
A.signal() A.signalAll() ^tKZeca0k
其他线程 ^ChAQgoxc
B.await() ^CncGKOQK
线程04 ^kyMozPMv
线程03 ^DjkRZvO3
B.signal() B.signalAll() ^cfZJmfDA
B.await() ^c8l7Jp8g
Condition队列B ^JIbADBSl
其他线程 ^a99406fK
A.await() ^QWKBDMwS
B.await() ^iZ7Lp5rx
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34;, &amp;#34;version&amp;#34;: 1095, &amp;#34;versionNonce&amp;#34;: 1030719810, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;sb4foQMxOMu0P48fDgVJL&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -299, &amp;#34;y&amp;#34;: -59.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CyclicBarrier%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/CyclicBarrier%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程98 ^WjWjU1tG
await() ^Y981JvbI
await() ^p93xAK3F
线程11 ^VIFWaBL4
线程12 ^fJD7blw9
线程13 ^i2VSGpvv
await() ^G9Q7xxLc
线程97 ^eBo40W9K
await() ^NqNp3XCP
CyclicBarrier(3) ^D34fOHsu
await() ^rLhjcRs0
资源 ^ZNePuoyq
await() ^0IfcwhyW
线程01 ^h20THk0r
线程02 ^tbEhULnG
线程03 ^SGofBPu4
await() ^arQbAsxW
await() ^hd6qiskj
第二批 放行3个 ^pbeacwk5
第一批 放行3个 ^WXdtVTdz
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34;, &amp;#34;version&amp;#34;: 2043, &amp;#34;versionNonce&amp;#34;: 131723806, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Ojkartur46M6hP-m-mooL&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -299.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/DelayQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/DelayQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements DelayQueue ^D34fOHsu
队列为空时阻塞等待 ^h20THk0r
队列内部会根据延迟时间戳进行排序 ^sMYGxJE3
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
获取可重入锁 ^UakMCz6o
仅支持存储 Delayed 接口的实现类，且存储时需要设置延迟时间戳 ^DKPqvImy
获取可重入锁 ^6ytEMycW
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1683243590, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;kp1RAGMf12-mkfS7UPn1f&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713598072465, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 164, &amp;#34;versionNonce&amp;#34;: 1807510810, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Exchanger%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Exchanger%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements exchanger(&amp;quot; 面包 &amp;ldquo;) ^arQbAsxW
线程 01 ^tQGWiKih
线程02 ^lcsWFdSD
Exchanger ^xyZ8XNI4
攒够两个 exchange() ^HQ8dprlh
返回 &amp;ldquo;10元&amp;rdquo; ^tFX7sylE
开始交换数据 ^gxa56jBo
exchanger(&amp;rdquo; 10元 &amp;ldquo;) ^8FcDDgOc
返回 &amp;ldquo;面包&amp;rdquo; ^wz9W3GFJ
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 425, &amp;#34;versionNonce&amp;#34;: 155367042, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Yfkml9ZdwA5p-Sb-5qbWi&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -300, &amp;#34;y&amp;#34;: -1000, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 40, &amp;#34;height&amp;#34;: 200, &amp;#34;seed&amp;#34;: 511417502, &amp;#34;groupIds&amp;#34;: [ &amp;#34;u2FVUxwbm4BN3dY0ZAGIC&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;tQGWiKih&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;caFnoNqGLlLo8x1igf87B&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;48OZMXUoCiWf_oPaohaQo&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713082677314, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 181, &amp;#34;versionNonce&amp;#34;: 709585566, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;tQGWiKih&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -290, &amp;#34;y&amp;#34;: -937.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingDeque%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingDeque%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements LinkedBlockingDeque ^D34fOHsu
队列为空时阻塞等待 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
Node(E) ^VUI5Z60Z
takeFirst(E) ^a2QnPHwB
出队 ^Su0qNSQf
takeLast() ^nh2vkAQd
获取可重入锁 ^UakMCz6o
创建新节点Node(E) ^DKPqvImy
获取可重入锁 ^6ytEMycW
出队 ^l2NbJYO2
addFirst(E) ^AnYpLIqI
入队 ^XXQcsjnZ
addLast() ^o1nICsC5
入队 ^pWdaHism
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 403, &amp;#34;versionNonce&amp;#34;: 7748506, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;DTr2poJZ37xwOwO4FxZJo&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -840, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 120, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1516086662, &amp;#34;groupIds&amp;#34;: [ &amp;#34;u7atYc3fmidYuMjuNON3N&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;-2g6OGlk7hYQtEUAXC1Sx&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;AnYpLIqI&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713595236029, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 187, &amp;#34;versionNonce&amp;#34;: 365978374, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;AnYpLIqI&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -384.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedBlockingQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements LinkedBlockingQueue ^D34fOHsu
队列为空时阻塞等待 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
Node(E) ^VUI5Z60Z
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
获取 putLock 锁 ^UakMCz6o
创建新节点Node(E) ^DKPqvImy
获取 takeLock 锁 ^6ytEMycW
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 388, &amp;#34;versionNonce&amp;#34;: 112834586, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;vP_ERt4u8krVa0dBq24Vs&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713594173825, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 162, &amp;#34;versionNonce&amp;#34;: 619769478, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedTransferQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LinkedTransferQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements LinkedTransferQueue ^D34fOHsu
若队列不为空 直接获取队列头 ^h20THk0r
Node(E) ^sMYGxJE3
Node(E) ^dzTjrjdP
null ^VUI5Z60Z
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
若队列中存在null节点 则直接将数据填充到该节点中 并 notify() 该节点上的线程 ^UakMCz6o
若队列中不存在null节点 则创建新节点Node(E) ^DKPqvImy
若队列为空 在队列中留一个null节点 并使当前线程在该节点上 wait() ^6ytEMycW
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1217081670, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;wduy2qz9TjLdjjih4Wl81&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713597181290, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 164, &amp;#34;versionNonce&amp;#34;: 1039134234, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LockSupport%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/LockSupport%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements unpark(线程01) ^QWKBDMwS
线程99 ^Xc2Af7jL
等待队列 ^o3ermnMd
线程01 ^GytHnaMR
线程02 ^SPn2RM5B
线程03 ^bhN6YeJh
线程99 ^n8Gr2kqr
其他线程 ^BdecUV7R
park() ^6dFzZh3z
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 339, &amp;#34;versionNonce&amp;#34;: 833884994, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;pUlmvZBzMHw0CjZaYNjYb&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;dotted&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -600, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 35, &amp;#34;seed&amp;#34;: 1467050306, &amp;#34;groupIds&amp;#34;: [ &amp;#34;fhswVm-AuLC_tz-hR18wl&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;Xc2Af7jL&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;Zm6inINLWYuI81dXY2jjc&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713079483472, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 139, &amp;#34;versionNonce&amp;#34;: 29047262, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Xc2Af7jL&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -382.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Phaser%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Phaser%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程04 ^h20THk0r
线程05 ^tbEhULnG
线程06 ^SGofBPu4
onAdvance(0,6) ^Zb9q2oU4
onAdvance(1,4) ^qGKBcmhc
onAdvance(2,2) ^kfGEuDS3
线程01 ^vRrpNeXl
线程02 ^HG0G6cbF
线程03 ^MRrEqcwD
阶段 1 ^nQra9M1O
淘汰 2 ^HEKAR52s
阶段 0 ^xOWRf3Re
淘汰 2 ^dWN8Sk7P
阶段 2 ^ZG1Xslm3
淘汰 2 ^kXikYR0f
bulkRegister(6) ^0NwC5jMh
Phaser ^OatgPqAk
arriveAndAwaitAdvance() ^otRnaNgu
存活 6 ^wL74GZ4L
存活 4 ^2SDGKOed
存活 2 ^63rZCSIT
全部线程 均被淘汰 ^YUzfTIRA</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Semaphore%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/Semaphore%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements Semaphore(2) ^OHmoAQUx
信号 ^yJOL2WmJ
信号 ^Iye16DQ4
线程A ^w0WhlixR
线程B ^5HWEnlMz
线程C ^fUb3jR4e
阻塞等待 ^NiLiiOvk
acquire() 成功 ^tKZeca0k
资源 ^ChAQgoxc
线程A携带 信号访问 ^yAJsMghJ
线程C携带 信号访问 ^BdEGC9Pl
线程A结束 release() ^2W9JWVsh
acquire() 成功 ^i5RlSNyp
acquire() 失败 ^CncGKOQK
acquire() 成功 ^7Zj0RbPr
线程B携带 信号访问 ^0Vc1kzi5
线程C等待中 ^dvTCWF2O
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34;, &amp;#34;version&amp;#34;: 594, &amp;#34;versionNonce&amp;#34;: 313298178, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;sLJcxu3RmGhCVS_IECqBn&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -300, &amp;#34;y&amp;#34;: -60, &amp;#34;strokeColor&amp;#34;: &amp;#34;#e03131&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffc9c9&amp;#34;, &amp;#34;width&amp;#34;: 200, &amp;#34;height&amp;#34;: 0, &amp;#34;seed&amp;#34;: 515843458, &amp;#34;groupIds&amp;#34;: [ &amp;#34;NAK_mEoTBp2YpUiggVe-m&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: { &amp;#34;type&amp;#34;: 2 }, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;CncGKOQK&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713077408450, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false, &amp;#34;startBinding&amp;#34;: { &amp;#34;elementId&amp;#34;: &amp;#34;ZmKaUmd0KaeAYvoFVkgCJ&amp;#34;, &amp;#34;focus&amp;#34;: -0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/SynchronousQueue%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/SynchronousQueue%E5%8E%9F%E7%90%86/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements SynchronousQueue ^D34fOHsu
仅当有人想要获取数据的时候 才会执行入队操作 ^sMYGxJE3
put(E) ^a2QnPHwB
出队 ^Su0qNSQf
take() ^nh2vkAQd
有人获取数据时入队 ^UakMCz6o
入队 ^l2NbJYO2
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 390, &amp;#34;versionNonce&amp;#34;: 1282263322, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;NO8y5y4ZiKMrRBTv5uRHf&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -800, &amp;#34;strokeColor&amp;#34;: &amp;#34;#f08c00&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#ffec99&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1184870874, &amp;#34;groupIds&amp;#34;: [ &amp;#34;X_gBblqp8dhdG6JOFKu8R&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;TDH5S2yXg24AdrfqoYifX&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713596372312, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 164, &amp;#34;versionNonce&amp;#34;: 1359113606, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;a2QnPHwB&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -380.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ThreadLocal%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/ThreadLocal%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements ThreadLocal.ThreadLocalMap
假设内存地址为 [0x99] ^sJlAYJH8
Entry ^61mS3QQk
0x100 ^Bi6FKzoO
key ^HCWszNU2
value ^Z9hW4R4y
&amp;ldquo;hello&amp;rdquo; ^aHNeHRnt
tl.set(&amp;ldquo;hello&amp;rdquo;) ^vunxpe2k
tl.get() ^kTOHfOGL
线程A ^vchDU4RM
ThreadLocal tl = new ThreadLocal();
假设内存地址为 [0x100] ^udoMXBCT
ThreadLocal.ThreadLocalMap
假设内存地址为 [0x33] ^GowV4Uvv
Entry ^YIyd937r
0x100 ^JrU54kEW
key ^qIwVMhkO
value ^eTysRJtU
&amp;ldquo;world&amp;rdquo; ^MkIPGhL7
tl.set(&amp;ldquo;hello&amp;rdquo;) ^oc9xpbMI
tl.get() ^FcBBisVR
线程B ^N2T47CFv
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E5%88%86%E6%AE%B5%E9%94%81%E5%8E%9F%E5%AD%90%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E5%88%86%E6%AE%B5%E9%94%81%E5%8E%9F%E5%AD%90%E7%B1%BB/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 线程A ^7JJ7ZOaT
线程B ^FZmJWdXa
线程C ^BNRsHARp
compare ^LWLqec4W
num+=3 ^Si60yojC
LongAdder类 ^AmU4F3k2
Base区 ^OeYDIsWk
线程A在base区 执行 num+=3 ^XnsS0kTT
第1段结果 ^j21ZRIUn
3 ^OIm3FcYc
cell[0] ^Tr8u4xyk
cell[1] ^Nr3UmDTU
线程B 对本cell中的long变量 执行 num++ ^GFa1IdfQ
线程C 对本cell中的long变量 执行 num&amp;ndash; ^3dp2rwQz
第2段结果 ^TRe3azcx
1 ^z1d5TSnd
第3段结果 ^dfQhEvHq
-1 ^iMfKseQ6
最终汇总结果 ^0VthUiIX
3 ^XrVmbSic
分段 汇总 ^2staYJcC
num++ ^ySfXlIR2
num&amp;ndash; ^Foivu7Jt</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 用于存放任务的 Queue队列 ^B9Oy7sBx
用于存放线程的 HashSet集合 ^N8KB0MeI
ThreadPoolExecutor线程池 ^q8dwWW4C
ThreadPoolExecutor线程池 ^ocid2FUT
用于存放任务的 Queue队列 ^Xbtfhlxl
用于存放线程的 HashSet集合 ^wdqSlUO4
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 876, &amp;#34;versionNonce&amp;#34;: 1298515782, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;JaPXObNds2_ZV6PwQYlvM&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -200, &amp;#34;y&amp;#34;: -1200, &amp;#34;strokeColor&amp;#34;: &amp;#34;#2f9e44&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#b2f2bb&amp;#34;, &amp;#34;width&amp;#34;: 400, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 603310406, &amp;#34;groupIds&amp;#34;: [ &amp;#34;1SqlelWt2gR9l-26Gx5C-&amp;#34;, &amp;#34;LpDJ1POtts2qko5-m5Cch&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;ocid2FUT&amp;#34; } ], &amp;#34;updated&amp;#34;: 1713608886935, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 116, &amp;#34;versionNonce&amp;#34;: 2050078746, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;ocid2FUT&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 1, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -103.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements start() ^TGdM5GsN
线程被选中 join() ^rLovs06r
线程被挂起 yeild() ^JGLPabM5
同步资源 已被上锁 ^kBKoZGja
notify()，nofityAll() unpark()，interrupt() ^0U7nf4ds
超时 interrupt() ^OxoOvoHI
Running 运行态 ^OAmTugj1
Ready 就绪态 ^8cW8Dwk7
New
初始态 ^DIv6HKr4
Block
阻塞态 ^dmycxkvy
Time_Waiting
计时等待态 ^Cpi0wsM3
Waiting
等待态 ^L4oYPRPg
同步资源 已被解锁 ^Tbujkkju
wait() join() park() ^mcGmB1Kf
sleep(t)，wait(t) join(t)，parkNanos(t), parkUntil(t) ^KNsZcQtJ
Terminated
终止态 ^XCMowt1F
线程任务结束 线程任务异常 ^FkDy38zs
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 运算器 ^L1ROTTTd
控制器 ^yJeN0kfB
寄存器 ^P7bYzL36
缓存L1 ^oQ8B6hDn
缓存L2 ^LJHXZPdf
CPU核心-01 ^yxneW5vq
缓存L3 ^5eWoTrex
CPU核心-02 ^Ho9lDtzZ
运算器 ^5MQxGl5U
控制器 ^HEdfd7NP
寄存器 ^tEjqKDsS
缓存L1 ^6z2F9yqg
缓存L2 ^zDnYCtCC
内存 ^x3Q9m3wo
IO-Bridge ^QsakQpyc
系统 总线 ^9ZNUh10o
访问 ^xlTxiZNA
其他设备
如USB/显卡/磁盘/网卡驱动等 ^fnnhO6kf
IO总线 ^Uyz7F5ru
内存总线 ^r72OwT6m
高速缓存行 ^H2M9G2oe
高速缓存行 ^oqVmqtGU
高速缓存行 ^Vt7UviNu
CPU ^gaRDG4Fl
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/excalidraw/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 进程A - 独享数据空间 ^PKGuwj75
进程B - 独享数据空间 ^8Nqbmden
线程A ^mvSYkr94
线程B ^aIzTooU2
切换 开销 小 ^IVOyiGJP
争抢CPU资源，完成线程切换 ^Wkme7FgO
线程C ^QlAGCMSk
线程D ^S0PfMJb5
切换 开销 小 ^dsbUNB0s
争抢CPU资源，完成线程切换 ^oBI5r4ov
切换 开销 大 ^flY4NEqL
OS系统 ^U29PU3Bd
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 568, &amp;#34;versionNonce&amp;#34;: 393019210, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;1KF5Ai7pvAYL6ECz9wVTz&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 1, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -260, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 900, &amp;#34;height&amp;#34;: 260, &amp;#34;seed&amp;#34;: 1684561271, &amp;#34;groupIds&amp;#34;: [ &amp;#34;BQsAisIiJ3gSXWm9Mj5ig&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [], &amp;#34;updated&amp;#34;: 1711617651321, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 546, &amp;#34;versionNonce&amp;#34;: 559739478, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;zXu_JDoRkH2yg29HGR0lr&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 1, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -300, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 900, &amp;#34;height&amp;#34;: 40, &amp;#34;seed&amp;#34;: 1327361689, &amp;#34;groupIds&amp;#34;: [ &amp;#34;BQsAisIiJ3gSXWm9Mj5ig&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;U29PU3Bd&amp;#34; } ], &amp;#34;updated&amp;#34;: 1711617651321, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 58, &amp;#34;versionNonce&amp;#34;: 1692567050, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;U29PU3Bd&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: 16.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid><description>ReentrantLock锁原理 lock()源码 ctrl + alt + b: 列出全部该方法的实现类。
心法： 以非公平锁为例：
lock() 底层流程：
调用 Sync 类（AQS子类）的 lock()。 调用 NonfairSync 类（Sync子类）的 lock()。 通过CAS将 state 的值由 0 改为 1。 若成功，调用 exclusiveOwnerThread() 将当前线程记录在 AbstractOwnableSynchronizer 类中的 exclusiveOwnerThread 变量中，表示当前线程独占这把锁。 若失败：调用 acquire(1)。 acquire(1) 底层流程：
调用 tryAcquire() 尝试获取锁，若成功直接获取锁。 若失败： 调用 addWaiter() 将当前线程加入等待队列。 调用 acquireQueued() 在队列中不断轮询申请获取锁。 若加入等待队列也失败，直接调用 selfInterrupt() 打断当前线程。 tryAcquire() 底层流程：
调用 NonfairSync 类中的 tryAcquire()。 调用 ReentrantLock 类中的 nonfairTryAcquire()。 若当前 state 值为 0： 通过CAS将 state 的值由 0 改为 1。 令当前线程独占这把锁。 返回true。 若当前线程已经独占了这把锁： state 自增1，表示重入一次。 返回true。 若条件均不满足，返回false。 addWaiter() 底层流程：</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/qa/JB1-7-%E5%A4%9A%E7%BA%BF%E7%A8%8B-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/qa/JB1-7-%E5%A4%9A%E7%BA%BF%E7%A8%8B-QA/</guid><description>多线程基础入门 进程和线程的区别是什么？ 多线程模型的优势是什么？缺点是什么？ 多线程之间是如何切换的？ 开辟新的线程有哪几种方式？ 继承了Thread的线程类和实现了Runnable的线程类有什么区别？ 线程类中重写的run()是做什么用的？ 如何启动一个线程？ 对一个线程调用start()能够让线程立刻执行吗？ 对一个线程调用t.start()和调用t.run()的区别是什么？ 如何阻止Junit方法运行结束？ 什么是守护线程？JVM中的GC线程是守护线程吗？ 如何设置一个线程为守护线程？守护线程的设置代码必须写在启动之前吗？ 在守护线程中产生的新线程也是守护线程吗？ 一个线程的生命周期分为哪几种状态？ 一个线程是否有可能同时处于两种生命周期状态？ 一个线程如何从NEW状态进入到RUNNABLE状态？ 一个线程的RUNNABLE状态又细分为哪两种状态？分别什么意思？ 一个线程如何进入BLOCK状态？如何解除？ 一个线程如何进入WAITING状态？如何解除？ 一个线程如何进入TIME_WAITING状态？如何解除？ 一个线程如何进入TERMINATED状态？ 一个挂起的线程解除了挂起状态之后会回归到哪种状态？ Thread类中的哪个方法用于获取当前线程实例？ 如何停止一个正在运行的线程？如何停止一个正在挂起的线程？ 让线程睡眠会阻止线程向下继续运行吗？ 线程睡眠的代码，是让代码所在的线程睡眠吗？ 线程插队的代码，是让代码所在的线程被插队吗？ 线程让步到底让出的是什么？ 线程插队的代码写在start()之前吗？ 多线程内存模型 一颗CPU中可以存在几个核心？ 一个CPU核心由哪三部分组成？ 一颗CPU核心中的运算器，控制器和寄存器分别是做什么用的？ 每个CPU核心都独享L1，L2和L3缓存吗？ 每个CPU核心都能至少独立运行几个线程？ 全部CPU共享同一个主存吗？ 多线程能从主存中获取数据吗？ 多线程能在主存上直接操作数据？ CPU读取数据的顺序是什么？ JMM的8种原子性操作分别是什么？ volatile是否可以保证线程可见性？请举例说明。 volatile是否可以保证线程有序性？请举例说明。 volatile是否可以保证线程安全性？请举例说明。 volatile修饰引用数据类型时，能对引用数据类型的内部的变化立即可见吗？ 当某线程修改了volatile变量之后，会发生什么？ 线程如何读取volatile变量？ 什么是指令重排序？添加volatile关键字后，能阻止指令重排序吗？如何阻止？ 什么是高速缓存行？一个高速缓存行有多少个字节？ 如何利用高速缓存行提高程序运行效率？ 多线程同步代码 如何理解同步和异步？各自的优缺点是什么？ 何为线程不安全？ 多线程是只有在争抢同一共享资源的时候才存在安全隐患吗？ 你对线程安全的建议有哪些？ synchronized底层使用的是公平锁吗？ synchronized可以保证可见性吗？ synchronized可以保证有序性吗？ synchronized可以保证安全性吗？ synchronized获取锁和释放锁的底层流程是什么？ 可以使用this作为同步锁实例吗？ 可以使用一个字符串变量或一个Integer变量作为锁实例吗？ 若运行过程中，锁实例发生了改变，同步效果会立即消失吗？ 多个线程必须申请同一把锁时才会发生同步现象吗？ 对非静态方法直接添加synchronized修饰，默认添加什么锁？ 对静态方法直接添加synchronized修饰，默认添加什么锁？ synchronized锁可重入吗？ synchronized锁通过什么来记录重入次数？ 隔离区中的代码若爆发异常会不会自动释放锁？ 什么叫死锁？怎么避免死锁？ synchronized锁升级流程是怎样的？ synchronized为何要使用锁升级的方案？ 锁实例在什么地方记录锁的信息？ 什么是偏向锁？偏向的是什么？ 若偏向锁被少量的线程争抢，会升级成什么锁？ 若偏向锁被很多的线程争抢，会升级成什么锁？ 可以对所有的实例都添加偏向锁吗？ 匿名偏向锁和偏向锁有什么区别？ 对标没有任何锁信息的实例添加sync标记之后，锁升级成什么？ 对标记了匿名偏向锁的实例添加sync标记之后，锁升级成什么？ 轻量级锁在锁实例的MarkWord中记录的是线程ID吗？ 自旋消耗CPU资源吗？ 自旋锁不适用于什么样的情况？ 轻量级锁在什么情况下会升级为重量级锁？ 什么是自适应自旋？ 轻量级锁和重量级锁的区别是什么？ 重量级锁消耗CPU资源吗？ CAS自旋全名是什么？ CAS的compare过程是加锁的吗？ CAS的swap过程是加锁的吗？ 什么是CAS中的ABA问题？如何解决该问题？ 如果共享资源是一个基础数据类型变量，那么ABA问题有什么影响？ 如果共享资源是一个引用数据类型变量，那么ABA问题有什么影响？ 如何解决ABA问题？ i++是一个原子操作吗？ 原子类能保证线程安全是因为底层使用了sync锁吗？ AtomicLong和LongAdder的区别是什么？ LongAdder的底层原理是什么？能解决什么问题？ 引用型属性原子类的属性是必须被volatile修饰，且不能被private/static/final修饰吗？ ThreadLocal的特点是什么？能否保证线程安全？ ThreadLocal底层是什么结构？存储的值的key是什么？ 什么叫内存泄露？什么叫内存溢出？ ThreadLocal在用完之后要不要手动调用remove()？ CAS比较与交换 AQS的核心是什么？ ReentrantLock和synchronized的相同点和不同点？ ReentrantLock使用AQS中的state变量做什么事情？ ReentrantReadWriteLock的特点是什么？ CountDownLatch使用AQS中的state变量做什么事情？ CountDownLatch的倒数过程，关心的是线程数还是门闩数？ Semaphore使用AQS中的state变量做什么事情？ Semaphore中的acquire()获取失败时，会阻塞当前线程吗？ 多线程通信方式 什么是生产消费者模型？ wait()和notify()方法来自于哪个类？ notify()是指定线程唤醒还是随机线程唤醒？ wait()和sleep()的区别是什么？ 如何手动停止一个运行状态的线程？ 如何手动停止一个挂起状态的线程？ Condition中的await()和Object中的wait()有什么区别？ Condition中的signal()和Object中的notify()有什么区别？ LockSupport的特点是什么？ unpack()如果在pack()之前被调用会如何？ CyclicBarrier的特点是什么？ CyclicBarrier的倒数过程，关心的是线程数还是门闩数？ CyclicBarrier中的await()过程，会阻塞当前线程吗？ Exchanger的特点是什么？ Exchanger的exchange()过程或阻塞当前线程吗？ 多线程同步容器 ArrayList、HashSet和HashMap如何转成同步的容器？ Vector和ArrayList的区别？ CopyOnWriteArrayList的特点是什么？适用于什么场景？ HashTable和HashMap的区别？ ConcurrentHashMap的底层原理是什么？ ConcurrentHashMap底层存储数据时加锁吗？ ConcurrentHashMap底层哈希冲突时如何解决？ ConcurrentHashMap底层链表的添加操作加锁吗？ ConcurrentHashMap底层的链表何时会变成红黑树？ ConcurrentSkipListMap底层使用的是什么数据结构？ ConcurrentHashMap1.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/ConcurrentHashMap%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/ConcurrentHashMap%E6%BA%90%E7%A0%81/</guid><description>S01. 构造器源码 心法: ConcurrentHashMap构造器源码
校验加载因子，初始容量，预估的修改线程并发数（为了兼容JDK1.7版本）等参数，不合法就抛出异常: 加载因子默认0.75F，初始容量默认16，预估的修改线程并发数默认为1。 若数组初始容量小于预估的修改线程并发数，则重新赋值数组初始容量为预估的修改线程并发数。 计算数组最终容量，若大于最大容量则重新赋值为最大容量，否则向上取到最近的2的幂次方值。 将数组大小赋值给 sizeCtl 状态变量，该变量用于数组初始化和扩容。 /** ConcurrentHashMap构造器源码 */ public class ConcurrentHashMap { /** * 该变量用于数组初始化和扩容 * sizeCtl = -1: 表示数组正在初始化。 * sizeCtl = -(1 + N个线程数): 表示有N个线程正在一起扩容这个数组。 * sizeCtl = 0: 表示还没有被初始化，默认值。 * sizeCtl &amp;gt; 0: 表示下次扩容的阈值。 */ private transient volatile int sizeCtl; /** 数组最大容量 */ private static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; /** 加载因子 * * 加载因子是用来确认table数组是否需要动态扩展，默认值0.75 * 比如table数组大小为16，装载因子为0.75时，threshold就是12 * 即当table的实际大小超过12时，table就需要动态扩容。 */ private static final float LOAD_FACTOR = 0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%81%8F%E5%90%91%E9%94%81%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%81%8F%E5%90%91%E9%94%81%E5%8D%87%E7%BA%A7%E6%B5%81%E7%A8%8B/</guid><description>锁升级流程 新建obj实例 启用偏向锁（默认） 标记匿名偏向锁 禁用偏向锁 标记无锁 一个线程来袭 升级为偏向锁 此时obj偏向该线程，但该线程不生成LR 该线程离开后也不会删除obj中的偏向锁信息 一个线程来袭 该线程是当前锁实例 偏向的线程
直接放行，未发生竞争 该线程不是当前锁实例 偏向的线程
撤销偏向锁 此过程比较消耗性能 将obj升级为轻锁 两个线程各自在自己的线程栈中生成LockRecord 两个线程开始争抢资源 假设线程B 争抢到了资源 线程B 备份MarkWord到自己的LockRecord 重写MarkWord为自己的 &amp;ldquo;LR地址 + 00&amp;rdquo; 进入隔离区开始执行任务 离开时还原MarkWord信息 线程A 在用户内存空间里CAS自旋等待 次数过多或线程数过多时升级为重锁 若隔离区代码发生了严重耗时的情况 直接升级为重锁</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%B0%8F%E8%AF%B4-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BD%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/res/%E5%B0%8F%E8%AF%B4-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BD%AC/</guid><description>第一回 初生牛犊 我是一个线程，我一出生就被编了个号：0x3704，然后被领到一个昏暗的屋子里，在这里我发现了很多和我一模一样的同伴。
我身边的同伴0x6900呆的时间比较长，他带着沧桑的口气对我说：“我们线程的宿命就是处理包裹，把包裹处理完以后还得马上回到这里，否则可能永远也回不来了。”
我一脸懵逼：“包裹？什么包裹？”
“不要着急，马上你就会明白的，我们这里不养闲人。”
果然，么哦多久，屋子里的门开了，一个面貌凶恶的家伙吼道：“0x3704，出来！”
我一出来就被塞了一个沉重的包裹，上面还附带着一个写满了惭怍步骤的纸。
“快去，把这个包裹处理了。”
“去哪处理？”
“跟着指示走，先到就绪车间。”
果然，地上有指示箭头，跟着它来到了一间命令的大屋子，这里已经有不少线程了，大家都很紧张，好像时刻准备着往前冲。
我刚一进来，就听见广播说：“0x3704，进入车间。”
我赶紧往前走，身后有很多人一轮。
“它太幸运了，刚进入就绪状态就能够运行。”
“是不是有关系？”
“不是，你看人家的优先级多高啊，唉。”
前边就是车间，这里简直是太美了，怪不得老线程总是唠叨着说：“要是能一直呆在这里就好了。”
这里空间大，视野好，空气清新，鸟语花香，还有很多从来没见过的人，像服务员一样等着为我服务。
他们也有编号，更重要的是每个人还有标签，上面写着：硬盘，数据库，内存，网卡。。。
我现在也理解不了，看操作步骤吧
第一步：从包裹中取出参数。
打开包裹，里边有个HttpRequest对象，可以取到userName，password两个参数。
第二部：执行登录操作。
奥，原来是有人要登录啊，我把两个参数交给数据库服务员，他拿着数据慢腾腾地走了。
他怎么这么慢？不过我是不是正好可以在车间里多呆一会儿？反正也没法执行第三步。
就在这时，车间的广播响了：“0x3704，我是CPU，记住你现在正在执行的步骤，然后马上带着包裹离开！”
我慢腾腾地开始收拾。
“快点，别的线程马上就要进来了。”
离开这个车间，又来到一个大屋子，这里有很多线程在慢吞吞地喝茶，打牌。
“哥们，你没事干了？”
“你新来的吧，你不知道我在等数据库服务员给我数据啊！据说他们比我们慢好几十万倍，在这里好好歇歇吧。”
“啊？这么慢？我这里有人登录系统，能等这么长时间吗？”
“放心，你听没听说过人间一天，CPU一年？我们这里是用纳秒，毫秒计时的，特年鉴等待一秒，相当于我们好几天呢，来得及。”
干脆睡一会儿吧，不知道过了多久，广播又响了：“0x3704，你的数据来了，快去执行！”
我转身往cpu车间跑，却发现这里只出不进！
后面传来阵阵哄笑：“果然是新人，不知道还得去就绪车间。”
于是赶紧到就绪车间，这次就没有那么好运了，等了好久才被再次叫到CPU车间。
在等待的时候，听到有人小声议论：
“听说了么，最近有个线程被kill掉了。”
“为啥啊？”
“这家伙赖在CPU车间不走，把CPU占用率搞成100%，后来被kill掉了。”
“kill掉以后去哪里了？”
“可能被垃圾回收了吧？”
我心里打了个寒颤，赶紧接着处理，剩下的动作快多了，第二步登陆成功。
第三步：构建登陆成功后的主页。
这一步有点费事，因为有很多HTML要处理，不知道代码谁写的，处理起来很烦人。
我正在紧张制作HTML呢，CPU又开始喊了：
“0x3704，我是CPU，记住你现在正在执行的步骤，然后马上带着包裹离开！”
“为啥啊？”
“每个线程只能在CPU上运行一段时间，到了时间就得让别人用了，你去就绪车间带着，等着叫你吧。”
就这样我一直在“就绪——运行”两个状态之间不知道轮转了多少次，终于按照步骤清单把工作做完了。
最后顺利把含HTML的包裹发了回去。至于登录以后干什么事，我就不管了。马上就要回到我那昏暗的房间了，真有点舍不得这里。不过相对于有些线程，我还是幸运的，他们运行完以后就被彻底地销毁了，而我还活着！
回到了小黑屋，老线程0x6900问：
“怎么样？第一天有什么感觉？”
“我们的世界规则很复杂，首先你不知道什么时候会被条中执行；第二，在执行的过程中随时可能被打断，让出CPU车间；第三，一旦出现硬盘，数据库这样的耗时的操作，也得让出CPU去等待；第四，就是数据来了，你也不一定马上执行，还得等着CPU挑选。”
“小伙子理解的不错啊。”
“我不明白为什么很多线程执行完任务就死了，为什么咱们还活着？”
“你还不知道？长生不老是我们的特权！我们这里有个正式的名称，叫线程池！”
第二回 渐入佳境 平淡的日子就这么一天天地过去，作为一个线程，我每天的生活就是取包裹，处理包裹，然后回到我们昏暗的家：线程池。
有一天我回来的时候，听到有个兄弟说，今天要好好休息一下，明天就是疯狂的一天，我看了看日历，明天是11月11号。
果然，零点刚过，不知道那些人类怎么了，疯狂地投递包裹，为了硬度蜂拥而至的海量包裹，线程池里没有一个人能闲下来，全部出去处理包裹，CPU车间的利用率超高，硬盘在嗡嗡转，网卡疯狂地闪，即便如此，还是处理不完，堆积如山。
我们也没有办法，实在是太多太多了，这些包裹大部分都是浏览页面，下订单，买，买，买。
不知道过了多久，包裹山终于消失了。终于能够喘口气，我想我永远都不会忘记这一天。
通过这个时间，我明白了我所处的世界：这是一个电子商务的网站！
我每天的工作就是处理用户的登录，浏览，购物车，下单，付款。
我问线程池的元老0x6900：“我们要工作到什么时候？”
“要一直等到系统重启的那一刻。”0x6900说道。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/draw/OSI%E5%88%86%E5%B1%82%E5%8D%8F%E8%AE%AE.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/draw/OSI%E5%88%86%E5%B1%82%E5%8D%8F%E8%AE%AE.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 应用层 ^jTskek4M
传输层 ^pQxzPd3s
赵四发送 &amp;ldquo;hello&amp;rdquo; ^HikCKVJP
&amp;ldquo;hello&amp;rdquo; ^k7L2iUi5
TCP头 ^ZV0rPciG
网络层 ^gIEExIYH
&amp;ldquo;hello&amp;rdquo; ^EYEqMBVd
TCP头 ^6MJtw3da
IP头 ^7VDSKI8y
链路层 ^1bqp0k7r
&amp;ldquo;hello&amp;rdquo; ^vj9LEMFk
TCP头 ^r8b9NF66
IP头 ^bxLBw9w1
以太网头 ^pzSSTwKV
刘能接收 &amp;ldquo;hello&amp;rdquo; ^U866PfTY
&amp;ldquo;hello&amp;rdquo; ^tieO8laO
TCP头 ^HibXhDJP
&amp;ldquo;hello&amp;rdquo; ^f9wTbb47
TCP头 ^r63dfMw8
IP头 ^fN4wZ7fC
&amp;ldquo;hello&amp;rdquo; ^AF6X9DiD
TCP头 ^thl8FY4C
IP头 ^Wq3Ggv8c
以太网头 ^lJ5Phe33
物理层
以太网电缆 ^6ugeYIjU
%%</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/frag/%E6%AE%8B%E5%8D%B7-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>因特网基础入门 心法： 计算机网络是我们生活中不可或缺的一种信息服务基础设施：
网络 Network：由若干节点主机和连接这些主机的链路组成： 主机包括台式电脑，大型服务器，笔记本电脑，平板，智能设备，以及物联网智能硬件等。 res: 资源/图片/网络编程$计算机网络组成结构图 互联网：由多个网络通过路由器互连而形成的一个覆盖范围更大的网络： 路由器是一种专用计算机，是实现分组交换的关键构建，用于转发数据包。 因特网 Internet 是世界上最大的互联网，采用TCP/IP协议。 因特网目前已经标准化，所有的RFC技术文档都可以免费下载，且接受Email发送的意见或建议。 因特网发展史： 1969年，第一个分组交换网阿帕网 ARPANET 诞生。 1983年，TCP/IP协议称为阿帕网的标准协议，即因特网诞生。 1990年，阿帕网任务完成，正式关闭。 1991年，美国政府开始对接入因特网的单位收费。 1993年，美国政府将因特网交给各种因特网服务提供者 ISP 来负责运营。 1995年，因特网彻底商业化，形成了多层次ISP结构的因特网。 因特网服务提供者 Internet Service Provider： ISP从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。 任何机构和个人向ISP缴纳费用，获取IP地址，即可接入因特网。 中国的三大ISP是中国电信，中国联通和中国移动。 res: 资源/图片/网络编程$因特网接入流程 因特网协会ISOC：一个国际性组织，负责对因特网进行全面管理和推广，下设三大部门： 因特网体系结构委员会IAB，负责管理因特网有关协议的开发； 因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化； 因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。 制订因特网的正式标准要经过4个阶段： 因特网草案（在这个阶段还不是RFC文档） 建议标准（从这个阶段开始就成为RFC文档） 草案标准 因特网标准 数据的三种交换方式 心法： 从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源：
电路交换 心法： 传统两两相连的方式，当电话数量很多时，电话线也很多，就很不方便，所以要使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个中间设备将这些电话连接起来，这个中间设备就是电话交换机：
电路交换的三个步骤： 建立连接（分配通信资源） 通话（一直占用通信资源） 释放连接（归还通信资源） 电路交换的优缺点： 当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。这是因为计算机数据是突发式地出现在传输线路上的，而不是像打电话一样一直占用着通信资源。 试想一下这种情况，当用户正在输入和编辑一份待传输的文件时，用户所占用的通信资源暂时未被利用，该通信资源也不能被其它用户利用，宝贵的通信线路资源白白被浪费了 因此计算机通常采用的是分组交换，而不是线路交换 分组交换 心法：
报文：通常我们把表示该消息的整块数据成为一个报文： 分组交换步骤： 在发送报文之前，先把较长的报文划分成一个个更小的等长数据段，在每一个数据段前面。加上一些由必要的控制信息组成的首部后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。首部起到了很大的作用，首先首部中肯定包含了分组的目的地址，否则分组传输路径中的各分组交换机（也就是个路由器）就不知道如何转发分组了 路由器处理分组的过程是：分组交换机收到一个分组后，先将分组暂存下来，按照首部中的目的地址进行查表转发，找到合适的转发接口，通过该接口将分组转发给下一个分组交换机。 电路交换的优缺点： 分组从源主机到目的主机，可走不同的路径（也就是不同的路由）。 分组乱序：也就是分组到达目的站的顺序不一定与分组在源站的发送顺序相同。 分组也可能出现丢失，误码，重复等问题（后面介绍） 分组交换过程中各角色的功能 发送方：构造分组和发送分组 路由器：缓存分组和转发分组 接收方：接收分组和还原报文 报文交换 心法： 报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就要求交换结点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，通常被较先进的分组交换方式所取代。因此，不再详细介绍报文交换。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/draw/Drawing-2024-05-18-11.57.37.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/draw/Drawing-2024-05-18-11.57.37.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 能否访问 同一宿主机内 其他虚拟机 ^5CRLwAPA
能否访问 局域网内 其他虚拟机 ^DNnA3piH
能否访问 局域网内 其他物理主机 ^T2RTtK3g
host-only 仅主机模式 ^e95GzUH1
虚拟机和宿主机是否 必须在同一个网段 ^TJxFcS7i
NAT模式 Network Address Translation ^UPwIvf21
bridge 桥接模式 ^JSGSj7eV
是否占用局域网中的 一个IP地址 ^a4QVZoZ2
能否访问外网 ^22MzjxvT
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 279, &amp;#34;versionNonce&amp;#34;: 1742737789, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Fvqul4WqTUeuJTEe53v9v&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: 100, &amp;#34;y&amp;#34;: 120, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 200, &amp;#34;height&amp;#34;: 85, &amp;#34;seed&amp;#34;: 1017130771, &amp;#34;groupIds&amp;#34;: [ &amp;#34;jJ21_cqiiMs2kNPW_n1Ta&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;DNnA3piH&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;tFA-Sl24W-tK12FHzeIdW&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;s0-u3-16oxWNVA-WTBzAn&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;88nXI7nGdrQo30VIIDmYn&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1716006919879, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 111, &amp;#34;versionNonce&amp;#34;: 318869715, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;DNnA3piH&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: 150, &amp;#34;y&amp;#34;: 125, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1e1e1e&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;transparent&amp;#34;, &amp;#34;width&amp;#34;: 100, &amp;#34;height&amp;#34;: 75, &amp;#34;seed&amp;#34;: 802717, &amp;#34;groupIds&amp;#34;: [ &amp;#34;jJ21_cqiiMs2kNPW_n1Ta&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [], &amp;#34;updated&amp;#34;: 1716006919879, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false, &amp;#34;fontSize&amp;#34;: 20, &amp;#34;fontFamily&amp;#34;: 1, &amp;#34;text&amp;#34;: &amp;#34;能否访问\n局域网内\n其他虚拟机&amp;#34;, &amp;#34;rawText&amp;#34;: &amp;#34;能否访问\n局域网内\n其他虚拟机&amp;#34;, &amp;#34;textAlign&amp;#34;: &amp;#34;center&amp;#34;, &amp;#34;verticalAlign&amp;#34;: &amp;#34;middle&amp;#34;, &amp;#34;containerId&amp;#34;: &amp;#34;Fvqul4WqTUeuJTEe53v9v&amp;#34;, &amp;#34;originalText&amp;#34;: &amp;#34;能否访问\n局域网内\n其他虚拟机&amp;#34;, &amp;#34;lineHeight&amp;#34;: 1.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/frag/%E6%AE%8B%E5%8D%B7-Linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/frag/%E6%AE%8B%E5%8D%B7-Linux/</guid><description>安装VMware Tools **流程: ** 以root身份登录虚拟机:
点击VMware菜单栏 虚拟机，选择 安装VMware Tools。
ls /dev: 查看 dev 中是否含有 cdrom 目录。
ls /mnt: 查看 mnt 中是否含有 cdrom 目录。
mkdir /mnt/cdrom: 在 mnt 中创建 cdrom 目录。
ls /mnt: 再次查看 mnt 中是否含有 cdrom 目录。
mount -t iso9660 /dev/cdrom /mnt/cdrom: 将光盘挂载到 /mnt/cdrom 目录。
ls /mnt/cdrom: 查看是否挂载成功，即存在VMwareTools-9.9.3-2759765.tar.gz文件。
cp /mnt/cdrom/VMwareTools-9.9.3-2759765.tar.gz ~: 将后缀名为tar.gz的文件拷贝到根目录。
ls ~: 查看根目录中是否复制成功，即存在VMwareTools-9.9.3-2759765.tar.gz文件。
umount /dev/cdrom: 解除挂载。
tar -zxvf VMwareTools-9.9.3-2759765.tar.gz: 解压安装包。
ls ~: 查看是否解压成功，vmware-tools-distrib 是源码文件目录。
cd vmware-tools-distrib: 进入到解压后的源码文件目录。
yum -y install perl gcc gcc-c++ make cmake kernel kernel-headers kernel-devel net-tools 安装编译环境:</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/qa/JB2-1-Linux-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/qa/JB2-1-Linux-QA/</guid><description>Linux和Windows操作系统的区别？ Linux和VMware的区别？ Linux虚拟机的网络配置中，桥接模式，NAT模式和仅主机模式的区别？ Linux虚拟机的网卡配置中，如何配置使用静态IP模式或使用动态IP模式？ Linux虚拟机的网卡配置中，如何配置子网IP，子网掩码和网关地址？ 如何测试虚拟机网络是否连通外网？ yum工具是做什么用的？如何将yum工具升级到最新版？ 如何使用yum工具下载安装一个软件？如何使用yum工具卸载一个软件？ vim工具是做什么用的？ zip工具是做什么用的？unzip工具是做什么用的？ ntpdate工具是做什么用的？ wget工具是做什么用的？ 如何使用yum工具查看已安装的本地软件列表？ 为何要同步虚拟机和主机的系统时间？ 工作中推荐使用的时区是什么？ 如何查看当前虚拟机的系统本地时间？ 虚拟机防火墙默认开放了哪个端口号？ 如何永久关闭虚拟机防火墙？如何查看虚拟机防火墙是否被永久关闭？ 如何在防火墙中永久开放一个5277端口？开放后必须要重启防火墙才能生效吗？ Linux文件系统中的最上层目录是什么目录？ /home 和 /root 目录的区别是什么？ 如何查看本地网络接口的详细信息？ 如何清空当前终端屏幕中的内容？ 如何切换到当前用户的主目录？ 如何展示当前目录下的全部内容，包括内容的详细信息和隐藏内容？ 如何查看当前所在位置的完整路径？ 如何在 /opt 目录中创建一个 /test/user 目录？ 如何在 /opt/test/user 目录中创建一个 zhaosi.txt 文件？ 如何删除 /opt/test 目录以及目录中的全部内容？ 如何将 /opt/test/user/zhaosi.txt 拷贝到 /usr 目录中？ 如何将 /opt/test/user/zhaosi.txt 拷贝到 /usr 目录中并重命名为 liuneng.txt 文件？ 如何将 /opt/test 目录中的全部内容拷贝到 /usr 目录中？ 如何将 /opt/test/user/zhaosi.txt 移动到 /usr 目录中？ 如何将 /opt/test/user/zhaosi.txt 移动到 /usr 目录中并重命名为 liuneng.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/res/VMWare%E5%AE%89%E8%A3%85%E6%AC%A7%E6%8B%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/res/VMWare%E5%AE%89%E8%A3%85%E6%AC%A7%E6%8B%89/</guid><description>S01. 安装欧拉系统 E01. 创建新虚拟机 武技: 使用 VMware 创建一个新的欧拉虚拟机
1. 选择安装模式 点击 新建虚拟机 按钮，在欢迎界面选择 自定义(高级)(C) 安装模式: 2. 选择兼容模式 虚拟机硬件兼容性选择 Workstation 17.5.x: 3. 稍后安装系统 选择 稍后安装操作系统(S): 4. 选择系统内核 客户机操作系统选择 Linux(L)，版本选择 其他 Linux 5.x 内核 64 位: 5. 填写虚拟机名称 虚拟机名称随意，位置路径中不要有中文和特殊符号即可: 6. 配置处理器 输入处理器数量为 2，输入每个处理器的内核数量为 2: 7. 配置内存 输入虚拟机的内存为 2048MB: 8. 配置网络类型 网络类型选择 使用网络地址转换(NAT)(E): 9. 选择IO类型 选择I/O控制器类型为 LSI Logic(L)(推荐): 10. 选择磁盘类型 选择磁盘类型为 SCSI(S)(推荐): 11. 创建磁盘 选择 创建新虚拟机磁盘(V): 12. 配置磁盘大小 设置最大磁盘大小为 40G，并勾选 将虚拟磁盘拆分成多个文件(M): 13. 指定磁盘文件 指定磁盘文件，默认即可: 14.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/frag/%E6%AE%8B%E5%8D%B7-Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/frag/%E6%AE%8B%E5%8D%B7-Docker/</guid><description>Docker搭建Node容器 武技：运行Node容器
创建并运行容器： lnx: docker run -itd --name node node:16.14.0：运行容器。 查看运行的容器： lnx: docker ps --format &amp;quot;table {{.ID}}\t{{.Names}}&amp;quot; 进入容器的内部：可用 exit 命令退出容器： lnx: docker exec -it node bash：进入Node容器。 dcr: node --version：查看Node版本。 Portainer可视化界面 心法: Docker Daemon，简称DockerD
DockerD是Docker的守护进程，监听者DockerAPI请求，管理Docker镜像，容器，网络等对象。 武技: 搭建Portainer容器作为Docker可视化界面
设置DockerDaemon服务: 否则Portainer无法连接Docker: # 修改DockerDaemon的配置文件 vim /etc/docker/daemon.json # JSON文件中默认包含一个 `{}`，需要保留 # &amp;#34;tcp://0.0.0.0:2375&amp;#34;: 表示允许任何远程客户端通过2375端口连接DockerDaemon # &amp;#34;unix://var/run/docker.sock&amp;#34;: 本地客户端将通过这个来连接DockerDaemon { &amp;#34;hosts&amp;#34;: [ &amp;#34;tcp://0.0.0.0:2375&amp;#34;, &amp;#34;unix://var/run/docker.sock&amp;#34; ] } # 重启DockerDaemon服务 systemctl daemon-reload # 重启Docker服务 systemctl restart docker # 查看2375端口是否已经放开 netstat -lnp | grep 2375 安装Portainer容器: # 创建Portainer容器相关目录 mkdir -p /opt/portainer/docker.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/qa/JB2-2-Docker-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/qa/JB2-2-Docker-QA/</guid><description> Docker是干什么用的？ Docker的镜像和Docker的容器是什么关系？ 如何查看Docker的版本？ 如何启动Docker引擎？ 如何设置Docker引擎开机自启动？ 如何查看Docker引擎当前是开启状态还是关闭状态？ 为何要配置Docker引擎的国内加速器？ 哪个命令用于搜索镜像？ 哪个命令用于拉取镜像？ 哪个命令用于展示所有镜像？ 哪个命令用于删除指定镜像？ 可以通过镜像ID来删除指定镜像吗？ 可以仅通过镜像名称来删除指定镜像吗？ 删除镜像前，必须先删除该镜像下所关联的所有的容器吗？ 如何创建并启动一个容器？ 如何展示当前运行的全部容器？ 如何展示当前运行的和未运行的全部容器？ 如何强制删除一个容器？ 如何重启一个容器？ 如何停止一个容器？ Docker Run命令中的 -i 和 -t 参数是干什么用的？ Docker Run命令中的 -d 参数是干什么用的？ Docker Run命令中的 --name 参数是干什么用的？ Docker Run命令中的 -p 参数是干什么用的？ Docker Run命令中的 -v 参数是干什么用的？ 哪个命令用于进入一个容器的内部？ 哪个命令可以从一个容器的内部退出？ 1Panel是干什么用的？ 如何给一个目录最高权限？ 哪个命令用于将一个容器打包成一个镜像？ 哪个命令用于将一个镜像备份到指定目录中？ 哪个命令用于将一个tar文件恢复成一个镜像？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-MySQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-MySQL/</guid><description>S01. Win安装MySQL E01. 卸载MySQL服务端 武技：在Win中卸载MySQL服务端
在计算机服务中停止MySQL80服务。 使用 sc delete MySQL80 命令删除MySQL80服务。 在控制面板中卸载MySQL80服务。 在资源管理器中删除 Program Files/Program Files(x86)/Program Data 中MySQL相关目录。 在注册表中删除： HKEY_LOCAL_MACHINE\SYSTEM\ControlSetXXX\Services\Eventlog\Application 中MySQL相关目录。 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application 中MySQL相关目录。 重启电脑，卸载完成。 E02. 安装MySQL服务端 武技：在Win中安装MySQL服务端
安装MySQL服务端：傻瓜式安装即可： 2502/2503错误：对 C:\Windows\Temp 文件右键属性 -&amp;gt; 安全 -&amp;gt; 添加everyone权限（完全控制）。 res：资源/图片/MySQL80安装图解/* 配置MySQL自启动：在计算机服务中，右键更改MySQL80服务的启动类型为手动。 配置MySQL环境变量： MYSQL_HOME = MYSQL80的家目录 Path = %MYSQL_HOME%\bin 测试MySQL相关命令： cmd：net start/stop mysql80: 启动/关闭MySQL服务。 cmd：mysqladmin --version：查看MySQL版本。 cmd：mysql [-D库名] [-hlocalhost] -uroot -p：登录MySQL服务。 执行计划详解 id：执行计划编号，1条SQL可以产生1或N条执行计划： 如果 id 值相同，语句会从上到下执行。 如果 id 值不同，id 值大的那条SQL语句先执行。 select_type：查询类型，即展示当前的查询是一个什么样的查询： SIMPLE：该查询不包含子查询或union查询。 PRIMARY：该查询包含子查询，即该查询是一个父查询。 SUBQUERY：该查询是一个子查询。 DEPENDENT SUBQUERY：该查询是一个关联子查询。 UNION：该查询是一个union查询。 UNION RESULT：union查询的结果集，被放到临时表中。 table：显示这一行数据是关于哪张表。 partitions：对于分区表显示分区编号，null表示未分区。 type：表示本次查询所使用的方式，除null外，效率从上到下依次降低，最好将sql提升至range以上： NULL：该查询未访问任何一个表或索引，直接返回结果，效率最高。 SYSTEM：是 CONST 的一个特例，前提是你的表中只有一行数据，效率比 CONST 更快。 CONST：该查询通过索引一次就找到了结果，相当于读了常量，一般可能出现于对唯一约束的定值查询中。 EQ_REF：该查询在连表查询中，关联字段均为唯一约束，且查询的字段是主键或关联字段。 REF：该查询按照索引精准查询，且这个索引列是不唯一的，最终返回单条记录。 REF_OR_NULL：类似于 REF，但是额外包括了对NULL值列的查询。 RANGE：该查询按照索引范围查询，如对索引进行了 between、&amp;gt;、&amp;lt;、in 等操作。 INDEX：该查询按照索引全表扫描。 ALL：该查询未使用索引，进行了全表扫描，性能最差。 possible_keys：列出所有添加了索引的字段的索引名，但这些不一定会被全部使用。 key：实际使用到的索引名，这个值会从 possible_keys 中选取，null表示实际上没有使用到任何索引。 key_len：索引字段可能的最大的字节长度，底层自己计算，并非数据的实际长度，不丢失精度的前提下越小越好。 ref：该查询中的关联字段，常量会显示 const。 rows：表示mysql认为它在找到正确结果之前必须扫描的行数，最理想的结果是1，该值为抽样统计，并不十分准确。 filtered：利用率，表示真实的结果的行数占总计扫描到的行数的百分比，利用率越大越好。 extra：备注，这里的大多数选项会对查询产生负面影响： distinct：表示使用了优化 distinct 操作。 no tables used：表示查询中没有 from 表的语句或者 from dual。 not exists：表示在某些 left join 的查询中，mysql使用了更优化的查询。 using where：表示该查询使用了where条件查询。 using index：表示该查询使用了索引查询。 using temporary：表示该查询使用了临时表保存中间结果，性能差。 using filesort：表示该查询使用了相应的排序算法进行排序，但无法使用索引完成排序。 SQL优化细则 在经常查询的字段上建立索引。 多使用SQL的内置函数。 SQL中的关键字都大写，因为数据库总是先解析SQL语句，把小写的字母转换成大写的再执行。 只要有可能，在程序中尽量多使用 COMMIT，因为它可以释放一些资源： 包括回滚段上用于恢复数据的信息。 包括被程序语句获得的锁。 包括redo log buffer中的空间。 包括数据库为管理上述3种资源中的内部花费。 在索引列上使用NOT会导致索引失效。 避免触发隐式转换，如果字段是字符类型，就不要用数组类型的值，且如果恰好是索引列，索引会失效。 把大筛选量的 WHERE 往后排，因为数据库采用自后而前的顺序解析WHERE条件，根据这个原理，那些可以过滤掉最大数量记录的WHERE条件尽量写在所有WHERE条件的末尾。 全查中避免使用 *，mysql在解析的过程中，会将 * 依次转换成所有的列名，这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间，虽然这个时间几乎可以忽略，但是 * 的代码可读性仍然很差。 删表记录时，用 TRUNCATE 替代 DELETE，当删除表中的记录时，在通常情况下，回滚段(rollback segments) 用来存放可以被恢复的信息，如果你没有COMMIT事务，数据库会将数据恢复到删除之前的状态，准确地说是恢复到执行删除命令之前的状态，而当运用 TRUNCATE 时, 回滚段不再存放任何可被恢复的信息，当命令运行后，数据不能被恢复，因此很少的资源被调用，执行时间也会很短。 多使用表的别名，当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个字段上，这样一来，就可以减少解析的时间并减少那些由列名歧义引起的语法错误。 用 NOT EXISTS 替代 NOT IN，在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行联接，在这种情况下，使用 EXISTS 或 NOT EXISTS 通常将提高查询的效率。在写成外连子查询中，NOT IN 子句将执行一个内部的排序和合并，无论在哪种情况下，NOT IN 都是最低效的，因为它对子查询中的表执行了一个全表遍历。 用 EXISTS 替换 DISTINCT，当提交一个包含一对多表信息的查询时，避免在SELECT子句中使用 DISTINCT，一般可以考虑用 EXIST 替换，因为RDBMS核心模块将在子查询的条件一旦满足后，立刻返回结果。 避免在索引列上进行计算，避免在索引列上使用计算，会导致索引失效。 多使用 &amp;gt;= 替代 &amp;gt;，两者的区别在于，&amp;gt;3 首先定位到 ID=3 的记录并且向后扫描到第一个ID大于3的记录，而 &amp;gt;=3 将直接跳到第一个 ID=3 的记录。 用UNION替换OR (适用于索引列) ，通常情况下，用UNION替换WHERE子句中的OR将会起到较好的效果，对索引列使用OR将造成全表扫描。注意，以上规则只针对多个索引列有效，如果字段没有被索引，查询效率可能会因为你没有选择OR而降低。 避免在索引列上使用 IS NULL 和 IS NOT NULL ，避免在索引中使用任何可以为空的列，数据库将无法使用该索引。对于单列索引，如果列包含空值，索引中将不存在此记录。对于复合索引，如果每个列都为空，索引中同样不存在此记录。如果至少有一个列不为空，则记录存在于索引中。举例：如果唯一性索引建立在表的A列和B列上，并且表中存在一条记录的A，B 值为(123，null)， 数据库将不接受下一条具有相同A，B值（123，null）的记录(插入) 。若所有的索引列都为空，数据库将认为整个键值为空而空不等于空。因此你可以插入1000条具有相同键值的记录，当然它们都是空，因为空值不存在于索引列中，所以WHERE子句中对索引列进行空值比较将使索引失效。 需要当心的WHERE子句，某些SELECT语句中的WHERE子句会让索引失效，这里有一些例子： !</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-Oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/frag/%E6%AE%8B%E5%8D%B7-Oracle/</guid><description>CH1. Oracle基础入门 数据库就是存放与操作数据的库： 数据库能够存储大量的数据，方便检索和访问。 数据库可以保持信息的一致和完整，还可以通过组合分析，得到新的有用的信息等。 越大的数据库安全性越高，数据负载能力越强，价格也越贵。 Oracle是甲骨文公司生产的，目前最流行CS体系结构的数据库之一： oracle数据库环境，在一台机器上只有一个。 一个数据库环境下，可以有多个oracle实例（DCA）。 一个数据库实例的本质就是一组后台进程。 每个数据库实例下都有多组独立的用户，用户名不能重复。 数据库中的数据最终将存到表中。 通过指定的用户去访问，且在一个用户下表名不能重复。 CH2. Oracle服务安装 卸载服务端 计算机 &amp;gt; 管理 &amp;gt; 服务 &amp;gt; 终止所有oracle开头的服务； cmd &amp;gt; sc delete + oracle服务名 &amp;gt; 删除服务； regedit &amp;gt; 删除以下目录下的所有oracle入口： HKEY_LOCAL_MACHINE\SOFTWARE 下； HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet(X)\Services 下； HKEY_CLASSES_ROOT 下； 从启动组和程序菜单中，删除oracle的文件夹和图标； 重启电脑，多次试验表明，不重启就卸载不干净； 删除E盘，和C盘中的oracle文件夹； 安装服务端 数据库安装之前确认信息： 确保计算机没有安装过Oracle或已卸载干净。 确保自己是管理员账户。 防火墙和用户控制必须关闭。 计算机名必须不能是中文名。 安装全局数据库： 数据库的运行环境 &amp;raquo; DateBase(DB) 安装数据库实例： 安装环境下的一个真实的数据库 &amp;raquo; Datebase Configuration Assistant(DCA); 数据库实例的名称长度不能超过7个字符。 安装监听器： 安装监听数据库操作 &amp;raquo; Net Configuration Assistant(NCA); 安装网络连接管理： 负责数据库的网络服务和帐号密码（一个连接） &amp;raquo; Net Manager(NM); 如果scott账户忘记解锁： cmd: sys as sysdba/123456789 登录 cmd: alter user scott account unlock 启动服务端 计算机 - 管理 - 服务 - windows平台下必须启动OracleServiceSID和一个监听： sys超级用户，具有sysdba角色 system是用户管理员，具有sysoper的角色 scott是示例用户，需要自定义解锁 利用DOS（管理员方式启动）登录数据库： cmd: sqlplus scott/tiger cmd: sqlplus scott as sysdba / scott：以sysdba的身份进入，拥有更多操作权限。 如果弹出协议适配器错误/无法初始化oracle调用界面： 设置一个Oracle的环境变量。 安装客户端 安装PLSQL，通过Session框登录： 如果PLSQL看不到我们的连接，可以先三次失败登录进入界面，然后选择 Tools -&amp;gt; Preferences -&amp;gt; Connection，然后选择OracleHome和OCI_library的路径。 CH3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/qa/JB2-3-MySQL-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/qa/JB2-3-MySQL-QA/</guid><description> 如何将MySQL卸载干净？ MySQL安装成功后必须配置环境变量吗？ 一台电脑总可以安装多个MySQL数据库吗？ 关系型数据库和非关系型数据库各自的优缺点是什么？ MySQL目前是哪家公司旗下的产品？ MySQL是免费开源的吗？ MySQL和Oracle的区别有哪些？ MySQL支持Java吗？ MySQL可以自己更改吗？ RDBMS是什么意思？ “冗余”是什么意思，“冗余”是好事吗？ MySQL的存储引擎有哪两种？什么区别？你用的是哪种？ 如何使用命令行启动和停止MySQL服务？ 如何将MySQL设置为开机不自启？ 如何使用Navicat创建一个用户？（简述） 使用Navicat创建一个连接的时候，如何保证其可以被远程访问？ 如何在命令行中使用root/root帐号登录MySQL? 如何退出命令行中的MySQL界面？ 如何查询自己安装的MySQL的版本？ 如何使用命令行创建数据库“test001”，并为其设置编码为“utf8mb4”？ 如何使用命令行删除一个数据库“test001”？ 如何使用命令行展示当前连接下的所有数据库？ 什么叫SQL？DDL？DML？DQL？DCL？ 所有数据库使用的SQL都是遵循同一标准吗？语句完全一样吗？ 查询都是以“select”开头的吗？ SQL语句区分大小写吗？表中的数据区分大小写吗？ SQL注释都有哪几种？ if()函数和ifnull()函数有什么区别？ distinct()函数是干嘛用的？只能作用于单一字段吗？ order by必须是SQL语句中最后一步执行的吗？ order by后面可以写多个字段吗？ and和or谁的优先级更高？ &amp;ldquo;in(100,200)&amp;rdquo; 和 &amp;ldquo;between 100 and 200&amp;rdquo; 有什么区别？ between&amp;hellip;and&amp;hellip;，包括两端的值吗？ 模糊查询一共有几种占位符？ 如何模糊查询名字中带百分号的，和名字中带单引号的？ 如何自定义MySQL中的转义字符？ group by分组查询的意义是什么？ 聚合函数只有分组的时候能用吗？ 什么时候要用having替换where？ 单行子查询、多行子查询和关联子查询各自的特点分别是什么？ MySQL中分页查询的关键字是什么？ MySQL中，你所总结的分页查询的公式是什么？ SQL92中联表和SQL99中联表的区别是什么？ 一张表可以自己联自己吗？ union 和 union all的区别是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/MySQL%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/MySQL%E6%90%AD%E5%BB%BA%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/</guid><description>S01. MySQL搭建主从架构 E01. 主从复制流程 1. 配置主服务器 心法：配置MySQL主服务器 mysql-master
需要为主服务器配置一个数字类型的唯一标识ID。 主服务器需要启用二进制日志功能，用于记录所有更改的SQL语句。 2. 配置从服务器 心法：配置MySQL主服务器 `mysql-slave
需要为从服务器配置一个数字类型的唯一标识ID。 每个从服务器都需要指定主服务器的主机名，端口号等信息，以便从服务器可以连接到主服务器。 3. 启动主从复制 将从服务器连接到主服务器并启动主从复制。 需要在从服务器上指定从哪个二进制日志文件 File 的哪个位置 Position 开始复制数据。 从服务器连接到主服务器并请求从指定二进制日志位置开始复制数据。 4. 开始复制数据 主服务器将二进制日志中的更改发送到从服务器。 从服务器读取并应用这些更改，以便从服务器上的数据与主服务器上的数据保持同步。 武技: 在Docker中搭建MySQL集群容器 - 1主1从，读写分离
E02. 搭建Master节点 1. 准备相关目录 # 创建MySQL主节点容器相关目录 mkdir -p /opt/mysql/cluster/master/conf; mkdir -p /opt/mysql/cluster/master/data; mkdir -p /opt/mysql/cluster/master/log; chmod -R 777 /opt/mysql; 2. 创建配置文件 开发 my.cnf 配置文件：用于使MySQL容器支持utf8mb4编码和加8时区： touch /opt/mysql/cluster/master/conf/my.cnf
[client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4 [mysqld] character-set-client-handshake = FALSE character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci default-time-zone = &amp;#39;Asia/Shanghai&amp;#39; default_authentication_plugin = mysql_native_password # 每个节点都有一个唯一标识，只能为数字且不能重复 server_id = 01 # binlog日志名称，随意 log-bin = log-bin-master # 主从复制过程，忽略mysql本身的变化，只关注业务数据的变化 binlog-ignore-db = mysql # binlog日志缓存大小 binlog_cache_size = 1M # 主从复制模式为混合模式 binlog_format = mixed # binlog日志过期时间，默认为0，表示永不过期 expire_logs_days = 7 3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/%E5%91%98%E5%B7%A5%E5%92%8C%E9%83%A8%E9%97%A8SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/res/%E5%91%98%E5%B7%A5%E5%92%8C%E9%83%A8%E9%97%A8SQL/</guid><description>-- 部门表 CREATE TABLE dept ( deptno INT PRIMARY KEY, -- 部门编号 dname VARCHAR(14), -- 部门名称 loc VARCHAR(13), -- 部门地址 created datetime, -- 创建时间 updated datetime -- 修改时间 ); INSERT INTO dept VALUES (10, &amp;#39;ACCOUNTING&amp;#39;, &amp;#39;NEW YORK&amp;#39;, now(), now()), (20, &amp;#39;RESEARCH&amp;#39;, &amp;#39;DALLAS&amp;#39;, now(), now()), (30, &amp;#39;SALES&amp;#39;, &amp;#39;CHICAGO&amp;#39;, now(), now()), (40, &amp;#39;OPERATIONS&amp;#39;, &amp;#39;BOSTON&amp;#39;, now(), now()); -- 员工表 CREATE TABLE emp ( empno INT PRIMARY KEY, -- 员工编号 ename VARCHAR(10), -- 员工名称 job VARCHAR(9), -- 工作 mgr DOUBLE, -- 直属领导编号 hiredate DATE, -- 入职时间 sal DOUBLE, -- 工资 comm DOUBLE, -- 奖金 deptno INT, -- 部门号 created datetime, -- 创建时间 updated datetime, -- 修改时间 FOREIGN KEY (deptno) REFERENCES dept (deptno) ); INSERT INTO emp VALUES (7369, &amp;#39;SMITH&amp;#39;, &amp;#39;CLERK&amp;#39;, 7902, &amp;#39;1980-12-17&amp;#39;, 800, NULL, 20, now(), now()), (7499, &amp;#39;ALLEN&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-02-20&amp;#39;, 1600, 300, 30, now(), now()), (7521, &amp;#39;WARD&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-02-22&amp;#39;, 1250, 500, 30, now(), now()), (7566, &amp;#39;JONES&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839, &amp;#39;1981-04-02&amp;#39;, 2975, NULL, 20, now(), now()), (7654, &amp;#39;MARTIN&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-09-28&amp;#39;, 1250, 1400, 30, now(), now()), (7698, &amp;#39;BLAKE&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839, &amp;#39;1981-05-01&amp;#39;, 2850, NULL, 30, now(), now()), (7782, &amp;#39;CLARK&amp;#39;, &amp;#39;MANAGER&amp;#39;, 7839, &amp;#39;1981-06-09&amp;#39;, 2450, NULL, 10, now(), now()), (7788, &amp;#39;SCOTT&amp;#39;, &amp;#39;ANALYST&amp;#39;, 7566, &amp;#39;1987-07-13&amp;#39;, 3000, NULL, 20, now(), now()), (7839, &amp;#39;KING&amp;#39;, &amp;#39;PRESIDENT&amp;#39;, NULL, &amp;#39;1981-11-17&amp;#39;, 5000, NULL, 10, now(), now()), (7844, &amp;#39;TURNER&amp;#39;, &amp;#39;SALESMAN&amp;#39;, 7698, &amp;#39;1981-09-08&amp;#39;, 1500, 0, 30, now(), now()), (7876, &amp;#39;ADAMS&amp;#39;, &amp;#39;CLERK&amp;#39;, 7788, &amp;#39;1987-07-13&amp;#39;, 1100, NULL, 20, now(), now()), (7900, &amp;#39;JAMES&amp;#39;, &amp;#39;CLERK&amp;#39;, 7698, &amp;#39;1981-12-03&amp;#39;, 950, NULL, 30, now(), now()), (7902, &amp;#39;FORD&amp;#39;, &amp;#39;ANALYST&amp;#39;, 7566, &amp;#39;1981-12-03&amp;#39;, 3000, NULL, 20, now(), now()), (7934, &amp;#39;MILLER&amp;#39;, &amp;#39;CLERK&amp;#39;, 7782, &amp;#39;1982-01-23&amp;#39;, 1300, NULL, 10, now(), now());</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/frag/%E6%AE%8B%E5%8D%B7-JSP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/frag/%E6%AE%8B%E5%8D%B7-JSP/</guid><description>JSP概念入门 JSP（Java Server Pages）是由Sun公司倡导，许多公司参与一起建立的一种动态网页技术标准。它是在传统的网页HTML文件中插入java代码段（Scriptlet）和JSP标记（Tag），从而形成jsp文件（*.jsp）。 公式：JSP = HTML + JAVA + JSP自己的标签。 Servlet是JSP的技术基础，大型的Web项目需要JSP和Servlet配合，你的JSP最终会变成一个完整的servlet在web应用中运行，它与其他的servlet大体相似，只不过这个servlet是由容器为你编写。 JSP标签 指令标签 指令主要用于为转换阶段提供整个JSP页面的相关信息，指令不会产生任何的输出到当前的输出流中： 指令有三种：page、include和taglib。 指令元素的语法是：&amp;lt;%@ 指令 {属性=&amp;quot;值&amp;quot;} %&amp;gt; page：主要是为容器提供一些信息，容器把你的JSP转换为Servlet的时候需要用到这些信息： 属性import：定义java的import语句，所定义的语句会自动增加到生成的Servlet类中。 属性isThreadSafe：默认为true，如果改为false，代表改Servlet使用SingleThreadModel，并不建议这么修改。 属性contentType：定义JSP响应的MIME类型。 属性isELIgnored：默认为false，如果改为true，代表在页面忽略EL语法。 属性isErrorPage：默认为false，如果改为true，代表这个JSP为其它某个JSP的错误页面，可以使用exception内置对象。 属性errorPage：指定一个JSP路径，这个路径是一个错误JSP页面，如果本页面发生异常，将异常发送到你指定的错误JSP页面中进行处理。 属性language：定义了页面可使用的语言，目前只有java。 属性session：默认为true，如果改为false，则本页面无法使用session对象。 属性pageEncoding：定义JSP的字符编码，默认ISO-8859-1。 taglib：主要定义JSP可以使用的标记库，如c标签，s标签等。 include：主要定义在转换过程中，添加到当前页面的文本和代码，从而达到代码重用。 武技：使用page指令导入包
&amp;lt;!--java.lang/javax.servlet/javax.servlet.http/javax.servlet.jsp 这四个包是默认导入的--&amp;gt; &amp;lt;%@ page language=&amp;#34;java&amp;#34; import=&amp;#34;java.util.*,java.text.*&amp;#34; pageEncoding=&amp;#34;UTF-8&amp;#34; %&amp;gt; Scriptlet代码 JSP中可以使用Scriptlet放入常规的Java代码，所谓的Scriptlet就是放在 &amp;lt;%...%&amp;gt; 标记中的Java代码。 武技：Scriptlet代码
&amp;lt;% out.println(User.getName()); %&amp;gt; &amp;lt;% String path = request.getContextPath(); %&amp;gt; 表达式代码 表达式元素可以视为Scriptlet代码（java代码段）的简洁写法，如： &amp;lt;%= User.getName() %&amp;gt; &amp;lt;%= path %&amp;gt; 注意表达式后面不能添加分号： 因为容器看到 &amp;lt;%=User.getName()%&amp;gt; 的时候，会将其转换成 &amp;lt;% out.println(User.getName()); %&amp;gt; 写法。 如果你添加了分号，会变成 &amp;lt;% out.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/res/%E5%B0%8F%E8%AF%B4-Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/res/%E5%B0%8F%E8%AF%B4-Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>Servlet生命周期小说
CH1. 启动服务器 我叫 HelloServlet.class，我是一个字节码文件，我出生在一个混沌的世界中，我对出生的印象很模糊，不知道自己的父母是谁。
我听见有人在敲我的门，打开门后看见的是一个一脸严肃的人。
&amp;ldquo;你好，我叫类加载器，特意来要带你离开这里。&amp;rdquo;
&amp;ldquo;带我去哪里？&amp;rdquo;
&amp;ldquo;Tomcat服务器已经启动了，我需要把一些类加载到内存中去&amp;hellip;&amp;rdquo;
&amp;ldquo;所有的类都要加载吗？&amp;rdquo;
&amp;ldquo;不，只需要一些特殊的类，它们都是 HttpServlet 的孩子&amp;hellip;&amp;rdquo;
&amp;ldquo;你是怎么找到我的？&amp;rdquo;
&amp;ldquo;Web容器手里有一份部署文件名单 web.xml，我通过上面的地址 &amp;lt;servlet-class&amp;gt;/@WebServlet 找到了你，你是最后一个。&amp;rdquo;
“我一直想问，我是从哪来的？是你口中那个Web容器创造的我吗？”
&amp;ldquo;没错，服务器启动的时候，Web容器就已经根据 HelloServlet.java 来编译创造了你，它是你的本体。&amp;rdquo;
&amp;ldquo;那我的本体现在在哪？&amp;rdquo;
&amp;ldquo;因为它比较重要，所以它不会被发布到服务器，仍在硬盘世界里，你是找不到它的，其余更多的内容你就不要再问了。&amp;rdquo;
我哦了一声，跟着它终于来到了服务器中，映入眼帘的是一个公告板，上面写着一句话：“项目的首页是index.html”。
“这是什么意思？”我指着公告板问类加载器。
他回答我说：“这个板子只有一个，它叫做 ServletContext，上面的是整个工程的配置信息，所有的Servlet都能看见这块板子&amp;quot;。
我点点头，然后被他带进了一个名字叫做 WEB-INF/classes 的房间中。
&amp;ldquo;接下来我要干点什么？&amp;rdquo;
&amp;ldquo;什么都不用做，等着就行了，会有人来找你的，我得走了，再见！&amp;rdquo;
CH2. 来请求了 浑浑噩噩中，突然脑袋上方传来一个声音：&amp;ldquo;醒一醒！&amp;rdquo;
我被吓了一跳，连忙问道：“你是谁？”
“我是Web容器，有客户发请求了，想要访问你，现在把你的 init() 方法执行一下，这里有一张你的任务清单，每一个Servlet都会有一张，拿好了。&amp;quot;
我伸手拿过这张任务清单，上面的标题是：servletConfig ，上面已经详细的纪录了我的所有出生信息和初始化参数，但是最不能让我容忍的是，我居然有一个工作小名，叫abc。”
&amp;ldquo;没问题，但是我的 init() 方法里什么都没有，是不是就不用做什么了？&amp;rdquo;
&amp;ldquo;嗯对。&amp;rdquo;
Web容器话音未落，身后已经多了一个人，他对我说道：“你好，我是一个线程，我叫0x9527，是老大分配过来的。”
&amp;ldquo;你要做什么？&amp;rdquo;
&amp;ldquo;我需要把你的 service() 执行一下，正好我刚拿到老大创建的 request 和 response。对了，用户发送的是一个get请求，service() 方法会自动调用 doGet() ，并且把这两个参数传递给 doGet() 方法，然后我要执行它里面的内容！&amp;rdquo;
话音未落，突然身后又多了一个人，他对我说道：“你好，我是一个线程，我叫0x9528，是老大分配过来的。”
&amp;ldquo;又来一个？&amp;rdquo;
我回过身问0x9527怎么办，0x9527淡定地回复我说：“没关系，我们所有线程都可以同时工作，互相不干扰，因为我们谁都没有带锁，如果涉及到共享数据，我们可能会干一架，你在旁边看就好了。”
过了几分钟，两个人都把活干完了，并且他们的请求已经得到了正确的响应，然后他们先后对我说了再见，并且回到了线程池中，临走的时候0x9527还把那两个参数随手一扔，跟我说这两个参数已经没有什么用了，扔地上吧，一会儿GC大妈会过来处理。
CH3. 关闭服务器 我的生活就在这里日复一日，直到有一天，头顶又传来那个讨厌的声音：“abc！服务器要重启了！请调用一下你的 destroy() 方法，留最后的遗言！”
&amp;ldquo;可是我的 destroy() 方法中没有任何代码.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/frag/%E6%AE%8B%E5%8D%B7-HTML5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/frag/%E6%AE%8B%E5%8D%B7-HTML5/</guid><description>H5-绘图画布Canvas &amp;lt;canvas&amp;gt; 是HTML5中的一个画布容器标签，需要借助canvas的API和JS操作来实现画图等操作。 &amp;lt;canvas&amp;gt; 只有 width/height 两个可选属性，默认300px宽，150px高： 设置画布容器的宽高时，尽量按2比1的比例扩张或者缩放，否则容易发生图形扭曲。 &amp;lt;canvas&amp;gt; 中的文字或 &amp;lt;img&amp;gt; 图片仅在浏览器不支持该标签时才会展示。 &amp;lt;canvas&amp;gt; 中的元素都以画布的 [0,0] 圆点为相对点来设置坐标。 在JS中获取Canvas核心对象： document.querySelector('#canvas').getContext('2d')：单词 2d 不能大写。 武技：在HTML中布局Canvas容器，并在JS中获取Canvas核心对象
&amp;lt;style&amp;gt; .body { margin-top: 10px; text-align: center; } .body canvas { background: wheat; } &amp;lt;/style&amp;gt; &amp;lt;section class=&amp;#34;body&amp;#34;&amp;gt; &amp;lt;canvas id=&amp;#34;canvas&amp;#34; width=&amp;#34;600&amp;#34; height=&amp;#34;300&amp;#34;&amp;gt;您的浏览器不支持Canvas画布&amp;lt;/canvas&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;script&amp;gt; onload = () =&amp;gt; { // 获取canvas核心对象 let canvas = document.querySelector(&amp;#39;#canvas&amp;#39;).getContext(&amp;#39;2d&amp;#39;); if (!canvas) { alert(&amp;#39;您的浏览器不支持Canvas画布&amp;#39;); return; } console.log(&amp;#39;您的浏览器支持Canvas画布&amp;#39;) } &amp;lt;/script&amp;gt; 绘制路径 路径是图形的核心，从下笔的起点到终点，最终会形成一个闭合图形： 线段，圆形，多边形等属于路径，需要设置起始/关闭路径。 矩形，文字，图片等不属于路径，可以不用设置起始/关闭路径，但设置上也无妨。 设置画笔相关参数：建议在起始路径之前设置： canvas.lineWidth：画笔宽度。 canvas.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/qa/JB2-7-HTML5-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/qa/JB2-7-HTML5-QA/</guid><description> 如何理解&amp;quot;超文本标记语言&amp;quot;？ HTML5文件的两种后缀 .html 和 .htm 有什么区别？ HTML5中，单标签，双标签和组合标签有什么区别？ HTML5中，如何为一个标签添加属性？请举例说明。 HTML5中，id属性和name属性有什么区别？ HTML5中，如何添加注释？ HTML5中的文档声明是怎么编写的？ HTML5中，&amp;lt;html&amp;gt; 标签的作用是什么？ HTML5中，&amp;lt;head&amp;gt; 标签的作用是什么？ HTML5中，&amp;lt;body&amp;gt; 标签的作用是什么？ HTML5中，如何设置页面标题？ HTML5中，如何实现换行和空格的效果？ HTML5中，&amp;lt;hr&amp;gt; 标签的作用是什么？ HTML5中，&amp;lt;div&amp;gt; 标签和 &amp;lt;p&amp;gt; 标签的区别是什么？ HTML5中，&amp;lt;div&amp;gt; 新增了哪些语义化的新标签？ HTML5中，&amp;lt;div&amp;gt; 标签和 &amp;lt;span&amp;gt; 标签的区别是什么？ HTML5中，如何使文本加粗，倾斜以及添加下划线？ HTML5中，如何添加1到6号文字标题？ HTML5中，如何添加超链接标签，使用哪个属性设置跳转路径？ HTML5中，超链接标签中的 target 有哪些可选项，分别对应什么效果？ HTML5中，如何引入一张图片？ HTML5中，如何开发有序列表和无序列表，二者有什么区别？ HTML5中，开发一个最简表格都需要使用到哪个标签？ HTML5中，表格标签中的 &amp;lt;td&amp;gt; 和 &amp;lt;th&amp;gt; 有什么区别？ HTML5中，表格如何水平合并单元格，如何垂直合并单元格？ HTML5中，&amp;lt;form&amp;gt; 标签的作用是什么，使用哪个属性设置表单提交路径？ HTML5中，表单的GET方式提交和POST方式提交有什么区别？ HTML5中，表单可以设置 target 属性吗，有什么用？ HTML5中，&amp;lt;input&amp;gt; 中的 type 属性都有哪些可选值？ HTML5中，&amp;lt;input&amp;gt; 中的 disabled 属性和 readonly 属性有什么区别？ HTML5中，&amp;lt;input&amp;gt; 中的 placeholder 属性有什么用？ HTML5中，如何开发一个下拉菜单？ HTML5中，如何开发一个多行文本框？ HTML5中，如何开发一个普通按钮，提交按钮和重置按钮？ 如何理解&amp;quot;层叠式样式表&amp;quot;？ CSS3的继承性，优先级和层叠性？ CSS3的样式设计，从编写位置上，可以分为哪三种？ CSS3中的标签选择器，id选择器和class选择器有什么区别？ CSS3中，如何选择 &amp;lt;p class=&amp;quot;a&amp;quot;&amp;gt; 标签中全部的 &amp;lt;h4&amp;gt; 标签？ CSS3中，如何选择 &amp;lt;p class=&amp;quot;a&amp;quot;&amp;gt; 标签以及全部的 &amp;lt;h4&amp;gt; 标签？ CSS3中，对文本添加前景颜色样式有几种方式？ CSS3中，如何同时对文本添加加粗，倾斜和下划线样式？ CSS3中，如何对文本添加字号大小样式？ CSS3中，如何对容器添加内容居中样式？如何对容器添加自己居中样式？ CSS3中，如何对文本添加行高样式？ CSS3中，如何取消列表的项目标记？ CSS3中，如何显示表格的边框以及让单元格的边框折叠无缝隙？ CSS3中，如何对容器添加宽度，高度和背景颜色样式？ CSS3中，容器的外边距和内边距有什么区别？ CSS3中，盒模型的三种形态有什么区别？如何设置？ CSS3中，如何设置容器的背景图片？ CSS3中，使用 display:none 和 visibility:hidden 的区别是什么？ 如何理解JavaScript这门语言以及它和ECMAScript的关系？ ES6中，BOM和DOM的区别是什么？ ES6中，JS代码从编写位置上，可以分为哪三种？ ES6中，页面加载函数如何编写？在什么时机执行？ ES6中，如何将数据打印到控制台？控制台结果在哪里可以查看到？ ES6中，如何从DOM树中抓取一个 &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;&amp;lt;/button&amp;gt; 按钮元素？ ES6中，如何从DOM树中抓取全部 &amp;lt;button class=&amp;quot;a&amp;quot;&amp;gt;&amp;lt;/button&amp;gt; 按钮元素？ ES6中，如何为一个按钮元素挂载点击事件，鼠标移入事件，鼠标移出事件和丧失焦点事件？ ES6中，如何设计在点击一个按钮时，跳入百度页面。 ES6中，alert() 弹窗和 confirm() 弹窗有什么区别？ ES6中，innerText 属性和 innerHTML 属性有什么区别？ ES6中，如何使用JS代码提交 &amp;lt;form id=&amp;quot;loginForm&amp;quot;&amp;gt;&amp;lt;/form&amp;gt; 表单？ ES6中，使用 var 定义变量和 let 定义变量的区别是什么？ ES6中，如何定义一个常量？ ES6中，包含几种数据类型？ ES6中，=，== 和 === 三者有什么区别？ ES6中，允许字符串相减吗？什么效果？ ES6中，如何声明一个方法？ ES6中，如何使用不定长参数？ ES6中，若不使用 return 来指定返回值，则最终返回什么类型？ ES6中，函数中可以使用this关键字吗？表示什么？ ES6中，如何定义一个数组？如何遍历一个数组？ ES6中，JSON数据格式和数组数据格式的区别是什么？ ES6中，如何定义一个JSON对象？如何遍历一个JSON对象？ ES6中，如何向JSON对象中添加一个键值对？如何从JSON对象中删除一个指定的键值对？ ES6中，如何将JSON对象转换为一个字符串？如何将字符串解析为一个JSON对象？ ES6中，Cookie，SessionStorage和LocalStorage的区别是什么？ ES6中，Interval定时器和Timeout定时器的区别是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JavaScript/</guid><description>JS-异步调用AJAX Asynchronous Javascript And XML，简称AJAX，即异步的JS和XML组合技术，以异步的方式和服务器通信（交换数据），可以产生局部刷新页面数据的效果。 开发Ajax工具 武技：开发 ajax-util.js 工具
创建兼容性AJAX核心对象：负责与服务器通信： let xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXobject('Microsoft.xmlHTTP') 创建请求状态码监听函数：在请求状态码 xhr.readyState 发生改变时触发： xhr.onreadystatechange = () =&amp;gt; {}：必须写于 open() 之前。 xhr.readyState === 0：初始状态，尚未调用 open() 但请求代理已被创建。 xhr.readyState === 1：通信通道建立成功，即 open() 已被成功调用。 xhr.readyState === 2：请求已被服务器接收，即 send() 已被成功调用，此时头部和状态信息均可获得。 xhr.readyState === 3：请求处理中，此时 responseText 属性已经包含部分数据。 xhr.readyState === 4：请求已完成，表示响应已就绪。 xhr.readyState === 4 &amp;amp;&amp;amp; xhr.status === 200：请求已完成，且响应成功。 xhr.responseText/responseXML：响应成功时，获取TEXT类型/XML类型的响应内容。 建立通信通道：需指定请求方式，目标地址和是否异步： xhr.open(&amp;quot;GET&amp;quot;, &amp;quot;/api/v1/user/select&amp;quot;, true)：建立异步的GET请求。 xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;)：POST请求需要设置此请求头。 发送AJAX请求： xhr.send(data)：POST请求在 send() 参数中传递数据。 xhr.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JQuery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/frag/%E6%AE%8B%E5%8D%B7-JQuery/</guid><description>CH01. JQ基础入门 随着WEB2.0的兴起，JavaScript越来越受到重视，一系列JavaScript程序也蓬勃发展起来，从早期的prototype，DOJO到06年的jQuery，再到07年的ExtJs，互联网正在掀起异常JavaScript风暴，jQuery以其独特优雅的姿态，始终处于这场风暴的中心，受到越来越多的人追捧。&amp;ndash; 《锋利的jQuery》
JavaScript Query 简称JQuery或JQ，是一个于2006年发布的开源JS库，优化了HTML文档操作，事件处理，动画设计和Ajax交互等内容。 EP01. JQ加载函数 心法: JQ加载函数
JQ的加载函数在页面的DOM元素加载完毕后就立即执行，且多个加载函数同时生效并依次执行: ES5加载函数格式 ES6加载函数格式 $(function(){..}) $(() =&amp;gt; {..}) 武技: 测试JQ加载函数
开发页面 view/加载函数.html: &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;../static/script/jquery-3.6.0.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 开发脚本: $(document).ready(() =&amp;gt; console.log(&amp;#34;hello world 01...&amp;#34;)); $(() =&amp;gt; console.log(&amp;#34;hello world 02...&amp;#34;)); EP02. JQ对象转换 心法: JQ对象转换
JS对象和JQ对象方法不互通，但可以相互转换: document.querySelector('#div01'): 获取 HTMLXXXElement 类型的JS对象。 $(&amp;quot;#div01&amp;quot;): 获取 Object 类型的JQ对象。 JS对象转JQ对象 JQ对象转JS对象: JQ对象 = $(JS对象) JS对象 = JQ对象[0] 或 JS对象 = JQ对象.get(0) 武技: 测试JQ对象转换
开发页面 view/对象转换.html: &amp;lt;section id=&amp;#34;msg&amp;#34;&amp;gt;你好&amp;lt;/section&amp;gt; &amp;lt;button id=&amp;#34;convert-btn&amp;#34; type=&amp;#34;button&amp;#34;&amp;gt;测试对象转换&amp;lt;/button&amp;gt; 开发脚本: $(() =&amp;gt; { document.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/ajax-util.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/ajax-util.js/</guid><description>/* * 封装ajax()方法，负责利用AJAX发送请求，参数是一个JSON数据: * url: AJAX请求目标地址，必写。 * type: AJAX发送请求的方式，默认为GET。 * async: AJAX是否开启异步，默认为异步true，改为false则表示同步。 * data: POST方式使用JSON类型的date传值，GET方式使用查询串进行传值。 * success: 回调函数，ajax帮我们调用的一个函数，函数的第一个参数中包含了响应的数据。 */ function ajax(params) { // 获取JSON参数中的url值 let url = params[&amp;#34;url&amp;#34;]; // 若JSON参数中的url为空，则直接使用return结束函数调用 if (!url) { alert(&amp;#34;参数url不能为空！&amp;#34;); return; } // 创建兼容性AJAX核心对象: 负责与服务器通信 let xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXobject(&amp;#39;Microsoft.xmlHTTP&amp;#39;); // 获取JSON参数中的type值，并强制转为大写，默认值GET let type = params[&amp;#34;type&amp;#34;] ? params[&amp;#34;type&amp;#34;].toUpperCase() : &amp;#34;GET&amp;#34;; // 获取JSON参数中的async值，默认值true, 表示异步发送请求 let async = params[&amp;#34;async&amp;#34;] ? params[&amp;#34;async&amp;#34;] : true; // 创建请求状态码监听函数: 在请求状态码 `xhr.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/jquery-3.6.0.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/jquery-3.6.0.js/</guid><description>/*! * jQuery JavaScript Library v3.6.0 * https://jquery.com/ * * Includes Sizzle.js * https://sizzlejs.com/ * * Copyright OpenJS Foundation and other contributors * Released under the MIT license * https://jquery.org/license * * Date: 2021-03-02T17:08Z */ ( function( global, factory ) { &amp;#34;use strict&amp;#34;; if ( typeof module === &amp;#34;object&amp;#34; &amp;amp;&amp;amp; typeof module.exports === &amp;#34;object&amp;#34; ) { // For CommonJS and CommonJS-like environments where a proper `window` // is present, execute the factory and get jQuery.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/prototype.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/prototype.js/</guid><description>/* Prototype JavaScript framework, version 1.7.2 * (c) 2005-2010 Sam Stephenson * * Prototype is freely distributable under the terms of an MIT-style license. * For details, see the Prototype web site: http://www.prototypejs.org/ * *--------------------------------------------------------------------------*/ var Prototype = { Version: &amp;#39;1.7.2&amp;#39;, Browser: (function(){ var ua = navigator.userAgent; var isOpera = Object.prototype.toString.call(window.opera) == &amp;#39;[object Opera]&amp;#39;; return { IE: !!window.attachEvent &amp;amp;&amp;amp; !isOpera, Opera: isOpera, WebKit: ua.indexOf(&amp;#39;AppleWebKit/&amp;#39;) &amp;gt; -1, Gecko: ua.indexOf(&amp;#39;Gecko&amp;#39;) &amp;gt; -1 &amp;amp;&amp;amp; ua.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/Drawing-2024-06-29-10.48.32.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/Drawing-2024-06-29-10.48.32.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 6 0 0 ^p3dcROO4
背景中的 僵尸区域
宽度 400 ^k2UiMXXB
背景图片 1400 ^0iVV8nWC
背景中的 植物区域
宽度 1000 ^dpwg8sAH
1400 ^DU3rFy8j
-400 ^crcz8rAG
900 ^R6zChSNX
600 ^9OO9H28Y
0 ^8mSUwClU
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 761, &amp;#34;versionNonce&amp;#34;: 568927326, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;FrQQZox60fn1IWRJpVGLb&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -400, &amp;#34;y&amp;#34;: -200, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 540, &amp;#34;height&amp;#34;: 200, &amp;#34;seed&amp;#34;: 2032023326, &amp;#34;groupIds&amp;#34;: [ &amp;#34;mmeSEfRvXZ_CGtWvr4yqG&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;dpwg8sAH&amp;#34; } ], &amp;#34;updated&amp;#34;: 1719630341625, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;id&amp;#34;: &amp;#34;dpwg8sAH&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;x&amp;#34;: -178.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/PVZ%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/PVZ%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</guid><description>PVZ 基础知识 HTML HTML代码结构 DIV id SPAN id IMG id src title AUDIO loop autoplay src CSS CSS代码结构 如何引入CSS样式 基础样式 width height background-color background-image background-position-x font-size font-weight cursor opacity 盒模型样式 margin padding box-sizing border-radius border visibility display overflow 定位样式 position left top z-index JS 如何引入JS文件 基础 加载函数 函数设计 匿名函数 输出语句 获取元素 dom doms 创建元素 div img 设计元素内容 innerHTML parseInt() 设计元素样式 o.style.left o.offsetLeft 追加元素 删除元素 事件 onclick oncontextmenu 阻止默认行为 onmousemove clientX clientY 逻辑 if for 与 或 非 定时器 setTimeout setInterval 项目实战 引入文件夹 img 图片包 music 音乐包 util 工具包 首页-布局 首页-样式</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/res/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/%E6%A4%8D%E7%89%A9%E5%A4%A7%E6%88%98%E5%83%B5%E5%B0%B8/</guid><description>S01. 环境搭建 E01. 引入图片包 img/* E02. 封装工具包 方法 描述 dom(selector) 获取单个DOM元素 doms(selector) 获取多个DOM元素 div(position = 'absolute', zIndex = '1') 创建一个DIV元素，默认绝对定位，Y轴1 img(url, position = 'absolute', zIndex = '1') 创建一个IMG元素，默认绝对定位，Y轴1 random(m) 返回 0 到 m 之间的随机浮点数，包括 0，但不包括 m 1. 封装通用工具 util/common.js
// 游戏界面：宽度，高度 const MAIN_WIDTH = 1000, MAIN_HEIGHT = 600; // 僵尸区域：宽度，高度 const ZOMBIE_AREA_WIDTH = 400, ZOMBIE_AREA_HEIGHT = 600; // 僵尸：宽度，高度，起始数量 const ZOMBIE_WIDTH = 166, ZOMBIE_HEIGHT = 144, ZOMBIE_COUNT = 5; // 阳光：宽度，高度 const SUN_WIDTH = 78, SUN_HEIGHT = 78; // 草坪：宽度，最大宽度，高度，上距离, 左距离 const SOD_WIDTH = 70, SOD_MAX_WIDTH = 739, SOD_HEIGHT = 120, SOD_TOP = 280, SOD_LEFT = 250; // 子弹：宽度 const PB_WIDTH = 55; /** * 获取单个DOM元素 * * @param selector 选择器字符串 */ function dom(selector) { return document.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-1-MyBatis/frag/%E6%AE%8B%E5%8D%B7-MyBatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-1-MyBatis/frag/%E6%AE%8B%E5%8D%B7-MyBatis/</guid><description>MyBatis Maven打包XML文件 Maven项目在打包时仅会将 src/main/java 中的 .java 文件进行打包，若希望将该包下的 .xml 文件一并打包，则需要在 pom.xml 中的 &amp;lt;build&amp;gt; 中进行如下配置：
pom.xml
&amp;lt;!--设置maven打包时将*Mapper文件一并打包--&amp;gt; &amp;lt;resources&amp;gt; &amp;lt;resource&amp;gt; &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt; &amp;lt;includes&amp;gt; &amp;lt;include&amp;gt;**/*Mapper.xml&amp;lt;/include&amp;gt; &amp;lt;/includes&amp;gt; &amp;lt;/resource&amp;gt; &amp;lt;/resources&amp;gt; MyBatisGenerator MyBatis Generator 是官网提供的根据数据表生成对应的实体类，Mapper配置，Mapper接口，MyBatis主配等文件的一个工具，仅支持单表。
添加依赖：
org.mybatis.mybatis(3.5.1) mybatis.mysql-connector-java(8.0.15)(runtime) org.mybatis.generator.mybatis-generator-core(1.3.2) 在工程的根目录下（非classpath下）开发主配 mbg.xml：
&amp;lt;plugin&amp;gt;：配置逆向工程插件，如序列化，主配文件等。 &amp;lt;commentGenerator&amp;gt;：配置是否添加工程注释，建议镇压。 &amp;lt;jdbcConnection&amp;gt;：配置JDBC连库信息。 &amp;lt;javaModelGenerator&amp;gt;：配置实体类生成位置。 &amp;lt;sqlMapGenerator&amp;gt;：配置Mapper配置文件生成位置。 &amp;lt;javaClientGenerator&amp;gt;：配置Mapper接口生成位置。 &amp;lt;table&amp;gt;：配置根据哪些数据库表生成信息。 开发主类 mybatis.util.MbgUtil 并使用main方法运行逆向工程：
再次生成时要先将之前生成的所有文件删除，否则信息叠加。 逆向工程API方法 insert()：缺省字段注入null，无主键回注，静态SQL。 insertSelective()：缺省字段被忽略，无主键回注，动态SQL。 updateByPrimaryKey()：按主键修改，缺省字段注入null，静态SQL。 updateByPrimaryKeySelective()：按主键修改，缺省字段被忽略，动态SQL。 updateByExample(XXXExample example)：按条件修改，缺省字段注入null，静态SQL： example.createCriteria().条件()：设置and条件。 example.or().条件()：设置or条件。 updateByExampleSelective(XXXExample example)：按条件修改，缺省字段被忽略，动态SQL。 deleteByPrimaryKey()：按主键删除信息。 deleteByExample(XXXExample example)：按条件删除信息。 selectByPrimaryKey()：通过主键查询信息。 selectByExample(XXXExample example)：通过条件查询符合的信息，空对象视为全查： example.setOrderByClause()：对结果集进行排序。 example.setDistinct()：对结果集去重。 countByExample(XXXExample example)：通过条件查询符合的条目数。 tst: mybatis.MbgTest Oracle主键自增 Oracle数据库不支持主键自增，可以使用如下方式进行主键回注： &amp;lt;insert id=&amp;#34;insert&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-1-MyBatis/qa/JB3-1-Mybatis-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-1-MyBatis/qa/JB3-1-Mybatis-QA/</guid><description> mybatis是哪一层的框架？ mybatis底层封装的是什么技术？ mybatis是半封装框架还是全封装框架？ mybatis和hibernate最大的区别是什么？ mybatis支持注解方式开发吗？ mybatis支持XML配置方式开发吗？ mybatis原名叫什么？ 目前mybatis的源码需要去哪个网站下载？ 你用的Mybatis是什么版本的？ 如果想使用SLF4J日志，需要引入几个依赖？ 将驱动，连接串，账号和密码配置在属性文件中有什么好处？ 日志文件 log4j.properties 的名称和位置是固定的吗？ mybatis主配文件的名称和位置是固定的吗？ &amp;lt;properties resource=&amp;quot;&amp;quot;/&amp;gt; 是做什么用的？ &amp;lt;environments&amp;gt; 和 &amp;lt;environment&amp;gt; 标签是什么关系？ &amp;lt;transactionManager&amp;gt; 是用于配置什么的？ 什么叫事务？如何保证两个业务在同一个事务中？ DQL需要事务保护吗？ mybatis如何配置事务保护？ &amp;lt;dataSource&amp;gt; 是用于配置什么的？ 连接池是做什么用的？ 连接池容量为10，当第11个线程申请连接时，如何处理？ 连接池容量为10，当第11个线程归还连接时，如何处理？ mybatis如何配置连接池？ mybatis的底层原理是什么？用文字叙述。 mybatis中的SqlSessionFactoryBuilder是做什么用的？ mybatis中的SqlSessionFactory是做什么用的，可以设计为单例么？ mybatis中的SqlSession是做什么用的，可以设计为单例么？ mybatis中的Executor是做什么用的？ mybatis中的MappedStatement是做什么用的？ mybatis中MappedStatement的输入映射和输出映射分别是什么意思？ 什么是DCL双重检查锁。 ORM是什么意思？ 你学过哪些ORM框架？ 数据库主键字段若设置了有符号sign，则java类中ORM的属性使用Integer还是Long对应？ ORM实体类中的属性必须设置setter和getter吗？ &amp;lt;typeAliases&amp;gt; 标签是做什么用的？ java.util.Map的别名是什么？ mybatis中的别名区分大小写吗？ Mapper接口属于MVC中的哪一层代码？是做什么用的？ Mapper配置是做什么用的？ Mapper配置必须和Mapper接口同名同包吗？ Mapper配置的根标签是什么？ Mapper配置必须使用Mapper接口的类全名作为命名空间吗？ 如何在主配中整包扫描Mapper接口？ Mapper接口方法的名称要和SQL语句块的什么属性对应？ Mapper接口入参要和SQL语句块的什么属性对应？ Mapper接口返回值要和SQL语句块的什么属性对应？ SQL语句块的id属性可以省略吗？ SQL语句块的parameterType属性可以省略吗？ SQL语句块的resultType属性可以省略吗？ SQL语句块中的占位符是如何写的？占位符中的值是随意编写的吗？ 如何从sqlSession中获取一个Mapper接口？ sqlSession默认需要手动提交吗？如何手动提交？ sqlSession使用完毕后需要关闭吗？为什么？ 使用哪个注解可以为接口方法的简单参数起别名？ 添加方法如何配置主键回注？ #{} 占位符和 ${} 拼接符的区别是什么？ 什么是注入漏洞？如何防止注入漏洞？ 什么是SQL重用块？有什么作用？ 查询多条的语句块的resultType是否只需要写集合泛型？ &amp;lt;resultMap&amp;gt; 是做什么用的，有哪些重要的属性？ resultMap和resultType这两个属性可以同时使用吗？ &amp;lt;id&amp;gt; 和 &amp;lt;reslut&amp;gt; 有什么区别？ &amp;lt;result&amp;gt; 中的column和property分别指向什么？ &amp;lt;result&amp;gt; 中的javaType和jdbcType分别指向什么？ mybatis二级缓存是默认开启的吗？如何设置开启？ 如何引入其他Mapper配置文件中的二级缓存配置？ mybatis注解开发和xml开发有什么区别？如何取舍？ @Results 注解的作用是什么？ mybatis注解开发中，如何配置高级映射中的 &amp;lt;id&amp;gt; 字段？ @Options 注解的作用是什么？ 如何在SQL语句中执行条件判断？ &amp;lt;if&amp;gt; 和 &amp;lt;choose&amp;gt; 的区别在哪？ &amp;lt;where&amp;gt; 标签有什么作用？ &amp;lt;trim&amp;gt; 标签有哪些常用属性？ 若要遍历一个数组类型的入参，则 &amp;lt;foreach&amp;gt; 中的 collection 值写什么？ 若要遍历一个List类型的入参，则 &amp;lt;foreach&amp;gt; 中的 collection 值写什么？ &amp;lt;foreach&amp;gt; 中的 item 值写什么？ &amp;lt;foreach&amp;gt; 中的 open/close/separator 属性分别需要配置什么值？ &amp;lt;set&amp;gt; 标签有什么作用？ _parameter 用来表示什么？ mybatis配置一对一关系和一对多关系有几种方案？ 什么叫级联查询？如何解决级联查询结果中的重复字段，如 deptno？ 级联查询时，和java属性名相同的表字段也需要使用 &amp;lt;resultMap&amp;gt; 进行映射吗？ 分步查询时，和java属性名相同的表字段也需要使用 &amp;lt;resultMap&amp;gt; 进行映射吗？ 分步查询的第2步SQL块，必须配置对应的接口方法吗？ 分步查询的第1步SQL块如何调用第2步SQL块？可以自动传递什么个值到第2步SQL块？ 分步查询时，第2步SQL块如何接收和使用第1步SQL块传递过来的值？ 什么是N+1问题？如何解决？ 级联查询有必要设置延迟加载吗？ &amp;lt;association&amp;gt; 和 &amp;lt;collection&amp;gt; 有什么区别？ &amp;lt;collection&amp;gt; 中使用哪个属性配置关联属性的泛型类型？ @One 和 @Many 有什么区别？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/frag/%E6%AE%8B%E5%8D%B7-Spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/frag/%E6%AE%8B%E5%8D%B7-Spring/</guid><description>AOP五大通知 武技：
添加依赖：org.springframework.spring-aspects(4.3.14.RELEASE) 开发客户类 spring.aspect.five.CustomerServiceImpl： 标记 @Component 以被spring容器扫描和管理。 在客户类中开发业务方法： void delete(String name, Integer id) List&amp;lt;String&amp;gt; select(String name) void update(Map&amp;lt;String, Object&amp;gt; user) List&amp;lt;Integer&amp;gt; insert(Map&amp;lt;String, Object&amp;gt; user) 注解配置 心法：
开发切面类：spring.aspect.advice.CustomerAspectByAnn： 添加 @Aspect 表示这是一个切面类。 添加 @Component 表示该类需要被spring容器扫描和管理。 开发切面类切点方法：方法名随意仅用于区分，但方法体必须为空： @Pointcut(&amp;quot;execution(* c.j.s.a.a.CustomerServiceImpl.delete(..))&amp;quot;) @Pointcut(&amp;quot;execution(* c.j.s.a.a.CustomerServiceImpl.select(..))&amp;quot;) @Pointcut(&amp;quot;execution(* c.j.s.a.a.CustomerServiceImpl.update(..))&amp;quot;) @Pointcut(&amp;quot;execution(* c.j.s.a.a.CustomerServiceImpl.insert(..))&amp;quot;) 在切面类中开发前后通知方法：在业务方法执行前后做一些事，但无法阻止方法的运行： 对前置通知方法标记 @Before(&amp;quot;deletePointCut())。 对后置通知方法标记 @After(&amp;quot;deletePointCut())。 若想在通知方法中获取业务方法形参： 在注解中的切点方法名后附加 &amp;amp;&amp;amp;args(形参列表)。 在注解中添加额外的 argNames=&amp;quot;形参列表&amp;quot;，更规范。 对通知方法添加形参，类型与业务方法一致，名与 args() 中一致。 在切面类中开发返回后通知：在业务方法return之后做一些事，但无法阻止方法的运行： 对返回后通知方法标记 @AfterReturning(&amp;quot;selectPointCut())。 在注解中添加额外的 returning 属性指定方法的返回值。 对通知方法添加形参，类型与业务方法返回值一致，名与 returning 的值一致。 若想在通知方法中获取业务方法形参，一样可以使用 args()。 在切面类中开发异常通知：在业务方法发生异常后做一些事： 对异常通知方法标记 @AfterThrowing(&amp;quot;updatePointCut())。 在注解中添加额外的 throwing 属性指定方法的异常对象。 对通知方法添加形参，类型与业务方法异常一致，名与 throwing 的值一致。 若想在通知方法中获取业务方法形参，一样可以使用 args()。 在切面类中开发环绕通知：实现前后、返回后和异常通知的所有功能： 对环绕通知方法标记 @Around(&amp;quot;insertPointCut())。 通知方法的参数必须是 ProceedingJoinPoint，代表连接点： pjp.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/qa/JB3-2-Spring-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/qa/JB3-2-Spring-QA/</guid><description>Spring是Java开发的开源框架吗？
Spring解决了开发中基础性的问题，使得开发人员可以专注于应用程序的开发，对吗？
Spring除了XML配置外，还有哪两种配置方式？
Spring中使用到了哪些设计模式？
你使用的Spring是什么版本的？
Spring框架的核心依赖的名称是什么？
Spring主配文件的名称是固定的吗？
Spring主配文件的位置是固定的吗？
如何理解SpringIOC？
为何要使用SpringIOC？SpringIOC解决了哪些问题？
如何理解SpringDI？
Spring的核心特性是什么？
从Spring容器中获取bean有哪三种方式？
一个 &amp;lt;bean&amp;gt; 的id属性配置的是什么？可以省略吗？
一个 &amp;lt;bean&amp;gt; 的name属性配置的是什么？可以省略吗？
一个 &amp;lt;bean&amp;gt; 的class属性配置的是什么？可以省略吗？
ClassPathXmlApplicationContext容器在使用完毕之后需要销毁吗？
可以使用 &amp;lt;bean&amp;gt; 标签来直接管理一个接口类吗？
bean有哪三种创建方式？默认使用哪种？
我们可以通过哪些方式将bean加载到Spring容器中？
spring容器使用无参构造器的方式创建实例，和使用工厂的方式创建实例有什么不同？
spring容器使用静态工厂的方式创建实例，和使用实例工厂的方式创建实例有什么不同？
什么是bean的懒加载机制？默认是懒还是不懒？
bean的作用范围分为哪两种？默认是哪一种？
单例的bean可不可以设置懒加载？
原型的bean可不可以设置懒加载？
init-method 属性是什么意思？
destory-method 属性是什么意思？
使用哪个标签可以在一个 &amp;lt;bean&amp;gt; 中注入属性。
如果需要注入的属性是一个Integer，则使用 &amp;lt;property&amp;gt; 的哪个属性设置值？
如果需要注入的属性是一个实体类，则使用 &amp;lt;property&amp;gt; 的哪个属性设置值？
BeanFactory是什么？
Spring中，getBean() 方法源自于哪个类或接口？
一个Bean的生命周期分为哪几个步骤？
Spring是如何解决循环依赖问题的？
什么是动态代理？
jdk动态代理对客户有什么要求？
CGLIB动态代理对客户有什么要求？
final类可以使用CGLIB动态代理吗？
AOP在你的项目中主要用在了什么地方？
什么是切面类？做什么用的？
什么是切点方法？做什么用的？
什么是前置通知，能做什么用？
什么是后置通知，能做什么用？
什么是异常通知，能做什么用？
什么是返回后通知，能做什么用？
什么是环绕通知，能做什么用？
@Autowired可以标记在哪个地方？
@Autowired是如何自动注入一个 &amp;lt;bean&amp;gt; 的？
@Autowired + @Qualifier组合时，是如何自动注入一个 &amp;lt;bean&amp;gt; 的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/res/%E5%B0%8F%E8%AF%B4-JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/res/%E5%B0%8F%E8%AF%B4-JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid><description>JDK动态代理微小说
我是一名自于 UserService 公司的老板，目前我们公司主营的四个业务是增删改查 ，我希望在每个业务执行之前都能鉴权，在每个业务之后都能打印日志，如果每个业务都手动添加这两套代码的话实在是太麻烦了，所以我想去代理公司，和他们谈谈合作。
经过高人的指点，我来到了一个僻静的小山村，映入眼帘的是两家代理公司，一家叫jdk动态代理公司，一家叫cglib动态代理公司，我准备先去jdk动态代理公司碰碰运气。
走进这家代理公司，迎面走出来一个人，满脸堆笑的对我说：“欢迎光临，这里是jdk代理公司，全名 JdkProxy，我们公司是合理合法的正规公司，这是我们公司的营业证明，请问您是需要聘请代理帮您做事吗？”
说着，他拿出一个公司营业许可证明文件给我看，我看到如下内容：
public class JdkProxy implements InvocationHandler{} “是的，我是 UserService 公司的老板，想跟贵公司谈谈合作。”
“没问题，但是有一点我需要事先说明，我们公司有明文规定，只代理有接口的客户，因为我们的代理也需要来实现您的客户的接口，如果您的客户没有实现任何接口，请您出门左转，去隔壁cglib他们家聘用代理。”
“这个可以，我们公司都是接口加实现类的工作模式。” 我回答道。
“好的，接下来我会为您进行登记，请您编写一个召唤代理的咒语好吗？” 说着，他拿出一个本子，准备在上面写些什么。
“咒语的话，我觉得，要不然就叫 getProxy() 吧！” 我回答道。
“没问题，对了，召唤代理的时候，您还需要告诉我们为您公司的哪位员工进行代理，因为他才是我们的具体的客户对象，我们也需要为他进行登记。” 说着，他在本上写下如下内容：
private Object customer; public Object getProxy(Object customer){ this.customer = customer; } “接下来，我要为您编写这个咒语了，对了，召唤代理的时候，需要提供具体客户的类加载器和接口们，否则召唤不了代理哦，不要担心这个，就像您开房要提供身份证信息一样，我们也会为您保密这些信息的。” 说着，他在咒语的方法 getProxy() 中又添加了如下内容： return Proxy.newProxyInstance( customer.getClass().getClassLoader(), customer.getClass().getInterfaces(), this); “好了，咒语已经编写完成了，以后想召唤代理的时候，您只需要喊出 getProxy()，就可以召唤一个代理了，那么接下来，您需要提供一下代理的工作清单 invoke() ，也就是告诉我们，您聘用代理，需要它们做些什么内容，您召唤的代理会按照这个清单一步一步执行的。”
“嗯，我需要这个代理在帮我做任何事之前，都能帮我鉴权，并且在做完事之后，帮我打印日志。”
“好的。” 说着他在 invoke() 中添加了如下内容：
System.out.println(&amp;#34;鉴权...&amp;#34;); Object methodReturn = method.invoke(customer, args); System.out.println(&amp;#34;日志...&amp;#34;); return methodReturn; 我又问道：“需要我提前告诉您，我们要做的事情吗？”
“这个不需要，我们代理的工作模式是预编译，会自动在您使用代理的时候，通过反射的方式了解到您要做的业务方法，然后帮您去做( method.invoke()) ，但是每次都需要提供具体的客户和方法的参数，当然，最后我们会把业务方法的结果给您返回去。”</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/frag/%E6%AE%8B%E5%8D%B7-SpringMVC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/frag/%E6%AE%8B%E5%8D%B7-SpringMVC/</guid><description>S01. FileUpload上传 心法: FileUpload
FileUpload是由Apache提供的上传文件的相关组件。 武技: 在子项目整合FileUpload功能
在父项目中锁定版本: &amp;lt;fileupload-version&amp;gt;1.5&amp;lt;/fileupload-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--commons-fileupload--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${fileupload-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在子项目中添加依赖: &amp;lt;!--commons-fileupload--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 在SpringMVC主配中配置文件上传相关参数: &amp;lt;!--配置文件上传解析器: id的值是固定的--&amp;gt; &amp;lt;bean id=&amp;#34;multipartResolver&amp;#34; class=&amp;#34;org.springframework.web.multipart.commons.CommonsMultipartResolver&amp;#34;&amp;gt; &amp;lt;!--设置全部文件的字节数限制200M，默认-1，表示无限制--&amp;gt; &amp;lt;property name=&amp;#34;maxUploadSize&amp;#34; value=&amp;#34;209715200&amp;#34;/&amp;gt; &amp;lt;!--设置单个文件的字节数限制为5M，默认-1，表示无限制--&amp;gt; &amp;lt;property name=&amp;#34;maxUploadSizePerFile&amp;#34; value=&amp;#34;5242880&amp;#34;/&amp;gt; &amp;lt;!--设置字符编码，默认ISO-8859-1--&amp;gt; &amp;lt;property name=&amp;#34;defaultEncoding&amp;#34; value=&amp;#34;utf-8&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; E01. 文件上传 武技: 测试文件上传功能
开发上传本地文件的工具方法 LocalFileUtil -&amp;gt; upload(): package com.lsx.util; /** @author lsx */ @SuppressWarnings(&amp;#34;all&amp;#34;) public class LocalFileUtil { /** * 将文件上传到本地指定目录中 * * @param multipartFile 文件实例 * @param dir 文件上传目录 * @return 本地文件完整路径 + 文件名 */ @SneakyThrows public static String upload(MultipartFile multipartFile, String dir) { if (null == multipartFile || StrUtil.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/frag/%E6%AE%8B%E5%8D%B7-SSM%E6%95%B4%E5%90%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/frag/%E6%AE%8B%E5%8D%B7-SSM%E6%95%B4%E5%90%88/</guid><description>CH01. 搭建SSM环境 EP01. 添加SSM依赖 武技: 在 ssm-merge 子项目中整合Spring + Mybatis + SpringMVC框架
在父项目中锁定版本: &amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;mysql-connector-j-version&amp;gt;8.0.33&amp;lt;/mysql-connector-j-version&amp;gt; &amp;lt;mybatis-version&amp;gt;3.5.0&amp;lt;/mybatis-version&amp;gt; &amp;lt;spring-version&amp;gt;5.2.15.RELEASE&amp;lt;/spring-version&amp;gt; &amp;lt;druid-version&amp;gt;1.1.6&amp;lt;/druid-version&amp;gt; &amp;lt;mybatis-spring-version&amp;gt;1.3.0&amp;lt;/mybatis-spring-version&amp;gt; &amp;lt;servlet-version&amp;gt;3.1.0&amp;lt;/servlet-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hutool-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql-connector-j--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${mysql-connector-j-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mybatis--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${mybatis-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-jdbc--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-context-support--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-test--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/frag/%E6%AE%8B%E5%8D%B7-Struts2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/frag/%E6%AE%8B%E5%8D%B7-Struts2/</guid><description>CH1. Struts2基本概念 Struts2是一个非常优秀的MVC开源框架，由传统的Struts1和WebWork两个经典的框架合并而来，核心就是WebWork，采用拦截器的机制来处理用户请求，它虽然是Struts1的升级版，但是相对于Struts1改动很大: 允许POJO对象作为action； 支持更多视图技术（JSP、freemarker等）； 与servlet解耦，完全脱离servlet-controller，如request，session等； 基于spring AOP思想的拦截器机制，更容易拓展； 支持文件上传下载； ognl表达式应用； 支持EL表达式； 下载安装 Struts2： struts-2.5.12-all.zip 目录结构： apps：基于Struts2的示例应用 docs：Struts2相关文档，API等 lib：Struts2核心类库以及第三方插件类库 src：Struts2的源码 访问配通 新建web项目 &amp;raquo; 导struts2包 &amp;raquo; 编写Action &amp;raquo; 配置Action &amp;raquo; 访问Action 引入依赖： org.apache.struts:struts2-core:2.5.12 开发控制器类 控制器类也被称为动作类，控制器类的生命周期就是一次请求： 创建：每次请求的时候都会创建一个Action对象（非单例，线程安全的）。 销毁：当Action的动作类执行完方法后，就消失了。 Action就是处理用户请求的动作类，类似于javaweb中的servlet。 /** * 类名后缀尽量采用Action，可读性强，当然也可以使用controller、servlet等。 * 方法修饰符使用public，因为需要外部访问。 * 方法返回值是String类型。 * */ public class HelloAction { public String hello() { System.out.println(&amp;#34;hello!!&amp;#34;); return &amp;#34;success&amp;#34;; } } 普通控制器类 方法修饰：public 方法返回值：String 方法参数：不需要 方法名：默认execute：当你不在xml文件中设置method的时候，会自动去寻找execute方法。 实现Action接口的控制器类 让普通的bean实现Action接口，就是比第一个多提供了一些情景常量。 SUCCESS：返回成功页面（你必须设置了result的name=&amp;ldquo;success&amp;rdquo;） NONE：不返回任何页面，也不报错 ERROR：返回错误页面 INPUT：返回当提交表单发生错误，就跳回到表单页面 LOGIN：返回登录界面 继承ActionSupport类的控制器类 让你的控制器类继承ActionSupport类，开发中常用。 配置控制器类 Action需要配置两个xml文件，一个是struts.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/qa/JB3-3-SpringMVC-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/qa/JB3-3-SpringMVC-QA/</guid><description> spring是哪家公司开发的？ springmvc是表现层框架吗？ springmvc的一个核心三个组件分别是什么？ springmvc对比servlet和struts2来说，谁的效率高？ springmvc的访问流程是怎样的？ springmvc的核心依赖包是什么？ springmvc为什么要在web.xml中配置一个 DispatcherServlet？ DispatcherServlet 拦截 *.action 和拦截 / 有什么区别？ DispatcherServlet 会默认去寻找哪个核心配置文件？ DispatcherServlet 如果拦截了 /，导致静态资源无法访问怎么办？ 核心配置文件springmvc.xml文件的名字和位置都是不可更改的吗？ &amp;lt;mvc:annotation-driven /&amp;gt; 有什么作用？ &amp;lt;context:component-scan /&amp;gt; 主要是为了扫描哪四种注解？ InternalResourceViewResolver 视图解析器的作用是什么？ InternalResourceViewResolver 视图解析器的前后缀只在响应中生效吗？ @RequestMapping 和 @ResponseBody 有什么区别？ @RequestMapping 里面有哪些属性值，分别的作用是什么？ @RequestMapping 如果定义在控制器类上会有什么效果？ @RequestMapping 可以单独定义在控制器类上吗？ @RequestMapping 可以映射多个路径吗？ @RequestMapping 模糊映射规则中，?、*、** 分别代表什么意思？ @RequestMapping 中的 method = RequestMethod.POST 代表什么意思？ 大部分浏览器不支持put和delete请求，springmvc应该如何解决呢？ tomcat8以上版本不支持put和delete请求，springmvc应该如何解决呢？ springmvc如何解决post提交的中文乱码问题呢？ springmvc如何使用servlet原生对象？ springmvc可以利用哪个注解获取请求头信息？ springmvc可以利用哪个注解获取Cookie信息？ springmvc可以利用哪个注解获取Rest风格参数？ springmvc可以利用哪个注解获取键值对参数？ springmvc可以直接接收int数组和String数组类型的数据吗？ springmvc可以直接接收引用数据类型参数吗？如一个User实体类? springmvc如何接收一个 List&amp;lt;Pojo&amp;gt; 类型的参数完成批量修改？ 自定义一个类型转换器需要我们的转换器类实现什么接口？并覆盖什么方法？ 我们自定义的类型转换器需要在核心配置文件中配置吗？ @NumberFormat 和 @DateTimeFormat 分别是干什么用的？可以直接使用吗？ BindingResult 参数的作用是什么？ springmvc的存值方式有几种？分别是什么范围域的存值？ @sessionAttributes 注解是干什么的？如何使用它？ @ModeAttribute 注解是干什么用的？如何使用它？ springmvc转页的方式有几种？ 返回值为String的方法，如何实现重定向和转发？ 文件上传需要引入什么依赖？ 文件上传的时候必须在表单处添加 enctype=&amp;quot;multipart/form-data&amp;quot; 吗？ 自定义拦截器需要实现什么接口，并重写什么方法？ 自定义拦截器需要在核心配置文件中配置吗？ 自定义拦截器可以配置多个吗？执行的时候按照怎样的顺序执行？ 国际化属性文件的格式是什么？ 如何使用spring的 &amp;lt;spring:message /&amp;gt; 标签读取国际化信息？ springmvc中，异常处理的顶级接口是谁？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/res/%E5%B0%81%E8%A3%85Result%E5%93%8D%E5%BA%94%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/res/%E5%B0%81%E8%A3%85Result%E5%93%8D%E5%BA%94%E7%B1%BB/</guid><description>S01. 开发响应枚举类 武技: 开发响应枚举类，用于和前端约定响应状态
开发响应枚举类 ResultCode: com.lsx.result.ResultCode
/** @author lsx */ @Getter public enum ResultCode { SUCCESS(200, &amp;#34;请求成功&amp;#34;), FAILED(500, &amp;#34;服务器错误&amp;#34;), BAD_PARAM(400, &amp;#34;请求参数有误&amp;#34;), VALIDATE_FAILED(403, &amp;#34;参数校验失败&amp;#34;), METHOD_NOT_ALLOW(405, &amp;#34;请求类型不匹配&amp;#34;), TOKEN_FAILED(1001, &amp;#34;Token过期或失效&amp;#34;), TOKEN_EXPIRING_SOON(1002, &amp;#34;Token即将过期&amp;#34;); private final int CODE; private final String MESSAGE; ResultCode(int code, String msg) { this.CODE = code; this.MESSAGE = msg; } } S02. 开发响应工具类 武技: 开发响应类，用于统一封装响应结果
开发响应类 Result: com.lsx.result.Result
/** @author lsx */ @Data @AllArgsConstructor @NoArgsConstructor public class Result&amp;lt;T&amp;gt; implements Serializable { /** 响应代码 */ private Integer code; /** 响应描述 */ private String message; /** 响应数据 */ private T data; /** * 创建Result类，手动传递响应代码，响应描述和响应数据 * * @param code 响应代码 * @param message 响应描述 * @param data 响应数据 */ public Result(int code, String message, T data) { this.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/draw/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/draw/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 弃用 ^MJ3cOUij
1 bit ^2JiYTSmT
12 bit ^tUemv1K9
同1毫秒内产生的不同ID的序号 （最多4096个） ^b11tIwIv
机房ID （最多32个） ^wtq8HqUj
5 bit ^MFMwHUHu
机器ID （最多32个） ^5otvJCkT
5 bit ^EpTxkA2E
时间戳 （最多69年的时间） ^YCCUf4mG
41 bit ^Dj4HfeuU
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 258, &amp;#34;versionNonce&amp;#34;: 1740471753, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;r7CF9ApcO29CP9rjNBFol&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</guid><description>[!NOTE] Java道经第3卷 - 第4阶 - SpringBoot v3-4-ssm-springboot/shardingsphere
S01. 分库分表 E01. 分库分表概念 1. 何为分库分表 心法：通常分库与分表的操作会同时进行，以至于我们习惯性的将它们合在一起叫做分库分表
单机的容量可以随意扩展，但数据库的连接数却是有限的，它自身就很容易会成为系统的瓶颈： 当数据量过大时，导致数据库性能持续下降， 严重影响用户体验。 当访问量过高时，导致连接数耗尽抛出 too many connections 异常，数据库宕机。 分库分表通过将数据分散到多个数据库或表中，从而有效提升系统的处理能力和稳定性： 分库：就是将1个库拆为N个库。 分表：就是将1个表拆为N个表 分库分表 描述 优点 突破单体数据库的瓶颈，减少数据库负担，提升数据库性能 缺点 系统复杂度提升，需要额外考虑事务一致性，全局ID，跨节点查询（分页，排序等），数据迁移，服务治理等问题 武技：测试 MySQL 数据库的最大连接数
-- 151 show variables like &amp;#39;max_connections&amp;#39; 2. 何时分库分表 心法：什么情况下需要考虑进行分库分表
阿里开发手册建议，单表行数超500万行或者单表容量超过2GB时，推荐分库分表。 然而实际中很多公司单表数据几千万、 亿级别仍然不选择分库分表。 单表数据量 优化方案推荐 百万级以内 考虑通过添加从库、优化索引等手段提升性能 千万级以上 考虑分库分表 3. 分库分表产品 心法：常见的分库分表产品工具
客户端直连模式：直接在业务层连接数据库，性能略高： 优点：使用简单，通常引入一个jar包即可。 缺点：升级成本高，jar包若升级或Bug修改，则所有相关项目都要跟着升级。 代理连库模式：通过代理连接数据库，性能略低： 优点：升级成本低，jar包若升级或Bug修改，只需要重新部署代理服务即可，业务方无感知。 缺点：使用复杂，需要搭建单独的服务（还需要考虑高可用），有一定的维护成本。 对比项 shardingsphere cobar mycat TDDL mysql fabric 连接模式 两种都支持 代理连库 代理连库 客户端直连 代理连库 数据库支持 任意 仅MySQL 仅MySQL MySQL，Oracle，SQLServer 仅MySQL ORM框架支持 任意 任意 任意 任意 任意 工具来源 Apache基金会 阿里巴巴 社区爱好者 阿里巴巴 MySQL官方 社区活跃度 非常活跃 相对较低 相对较低 相对较低 相对较低 E02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E6%AE%8B%E5%8D%B7-Guava/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E6%AE%8B%E5%8D%B7-Guava/</guid><description>Guava本地缓存 心法: Guava缓存
Guava是谷歌出品的一款本地缓存，使用流程如下: 先从Guava中尝试获取指定的值，若存在则直接返回，视为缓存命中。 若缓存中不存在，则执行回调函数，查询数据库，并将结果缓存到Guava中，过期时间自定义。 每次重启项目都会清空Guava本地缓存中的全部数据。 武技: 在子项目中整合Guava本地缓存
在父项目中锁定版本: &amp;lt;guava-version&amp;gt;31.1-jre&amp;lt;/guava-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--guava--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${guava-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在子项目中引入依赖: &amp;lt;!--guava--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 开发Guava缓存工具类 GuavaUtil: package com.lsx.util; /** @author lsx */ public class GuavaUtil { /** 使用静态内部类保证单例 */ private static final class CacheHolder { /** 10分钟的缓存实例 */ private static final Cache&amp;lt;String, Object&amp;gt; tenMinutesCache = CacheBuilder.newBuilder() .initialCapacity(10) .maximumSize(100) .concurrencyLevel(5) .expireAfterWrite(600, TimeUnit.SECONDS) .recordStats() .build(); /** 30分钟的缓存实例 */ private static final Cache&amp;lt;String, Object&amp;gt; halfHourCache = CacheBuilder.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E6%AE%8B%E5%8D%B7-SpringBoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E6%AE%8B%E5%8D%B7-SpringBoot/</guid><description>Servlet原生组件 心法: springboot支持原生的servlet组件，如servlet过滤器和servlet监听器等:
开发原生servlet类 c.j.s.servlet.BeanServlet，无需添加注解。 开发原生过滤器类 c.j.s.servlet.filter.BeanFilter，无需添加注解。 开发原生监听器类 c.j.s.servlet.listener.BeanListener，无需添加注解。 开发配置类 c.j.s.servlet.BeanServletConfig: IOC o.s.b.w.s.ServletRegistrationBean 类，利用构造传入servlet实例和路由。 开发配置类 c.j.s.servlet.filter.BeanFilterConfig: IOC o.s.b.w.s.FilterRegistrationBean 过滤器链类。 filters.setFilter(): 在过滤器链中加入自定义过滤器。 filters.addUrlPatterns(): 在过滤器链中加入自定义过滤器拦截规则。 开发配置类 c.j.s.servlet.listener.BeanListenerConfig: IOC o.s.b.w.s.ServletListenerRegistrationBean 监听器类，利用构造传入监听器实例。 每个监听对应一个 @Bean。 psm测试: controller/servlet/bean。 注解配置方案 **流程: **
开发原生servlet类 c.j.s.servlet.ScanServlet，标记 @WebServlet。 开发原生过滤器类 c.j.s.servlet.filter.ScanFilter，标记 @WebFilter。 开发原生监听器类 c.j.s.servlet.listener.ScanListener，标记 @WebListener。 在启动类中使用 @ServletComponentScan 扫描servlet类，过滤器类和监听器类所在包。 psm测试: controller/servlet/scan。 同时配置方案 **流程: **
开发原生servlet类 c.j.s.servlet.ContextServlet，无需添加注解。 开发原生过滤器类 c.j.s.servlet.filter.ContextFilter，无需添加注解。 开发原生监听器类 c.j.s.servlet.listener.ContextListener，无需添加注解。 让启动类实现 ServletContextInitializer 接口并重写 onStartup(): context.addServlet().addMapping(): 配置servlet类并设置路由。 context.addFilter().addMappingForUrlPatterns(): 配置过滤器类并设置拦截规则。 context.addListener(): 配置监听器类。 psm测试: controller/servlet/context。 整合Thymeleaf 心法: Thymeleaf</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E6%AE%8B%E5%8D%B7-WebFlux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/frag/%E6%AE%8B%E5%8D%B7-WebFlux/</guid><description>WebFlux编程 心法: 响应式编程思维
假设一个请求需要做三件事ABC，非响应式的编程思路是这样的: ABC三个任务需要分配三个线程，T1，T2和T3。 T1抢到资源，执行任务A，其余任务阻塞。 任务A执行完毕，得到相应结果，但等待。 T3抢到资源，执行任务C，其余任务阻塞。 任务C执行完毕，得到相应结果，但等待。 T2抢到资源，执行任务B，得到相应结果。 此时ABC三个任务都有了结果，一并将其返回，客户端一次性得到结果。 共消耗3个线程资源。 假设一个请求需要做三件事ABC，响应式的编程思路是这样的: ABC三个任务需要仅需要一个线程T1。 T1抢到资源，执行任务A，提交任务后立刻得到结果，如 &amp;ldquo;任务A执行中，请等待&amp;hellip;&amp;quot;。 T1继续执行任务B，提交任务后立刻得到结果，如 &amp;ldquo;任务B执行中，请等待&amp;hellip;&amp;quot;。 T1继续执行任务C，提交任务后立刻得到结果，如 &amp;ldquo;任务C执行中，请等待&amp;hellip;&amp;quot;。 可以发现ABC三个任务是不阻塞的。 任务A执行完毕，得到结果，可以流数据形式直接返回。 任务B执行完毕，得到结果，可以流数据形式直接返回。 任务C执行完毕，得到结果，可以流数据形式直接返回。 客户端看到的是一部分部分的流数据。 总耗时不变，但仅消耗1个线程资源（提升了线程伸缩性）。 总结: 响应式编程可利用较少的线程数或硬件资源来处理任务，提高系统的伸缩性，但不会让程序运行的更快。 心法: WebFlux
WebFlux是Spring5中的异步非阻塞响应式编程框架。 WebFlux不依赖servlet，不能部署为war包，不使用webapp目录。 WebFlux使用 ServletRequest 请求对象和 ServletResponse 响应对象。 武技: 创建 springboot-webflux 子项目: 用于测试webflux效果
添加三方依赖: spring-boot-starter-webflux 比 spring-boot-starter-web 优先级低，共存时失效。 &amp;lt;!--三方依赖--&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!--spring-boot-starter-webflux--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--reactor-property--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.projectreactor&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;reactor-property&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;property&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-property--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-property&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;property&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 开发启动类 WebFluxApp: package com.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/qa/JB3-4-Springboot-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/qa/JB3-4-Springboot-QA/</guid><description>什么是HTTP协议？
HTTP协议的底层是什么协议？
BS架构和CS架构有什么区别？
如何解决端口占用问题？
GET请求有请求体吗？POST请求有请求体吗？
GET请求有请求头吗？POST请求有请求头吗？
GET和POST谁更快？
GET和POST谁更安全？
GET和POST谁的数据携带量更大？
POST请求是否可以使用查询串？
springboot最大的特点是什么？
你使用的springboot版本是多少？
springboot框架可以简化项目搭建过程，开发过程和部署过程吗？
springboot项目是独立运行的，还是需要依赖外部web容器才能运行的？
springboot中的 &amp;lt;parent&amp;gt; 标签是干什么用的？
springboot项目的所有第三方依赖都会根据 &amp;lt;parent&amp;gt; 自动寻找适配的依赖版本吗？
启动类main方法中的哪行启动代码如何编写？
@SpringBootApplication注解有什么用？
控制类中的@ResponseBody注解有什么用？
控制类中的@RequestMapping注解有什么用？标记在类上和方法上有什么不同？
控制类中的@RestController注解组合了哪两个注解？
Get请求和Post请求有什么区别？
浏览器地址栏发送的请求都是Get请求吗？
对于一个简单参数，标记@RequestParam和不标记@RequestParam有什么区别？
@RequestParam中的value属性有什么作用？
@RequestParam中的required属性有什么作用？
@RequestParam中的defaultValue属性有什么作用？
springboot的控制方法是否可以直接使用数组类型的形参接收同名的URL请求参数？
springboot的控制方法是否可以直接使用实体类接收URL请求参数？
springboot的控制方法直接使用实体类接收URL请求参数时，是否可以添加@RequestParam？
springboot的控制方法直接使用实体类接收URL请求参数时，是否支持连调？
springboot使用哪个注解获取请求头中的Host值？
@PathVariable和@RequestParam在获取请求数据的时候有什么区别？
@CookieValue是做什么用的？
@SpringBootApplication注解会自动装配哪些类？
springboot中的@ComponentScan默认的扫描范围是什么？
什么叫全局异常处理？
@ControllerAdvice 是做什么用的？
springboot中的 @EnableScheduling 是做什么用的？
@Scheduled 中的fixedDelay和fixedRate有什么区别？
@Scheduled 中支持cron表达式吗？
异步执行方法不占用主线程资源吗？可以提高项目执行效率吗？
异步任务对比同步任务的优势在哪里？
是所有的任务都适合使用异步任务吗？
springboot中的 @EnableAsync 是做什么用的？
无返回值时Future的泛型应该写什么？
拦截器和拦截器链是什么关系？
拦截器是作用在请求阶段还是作用在响应阶段？
HandlerInterceptor中的preHandle()，postHandle()和afterCompletion() 分别作用在什么时机？
postHandle()多用于什么场景？
和afterCompletion()多用于什么场景？
拦截器的拦截规则和排除规则可以同时设置吗？
RestTemplate是干什么用的？
springboot默认支持的日志框架是什么？
logback可以同时将日志打印在控制台和日志文件中吗？
日志文件的后缀是什么？
常用的四种日志级别从小到大分别是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/Echarts%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/Echarts%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</guid><description>theme = { // 全图默认背景 // backgroundColor: &amp;#39;rgba(0,0,0,0)&amp;#39;, // 默认色板 color: [&amp;#39;#ff7f50&amp;#39;, &amp;#39;#87cefa&amp;#39;, &amp;#39;#da70d6&amp;#39;, &amp;#39;#32cd32&amp;#39;, &amp;#39;#6495ed&amp;#39;, &amp;#39;#ff69b4&amp;#39;, &amp;#39;#ba55d3&amp;#39;, &amp;#39;#cd5c5c&amp;#39;, &amp;#39;#ffa500&amp;#39;, &amp;#39;#40e0d0&amp;#39;, &amp;#39;#1e90ff&amp;#39;, &amp;#39;#ff6347&amp;#39;, &amp;#39;#7b68ee&amp;#39;, &amp;#39;#00fa9a&amp;#39;, &amp;#39;#ffd700&amp;#39;, &amp;#39;#6699FF&amp;#39;, &amp;#39;#ff6666&amp;#39;, &amp;#39;#3cb371&amp;#39;, &amp;#39;#b8860b&amp;#39;, &amp;#39;#30e0e0&amp;#39;], // 图表标题 title: { x: &amp;#39;left&amp;#39;, // 水平安放位置，默认为左对齐，可选为： // &amp;#39;center&amp;#39; ¦ &amp;#39;left&amp;#39; ¦ &amp;#39;right&amp;#39; // ¦ {number}（x坐标，单位px） y: &amp;#39;top&amp;#39;, // 垂直安放位置，默认为全图顶端，可选为： // &amp;#39;top&amp;#39; ¦ &amp;#39;bottom&amp;#39; ¦ &amp;#39;center&amp;#39; // ¦ {number}（y坐标，单位px） //textAlign: null // 水平对齐方式，默认根据x设置自动调整 backgroundColor: &amp;#39;rgba(0,0,0,0)&amp;#39;, borderColor: &amp;#39;#ccc&amp;#39;, // 标题边框颜色 borderWidth: 0, // 标题边框线宽，单位px，默认为0（无边框） padding: 5, // 标题内边距，单位px，默认各方向内边距为5， // 接受数组分别设定上右下左边距，同css itemGap: 10, // 主副标题纵向间隔，单位px，默认为10， textStyle: { fontSize: 18, fontWeight: &amp;#39;bolder&amp;#39;, color: &amp;#39;#333&amp;#39; // 主标题文字颜色 }, subtextStyle: { color: &amp;#39;#aaa&amp;#39; // 副标题文字颜色 } }, // 图例 legend: { orient: &amp;#39;horizontal&amp;#39;, // 布局方式，默认为水平布局，可选为： // &amp;#39;horizontal&amp;#39; ¦ &amp;#39;vertical&amp;#39; x: &amp;#39;center&amp;#39;, // 水平安放位置，默认为全图居中，可选为： // &amp;#39;center&amp;#39; ¦ &amp;#39;left&amp;#39; ¦ &amp;#39;right&amp;#39; // ¦ {number}（x坐标，单位px） y: &amp;#39;top&amp;#39;, // 垂直安放位置，默认为全图顶端，可选为： // &amp;#39;top&amp;#39; ¦ &amp;#39;bottom&amp;#39; ¦ &amp;#39;center&amp;#39; // ¦ {number}（y坐标，单位px） backgroundColor: &amp;#39;rgba(0,0,0,0)&amp;#39;, borderColor: &amp;#39;#ccc&amp;#39;, // 图例边框颜色 borderWidth: 0, // 图例边框线宽，单位px，默认为0（无边框） padding: 5, // 图例内边距，单位px，默认各方向内边距为5， // 接受数组分别设定上右下左边距，同css itemGap: 10, // 各个item之间的间隔，单位px，默认为10， // 横向布局时为水平间隔，纵向布局时为纵向间隔 itemWidth: 20, // 图例图形宽度 itemHeight: 14, // 图例图形高度 textStyle: { color: &amp;#39;#333&amp;#39; // 图例文字颜色 } }, // 值域 dataRange: { orient: &amp;#39;vertical&amp;#39;, // 布局方式，默认为垂直布局，可选为： // &amp;#39;horizontal&amp;#39; ¦ &amp;#39;vertical&amp;#39; x: &amp;#39;left&amp;#39;, // 水平安放位置，默认为全图左对齐，可选为： // &amp;#39;center&amp;#39; ¦ &amp;#39;left&amp;#39; ¦ &amp;#39;right&amp;#39; // ¦ {number}（x坐标，单位px） y: &amp;#39;bottom&amp;#39;, // 垂直安放位置，默认为全图底部，可选为： // &amp;#39;top&amp;#39; ¦ &amp;#39;bottom&amp;#39; ¦ &amp;#39;center&amp;#39; // ¦ {number}（y坐标，单位px） backgroundColor: &amp;#39;rgba(0,0,0,0)&amp;#39;, borderColor: &amp;#39;#ccc&amp;#39;, // 值域边框颜色 borderWidth: 0, // 值域边框线宽，单位px，默认为0（无边框） padding: 5, // 值域内边距，单位px，默认各方向内边距为5， // 接受数组分别设定上右下左边距，同css itemGap: 10, // 各个item之间的间隔，单位px，默认为10， // 横向布局时为水平间隔，纵向布局时为纵向间隔 itemWidth: 20, // 值域图形宽度，线性渐变水平布局宽度为该值 * 10 itemHeight: 14, // 值域图形高度，线性渐变垂直布局高度为该值 * 10 splitNumber: 5, // 分割段数，默认为5，为0时为线性渐变 color: [&amp;#39;#1e90ff&amp;#39;, &amp;#39;#f0ffff&amp;#39;],//颜色 //text:[&amp;#39;高&amp;#39;,&amp;#39;低&amp;#39;], // 文本，默认为数值文本 textStyle: { color: &amp;#39;#333&amp;#39; // 值域文字颜色 } }, toolbox: { orient: &amp;#39;horizontal&amp;#39;, // 布局方式，默认为水平布局，可选为： // &amp;#39;horizontal&amp;#39; ¦ &amp;#39;vertical&amp;#39; x: &amp;#39;right&amp;#39;, // 水平安放位置，默认为全图右对齐，可选为： // &amp;#39;center&amp;#39; ¦ &amp;#39;left&amp;#39; ¦ &amp;#39;right&amp;#39; // ¦ {number}（x坐标，单位px） y: &amp;#39;top&amp;#39;, // 垂直安放位置，默认为全图顶端，可选为： // &amp;#39;top&amp;#39; ¦ &amp;#39;bottom&amp;#39; ¦ &amp;#39;center&amp;#39; // ¦ {number}（y坐标，单位px） color: [&amp;#39;#1e90ff&amp;#39;, &amp;#39;#22bb22&amp;#39;, &amp;#39;#4b0082&amp;#39;, &amp;#39;#d2691e&amp;#39;], backgroundColor: &amp;#39;rgba(0,0,0,0)&amp;#39;, // 工具箱背景颜色 borderColor: &amp;#39;#ccc&amp;#39;, // 工具箱边框颜色 borderWidth: 0, // 工具箱边框线宽，单位px，默认为0（无边框） padding: 5, // 工具箱内边距，单位px，默认各方向内边距为5， // 接受数组分别设定上右下左边距，同css itemGap: 10, // 各个item之间的间隔，单位px，默认为10， // 横向布局时为水平间隔，纵向布局时为纵向间隔 itemSize: 16, // 工具箱图形宽度 featureImageIcon: {}, // 自定义图片icon featureTitle: { mark: &amp;#39;辅助线开关&amp;#39;, markUndo: &amp;#39;删除辅助线&amp;#39;, markClear: &amp;#39;清空辅助线&amp;#39;, dataZoom: &amp;#39;区域缩放&amp;#39;, dataZoomReset: &amp;#39;区域缩放后退&amp;#39;, dataView: &amp;#39;数据视图&amp;#39;, lineChart: &amp;#39;折线图切换&amp;#39;, barChart: &amp;#39;柱形图切换&amp;#39;, restore: &amp;#39;还原&amp;#39;, saveAsImage: &amp;#39;保存为图片&amp;#39; } }, // 提示框 tooltip: { trigger: &amp;#39;item&amp;#39;, // 触发类型，默认数据触发，见下图，可选为：&amp;#39;item&amp;#39; ¦ &amp;#39;axis&amp;#39; showDelay: 20, // 显示延迟，添加显示延迟可以避免频繁切换，单位ms hideDelay: 100, // 隐藏延迟，单位ms transitionDuration: 0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/SQL/SpringBoot.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/SQL/SpringBoot.sql/</guid><description/></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/%E5%B0%81%E8%A3%85Excel%E5%B7%A5%E5%85%B7%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/%E5%B0%81%E8%A3%85Excel%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid><description>S01. 封装Excel工具类 package com.lsx.util; /** @author lsx */ public class EasyExcelUtil { /** * 生成Excel报表并自动下载 * * @param resp HTTP响应对象 * @param fileName Excel文件名 * @param sheetName Excel表格页标题 * @param c 数据泛型类型 * @param data 数据 */ @SneakyThrows public static void download(HttpServletResponse resp, String fileName, String sheetName, Class&amp;lt;?&amp;gt; c, Collection&amp;lt;?&amp;gt; data) { // 对文件名重新编码，以避免文件名中文乱码问题 fileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8); sheetName = URLEncoder.encode(sheetName, StandardCharsets.UTF_8); // 设置响应MIME类型为Excel文件下载类型 resp.setContentType(&amp;#34;application/vnd.openxmlformats-officedocument&amp;#34; + &amp;#34;.spreadsheetml.sheet;charset=utf-8&amp;#34;); // 设置以附件的形式下载文件 resp.setHeader(&amp;#34;Content-disposition&amp;#34;, &amp;#34;attachment;filename=&amp;#34; + fileName); // 生成Excel报表并自动下载 EasyExcel.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/%E5%B0%81%E8%A3%85JWT%E5%B7%A5%E5%85%B7%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/%E5%B0%81%E8%A3%85JWT%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid><description>S01. 封装JWT工具类 心法: Token解析流程
sequenceDiagram autonumber title: Token解析流程 participant BI as 前端拦截器 participant SI as 后端拦截器 note over BI: 从sessionStorage中获取当前Token note over BI: 将当前Token设置到请求头中 BI -&amp;gt;&amp;gt; SI: 发送请求 note over SI: 判断是否携带正确的Token opt 未携带正确的Token SI --&amp;gt;&amp;gt; BI: 响应Token验证失败(1003) end opt 携带了正确的Token note over SI: 判断Token是否即将过期 opt Token过期时间大于30分钟 note over SI: 放行请求到目标方法并执行下单业务 end opt Token过期时间小于30分钟 SI --&amp;gt;&amp;gt; BI: 响应Token即将过期(1004)和一个新的Token note over BI: 当响应码是1004时，用新的Token替换旧的Token BI --&amp;gt;&amp;gt; SI: 携带新的Token，重新发送请求，重复第1步骤 end end 武技: 封装Token令牌工具类</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/%E5%B0%81%E8%A3%85MinIO%E5%B7%A5%E5%85%B7%E7%B1%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/%E5%B0%81%E8%A3%85MinIO%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid><description>S01. 封装MinIO工具类 开发常量属性 Constant: package com.lsx.constant; /** @author lsx */ public interface MinioConst { /** 端点 */ String END_POINT = &amp;#34;http://192.168.40.77:9001&amp;#34;; /** 公钥 */ String ACCESS_KEY = &amp;#34;20tW6cOfZjzqOn2EtVKE&amp;#34;; /** 私钥 */ String SECRET_KEY = &amp;#34;eCY0zJQ6t7FoQfiKovFcjfrrOAdVvf7MMhE5jJJb&amp;#34;; /** 桶名 */ String BUCKET_NAME = &amp;#34;lesson-bucket&amp;#34;; } 封装MinIO工具类 MinioUtil: package com.lsx.util; /** @author lsx */ @Slf4j public class MinioUtil { /** Minio客户端 */ private static MinioClient minioClient; static { try { // 创建MinIO客户端 minioClient = new MinioClient(MinioConst.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/frag/%E6%AE%8B%E5%8D%B7-Redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/frag/%E6%AE%8B%E5%8D%B7-Redis/</guid><description>RedisForWin单机服务 搭建Redis服务端 武技: 在Windows中搭建Redis单机服务
下载安装Redis服务: 下载后直接解压缩即可: Redis官网提供 RedisForLinux GitHub提供 RedisForWindows 偶数版本号如3.0为稳定版，奇数版本号如3.1为不稳定版。 Redis2.8+支持Redis-sentinel哨兵 Redis3.0+支持redis-cluster集群。 解析Redis目录: redis-server.exe: 服务端程序，提供Redis服务。 redis-cli.exe: 客户端程序，通过它连接Redis服务和操作数据。 redis-check-aof.exe: 更新日志检查工具，用于对AOF文件进行修复。 redis-benchmark.exe: 性能测试工具，用于模拟客户端向服务端发送操作请求。 redis.windows.conf: Redis主配文件，在将Redis作为第三方软件使用时生效。 redis.windows-service.conf: Redis主配文件，在将Redis作为系统服务使用时生效。 启动Redis服务端 武技: 在Windows环境下启动Redis服务端
在Redis家目录新建 start 目录，将Redis的客户端和服务端的exe程序都拷贝到该目录下。 开发配置文件 start/6379.conf: 初始内容可以从 redis.windows.conf 中复制。 使用 findstr /V &amp;quot;#&amp;quot; redis.windows.conf 可去除注释查看内容。 # 配置Redis服务的IP地址，127.0.0.1用于自动获取本机IP地址 bind 127.0.0.1 # 配置Redis服务的端口号，是同一IP地址下，不同服务的标识 port 6379 # 配置连接超时时间，单位秒: 若该时间内，客户端和服务端都没有进行数据交互则断开连接 # 0表示永不断开 timeout 0 # 配置数据目录，RDB快照和AOF文件都会存储在这里 dir ./ # 配置客户端连接服务端时，需要的密码，该项配置用于提高安全性 requirepass 123 启动Redis服务端: 服务器运行需要一直保持CMD窗口。 # 进入start目录 cd D:\redis\redis-x64-3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/Jedis%E5%8D%95%E6%9C%BA%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/Jedis%E5%8D%95%E6%9C%BA%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</guid><description>S01. 封装Jedis单机工具 封装单机Redis版本的Jedis连接工具: com.lsx.util.JedisStandaloneUtil
/** @author lsx */ public class JedisStandaloneUtil { /** Jedis连接池 */ private static final JedisPool jedisPool; /** Jedis超时时间 */ private static final int TIMEOUT = 10000; /** Redis主机地址 */ private static final String HOST = &amp;#34;192.168.40.77&amp;#34;; /** Redis端口号 */ private static final int PORT = 6379; /** Jedis连接池最大连接 */ private static final int MAX_TOTAL = 8; /** Jedis连接池最大阻塞时间 */ private static final long MAX_WAIT_MILLIS = 10000L; /** Jedis连接池最大空闲 */ private static final int MAX_IDLE = 8; /** Jedis连接池最小空闲 */ private static final int MIN_IDLE = 0; static { // 初始化Jedis连接池配置实例 JedisPoolConfig poolConfig = new JedisPoolConfig(); poolConfig.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/Jedis%E5%93%A8%E5%85%B5%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/Jedis%E5%93%A8%E5%85%B5%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</guid><description>S01. 封装Jedis哨兵工具 封装哨兵Redis版本的Jedis连接工具： com.lsx.util.JedisSentinelUtil
/** @author lsx */ public class JedisSentinelUtil { /** Jedis超时时间 */ private static final int TIMEOUT = 10000; /** Jedis连接池最大连接 */ private static final int MAX_TOTAL = 8; /** Jedis连接池最大阻塞时间 */ private static final long MAX_WAIT_MILLIS = 10000L; /** Jedis连接池最大空闲 */ private static final int MAX_IDLE = 8; /** Jedis连接池最小空闲 */ private static final int MIN_IDLE = 0; /** 哨兵模式: Jedis哨兵连接池 */ private static final JedisSentinelPool jedisSentinelPool; /** 哨兵模式: 全部哨兵节点端口号集合，格式: [&amp;#34;IP:PORT&amp;#34;, &amp;#34;IP:PORT&amp;#34;, &amp;#34;IP:PORT&amp;#34;] */ private static final Set&amp;lt;String&amp;gt; SENTINEL_NODES = Set.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/Jedis%E9%9B%86%E7%BE%A4%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/Jedis%E9%9B%86%E7%BE%A4%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</guid><description>S01. 封装Jedis集群工具 测试哨兵Redis版本的Jedis连接工具： com.lsx.util.JedisClusterUtil
/** @author lsx */ public class JedisClusterUtil { /** Jedis超时时间 */ private static final int TIMEOUT = 10000; /** Jedis连接池最大连接 */ private static final int MAX_TOTAL = 8; /** Jedis连接池最大阻塞时间 */ private static final long MAX_WAIT_MILLIS = 10000L; /** Jedis连接池最大空闲 */ private static final int MAX_IDLE = 8; /** Jedis连接池最小空闲 */ private static final int MIN_IDLE = 0; /** 集群模式: Jedis集群连接池 */ private static final JedisCluster jedisCluster; /** 集群模式: 全部集群节点端口号，逗号分割 */ private static final Set&amp;lt;HostAndPort&amp;gt; CLUSTER_NODES = Set.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/redis.conf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/redis.conf/</guid><description># Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when memory size is needed, it is possible to specify # it in the usual form of 1k 5GB 4M and so forth: # # 1k =&amp;gt; 1000 bytes # 1kb =&amp;gt; 1024 bytes # 1m =&amp;gt; 1000000 bytes # 1mb =&amp;gt; 1024*1024 bytes # 1g =&amp;gt; 1000000000 bytes # 1gb =&amp;gt; 1024*1024*1024 bytes # # units are case insensitive so 1GB 1Gb 1gB are all the same.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/RedisUtil%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/res/RedisUtil%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85/</guid><description>S01. 封装Redis工具 com.lsx.util.RedisUtil
/** @author lsx */ @Component public class RedisUtil { @Autowired private StringRedisTemplate stringRedisTemplate; /** * 获取 StringRedisTemplate 对象 * * @return StringRedisTemplate 对象 */ public StringRedisTemplate getStringRedisTemplate() { return this.stringRedisTemplate; } /** * COMMON: 按缓存名单删一条缓存记录 * * @param key 缓存名 */ public void del(String key) { stringRedisTemplate.delete(key); } /** * COMMON: 按缓存名的集合批删多条缓存记录 * * @param keys 缓存名的集合 */ public void del(Set&amp;lt;String&amp;gt; keys) { stringRedisTemplate.delete(keys); } /** * COMMON: 按缓存名查询该缓存记录是否存在 * * @param key 缓存名 * @return true表示缓存记录存在，false表示缓存记录不存在 */ public boolean exists(String key) { return Boolean.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-6-ElasticSearch/frag/%E6%AE%8B%E5%8D%B7-ElasticSearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-6-ElasticSearch/frag/%E6%AE%8B%E5%8D%B7-ElasticSearch/</guid><description>Windows搭建ES服务 在Windows上搭建ElasticSearch服务端需要依赖正确的JDK环境。 搭建ES单机服务端 武技: 在Windows上安装ElasticSearch服务端
下载 ES服务端 : res: elasticsearch-7.11.2-windows-x86_64.zip: 解压缩到硬盘。 启动ES服务端: 双击 @\bin\elasticsearch.bat: 提示 started 表示启动成功。 cli: localhost:9200: 访问ES服务端，默认9200端口。 搭建ES集群服务端 武技: 在Windows上搭建ES集群
创建集群目录 es-cluster: 拷贝两个ES服务端根目录到集群目录中: D:\elasticsearch\es-cluster\es-node-a: ES-A节点目录。 D:\elasticsearch\es-cluster\es-node-b: ES-B节点目录。 删除两个ES节点的 data 目录全部删除以保证节点数据一致性。 修改两个ES节点的主配 @/config/elasticsearch.yml: cluster.name: es-cluster: 集群名，默认 elasticsearch，必须保证两个ES节点的集群名一致。 node.name: es-node-a: 节点名，必须保证两个ES节点的名称不一致。 node.master: true: 该节点拥有成为master的资格。 node.data: true: 该节点允许存储数据。 network.host: 127.0.0.1: 该ES节点所在的服务器IP，0.0.0.0 表示允许所有IP对我访问。 http.port: 9201: 该ES节点的端口号，默认9200。 transport.tcp.port: 9301: 该ES节点的内部集群间通信端口号，必须保证与ES节点端口号不同。 discovery.zen.ping.unicast.hosts: [&amp;quot;127.0.0.1:9301&amp;quot;, &amp;quot;127.0.0.1:9302&amp;quot;]: 集群节点列表。 cluster.initial_master_nodes: es-node-a: 配置初始主节点名。 http.cors.enabled: true: 允许被跨域访问，默认false。 http.cors.allow-origin: &amp;quot;*&amp;quot;: 允许所有域名对我进行访问，值为RE表达式。 tips: 不要在yml中添加注释。 启动两个ES节点: 通过任一节点测试: cli: localhost:9201/9202: 分别查看两个节点信息。 cli: localhost:9201/_cat/health?</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-8-Nginx/frag/%E6%AE%8B%E5%8D%B7-Nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-8-Nginx/frag/%E6%AE%8B%E5%8D%B7-Nginx/</guid><description>Windows安装Nginx服务器 下载nginx for windows服务： res：nginx-1.20.2.zip：解压缩即可。 nginx启动须知：以下对 @/logs/nginx.pid 简称PID文件： 使用CMD命令启动nginx服务时，会自动生成PID文件，该文件用于记录nginx服务中master进程的ID号。 使用CMD命令关闭nginx服务时，会根据PID文件内容来结束nginx所有后台进程，然后自动删除PID文件。 多次启动nginx服务不会端口占用，但会覆盖PID文件中的内容，进而导致之前的nginx进程失联并泄露，不建议。 双击 nginx.exe 也可以启动nginx服务，但不会生成PID文件，此时只能在任务管理器中手动结束相关进程，不建议。 武技：启动并访问nginx服务器
启动nginx服务：先切换到nginx家目录： cmd：start nginx：启动nginx服务并生成PID文件。 cmd：tasklist | findstr &amp;quot;nginx*&amp;quot;：查看nginx服务启动的两个 nginx.exe 后台进程。 cmd：netstat -ano | findstr &amp;quot;80&amp;quot;：确认nginx默认的80端口是否正在被worker进程监听。 cmd：taskkill /pid 进程号 /f：强制结束某个后台进程。 cmd：nginx -s stop：关闭nginx服务，结束所有相关进程，并删除PID文件，若PID文件不存在则报错。 访问nginx服务器，查看环境界面： cli：localhost:80：默认端口号80，80可省略。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/mindmap/Vue%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/mindmap/Vue%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid><description>Vue相关基础概念 Node 承载前端项目的服务器 相当于Tomcat服务器 NodeJs 运行在Node服务器上的JavaScript代码 相当于Java代码 NPM 基本概念 NodeJs的模块管理工具，也叫包管理工具 相当于Maven管理工具 Node服务器默认集成了NPM工具，但不一定是最新版 常用命令 查看全局模块安装位置 npm root -g 查看NPM配置信息列表 npm config list 查看NPM安装模块列表 全局模块 npm list -g 局部模块 npm list NPM安装模块 本地安装 npm install xxx 仅当node_modules中不存在该依赖时安装该依赖。 如果要安装模块的特定版本，可以在模块名后面加上@和版本号。 模块名不写入package.json中 npm i xxx 简写形式 npm i xxx@版本号 不指定版本号则默认安装最新版 全局安装 npm i xxx -g -g 同 -global 强制安装 npm i xxx -f 指定模块不管是否已经安装过，都要强制重新安装 -f 同 &amp;ndash;force 生产安装 npm i xxx -S 模块名将被添加到package.json中的dependencies -S 同 &amp;ndash;save 开发安装 npm i xxx -D 模块名将被添加到package.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/mindmap/Vue%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/mindmap/Vue%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</guid><description>Vue环境搭建流程 卸载Node 删除相关文件 C:\Users\用户\ 中的 .npmrc 文件 C:\Users\用户\ 中的 .cnpmrc 文件 可能不存在 C:\Users\用户\ 中的 .vuerc 文件 删除安装目录 Node安装目录及其中的全部文件 从控制面板卸载Node服务器 免安装版本的略过此步骤 A）通过NVM安装Node 先彻底卸载Node，否则安装失败 下载NVM管理器 下载地址 https://github.com/coreybutler/nvm-windows/releases/tag/1.1.12 下载文件 nvm-setup.exe 安装NVM管理器 傻瓜式安装 选择NVM路径 推荐 D:\node\nvm 选择NodeJs路径 推荐 D:\node\nodejs 确认环境变量 注意用户变量和环境变量都需要配置 NVM_HOME = D:\node\nvm NVM_SYMLINK = D:\node\nodejs PATH += %NVM_HOME%, %NVM_SYMLINK% 查看NVM版本 nvm -v 预期 1.1.12 安装指定的Node版本 nvm install 20.12.0 管理员模式命令 若速度过慢可用命令配镜像源 nvm node_mirror https://npm.taobao.org/mirrors/node/ nvm npm_mirror https://npm.taobao.org/mirrors/npm/ 查看当前已安装的Node版本 nvm ls *号表示当前正在用 切换Node版本 nvm use 20.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/qa/JB3-9-Vue-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/qa/JB3-9-Vue-QA/</guid><description> 代码 含义 &amp;lt;p&amp;gt;{{ name }}&amp;lt;/div&amp;gt; &amp;lt;p v-html=&amp;quot;html&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;a v-bind:href=&amp;quot;to&amp;quot;&amp;gt;按钮&amp;lt;/a&amp;gt; &amp;lt;a :href=&amp;quot;to&amp;quot;&amp;gt;按钮&amp;lt;/a&amp;gt; &amp;lt;a v-on:click=&amp;quot;info&amp;quot;&amp;gt;按钮&amp;lt;/a&amp;gt; &amp;lt;a @click=&amp;quot;info&amp;quot;&amp;gt;按钮&amp;lt;/a&amp;gt; let a = ref(0) let a = shallowRef(0) let a = reactive({}) let a = shallowReactive({}) let a = computed(() =&amp;gt; a + 1) &amp;lt;p v-if=&amp;quot;score &amp;lt; 60&amp;quot;&amp;gt;不及格&amp;lt;/div&amp;gt; &amp;lt;p v-for=&amp;quot;n in 10&amp;quot;&amp;gt;{{ n }}&amp;lt;/span&amp;gt; &amp;lt;p v-for=&amp;quot;user in users&amp;quot; :key=&amp;quot;user['id']&amp;quot;&amp;gt;{{ user }}&amp;lt;/p&amp;gt; &amp;lt;p v-for=&amp;quot;(v, k, i) in user&amp;quot; :key=&amp;quot;user['k']&amp;quot;&amp;gt;{{ v }}&amp;lt;/p&amp;gt; &amp;lt;input v-model=&amp;quot;message&amp;quot; /&amp;gt; onBeforeMount(() =&amp;gt; {}) onMounted(() =&amp;gt; {}) watch(num, (n1, n2) =&amp;gt; { alert(n1 + n2) }) defineProps(['content'])</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/element-plus-2.4.2.css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/element-plus-2.4.2.css/</guid><description>@charset &amp;#34;UTF-8&amp;#34;;:root{--el-color-white:#ffffff;--el-color-black:#000000;--el-color-primary-rgb:64,158,255;--el-color-success-rgb:103,194,58;--el-color-warning-rgb:230,162,60;--el-color-danger-rgb:245,108,108;--el-color-error-rgb:245,108,108;--el-color-info-rgb:144,147,153;--el-font-size-extra-large:20px;--el-font-size-large:18px;--el-font-size-medium:16px;--el-font-size-base:14px;--el-font-size-small:13px;--el-font-size-extra-small:12px;--el-font-family:&amp;#39;Helvetica Neue&amp;#39;,Helvetica,&amp;#39;PingFang SC&amp;#39;,&amp;#39;Hiragino Sans GB&amp;#39;,&amp;#39;Microsoft YaHei&amp;#39;,&amp;#39;微软雅黑&amp;#39;,Arial,sans-serif;--el-font-weight-primary:500;--el-font-line-height-primary:24px;--el-index-normal:1;--el-index-top:1000;--el-index-popper:2000;--el-border-radius-base:4px;--el-border-radius-small:2px;--el-border-radius-round:20px;--el-border-radius-circle:100%;--el-transition-duration:0.3s;--el-transition-duration-fast:0.2s;--el-transition-function-ease-in-out-bezier:cubic-bezier(0.645, 0.045, 0.355, 1);--el-transition-function-fast-bezier:cubic-bezier(0.23, 1, 0.32, 1);--el-transition-all:all var(--el-transition-duration) var(--el-transition-function-ease-in-out-bezier);--el-transition-fade:opacity var(--el-transition-duration) var(--el-transition-function-fast-bezier);--el-transition-md-fade:transform var(--el-transition-duration) var(--el-transition-function-fast-bezier),opacity var(--el-transition-duration) var(--el-transition-function-fast-bezier);--el-transition-fade-linear:opacity var(--el-transition-duration-fast) linear;--el-transition-border:border-color var(--el-transition-duration-fast) var(--el-transition-function-ease-in-out-bezier);--el-transition-box-shadow:box-shadow var(--el-transition-duration-fast) var(--el-transition-function-ease-in-out-bezier);--el-transition-color:color var(--el-transition-duration-fast) var(--el-transition-function-ease-in-out-bezier);--el-component-size-large:40px;--el-component-size:32px;--el-component-size-small:24px}:root{color-scheme:light;--el-color-white:#ffffff;--el-color-black:#000000;--el-color-primary:#409eff;--el-color-primary-light-3:#79bbff;--el-color-primary-light-5:#a0cfff;--el-color-primary-light-7:#c6e2ff;--el-color-primary-light-8:#d9ecff;--el-color-primary-light-9:#ecf5ff;--el-color-primary-dark-2:#337ecc;--el-color-success:#67c23a;--el-color-success-light-3:#95d475;--el-color-success-light-5:#b3e19d;--el-color-success-light-7:#d1edc4;--el-color-success-light-8:#e1f3d8;--el-color-success-light-9:#f0f9eb;--el-color-success-dark-2:#529b2e;--el-color-warning:#e6a23c;--el-color-warning-light-3:#eebe77;--el-color-warning-light-5:#f3d19e;--el-color-warning-light-7:#f8e3c5;--el-color-warning-light-8:#faecd8;--el-color-warning-light-9:#fdf6ec;--el-color-warning-dark-2:#b88230;--el-color-danger:#f56c6c;--el-color-danger-light-3:#f89898;--el-color-danger-light-5:#fab6b6;--el-color-danger-light-7:#fcd3d3;--el-color-danger-light-8:#fde2e2;--el-color-danger-light-9:#fef0f0;--el-color-danger-dark-2:#c45656;--el-color-error:#f56c6c;--el-color-error-light-3:#f89898;--el-color-error-light-5:#fab6b6;--el-color-error-light-7:#fcd3d3;--el-color-error-light-8:#fde2e2;--el-color-error-light-9:#fef0f0;--el-color-error-dark-2:#c45656;--el-color-info:#909399;--el-color-info-light-3:#b1b3b8;--el-color-info-light-5:#c8c9cc;--el-color-info-light-7:#dedfe0;--el-color-info-light-8:#e9e9eb;--el-color-info-light-9:#f4f4f5;--el-color-info-dark-2:#73767a;--el-bg-color:#ffffff;--el-bg-color-page:#f2f3f5;--el-bg-color-overlay:#ffffff;--el-text-color-primary:#303133;--el-text-color-regular:#606266;--el-text-color-secondary:#909399;--el-text-color-placeholder:#a8abb2;--el-text-color-disabled:#c0c4cc;--el-border-color:#dcdfe6;--el-border-color-light:#e4e7ed;--el-border-color-lighter:#ebeef5;--el-border-color-extra-light:#f2f6fc;--el-border-color-dark:#d4d7de;--el-border-color-darker:#cdd0d6;--el-fill-color:#f0f2f5;--el-fill-color-light:#f5f7fa;--el-fill-color-lighter:#fafafa;--el-fill-color-extra-light:#fafcff;--el-fill-color-dark:#ebedf0;--el-fill-color-darker:#e6e8eb;--el-fill-color-blank:#ffffff;--el-box-shadow:0px 12px 32px 4px rgba(0, 0, 0, 0.04),0px 8px 20px rgba(0, 0, 0, 0.08);--el-box-shadow-light:0px 0px 12px rgba(0, 0, 0, 0.12);--el-box-shadow-lighter:0px 0px 6px rgba(0, 0, 0, 0.12);--el-box-shadow-dark:0px 16px 48px 16px rgba(0, 0, 0, 0.08),0px 12px 32px rgba(0, 0, 0, 0.12),0px 8px 16px -8px rgba(0, 0, 0, 0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/element-plus-2.4.2.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/element-plus-2.4.2.js/</guid><description>/*! Element Plus v2.4.2 */ (function (global, factory) { typeof exports === &amp;#39;object&amp;#39; &amp;amp;&amp;amp; typeof module !== &amp;#39;undefined&amp;#39; ? factory(exports, require(&amp;#39;vue&amp;#39;)) : typeof define === &amp;#39;function&amp;#39; &amp;amp;&amp;amp; define.amd ? define([&amp;#39;exports&amp;#39;, &amp;#39;vue&amp;#39;], factory) : (global = typeof globalThis !== &amp;#39;undefined&amp;#39; ? globalThis : global || self, factory(global.ElementPlus = {}, global.Vue)); })(this, (function (exports, vue) { &amp;#39;use strict&amp;#39;; const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=&amp;#34;-1&amp;#34;]),input:not([disabled]),input:not([type=&amp;#34;hidden&amp;#34;]),select:not([disabled]),textarea:not([disabled])`; const isVisible = (element) =&amp;gt; { const computed = getComputedStyle(element); return computed.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/vue-3.3.7.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/vue-3.3.7.js/</guid><description>var Vue = (function (exports) { &amp;#39;use strict&amp;#39;; function makeMap(str, expectsLowerCase) { const map = /* @__PURE__ */ Object.create(null); const list = str.split(&amp;#34;,&amp;#34;); for (let i = 0; i &amp;lt; list.length; i++) { map[list[i]] = true; } return expectsLowerCase ? (val) =&amp;gt; !!map[val.toLowerCase()] : (val) =&amp;gt; !!map[val]; } const EMPTY_OBJ = Object.freeze({}) ; const EMPTY_ARR = Object.freeze([]) ; const NOOP = () =&amp;gt; { }; const NO = () =&amp;gt; false; const onRE = /^on[^a-z]/; const isOn = (key) =&amp;gt; onRE.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85ApacheECharts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85ApacheECharts/</guid><description>武技: 在Vue项目中整合ECharts
1. 局部安装ECharts # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 局部安装ECharts组件 npm install echarts@5.4.3 -S # 查看本项目中的npm模块（非全局） npm list 2. 测试ECharts 测试 - 布局： &amp;lt;div id=&amp;#34;main&amp;#34; style=&amp;#34;width: 600px; height: 400px&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 测试 - 脚本： import {onMounted} from &amp;#34;vue&amp;#34;; import * as echarts from &amp;#39;echarts&amp;#39;; onMounted(() =&amp;gt; { // 基于准备好的dom，初始化echarts实例 let myChart = echarts.init(document.getElementById(&amp;#39;main&amp;#39;)); // 指定图表的配置项和数据 let option = { title: {text: &amp;#39;ECharts 入门示例&amp;#39;}, tooltip: {}, legend: {data: [&amp;#39;销量&amp;#39;]}, xAxis: {data: [&amp;#39;衬衫&amp;#39;, &amp;#39;羊毛衫&amp;#39;, &amp;#39;雪纺衫&amp;#39;, &amp;#39;裤子&amp;#39;, &amp;#39;高跟鞋&amp;#39;, &amp;#39;袜子&amp;#39;]}, yAxis: {}, series: [{name: &amp;#39;销量&amp;#39;, type: &amp;#39;bar&amp;#39;, data: [5, 20, 36, 10, 10, 20]}] }; // 使用刚指定的配置项和数据显示图表。 myChart.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85Axios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85Axios/</guid><description>S01. 安装Axios工具 武技: 在Vue项目中整合Axios工具
局部安装Axios工具: # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 安装Axios组件组件 npm install axios@1.6.7 -S # 查看本项目中的npm模块（非全局） npm list</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85ElementPlus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85ElementPlus/</guid><description>心法: Vue安装ElementPlus完整流程
flowchart LR n1[&amp;#34;安装&amp;lt;br/&amp;gt;EP组件库&amp;#34;] --&amp;gt; n2[&amp;#34;导入&amp;lt;br/&amp;gt;EP组件库&amp;#34;] --&amp;gt; n3[&amp;#34;安装&amp;lt;br/&amp;gt;EP图标库&amp;#34;] --&amp;gt; n4[&amp;#34;导入&amp;lt;br/&amp;gt;EP图标库&amp;#34;] --&amp;gt; n5[&amp;#34;安装&amp;lt;br/&amp;gt;EP暗黑库&amp;#34;] --&amp;gt; n6[&amp;#34;引入&amp;lt;br/&amp;gt;EP暗黑样式文件&amp;#34;] S01. 安装组件库 武技: 在Vue项目中安装ElementPlus组件库
1. 安装ElementPlus组件库 # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 局部安装ElementPlus组件库 npm install element-plus@2.5.3 -S # 查看安装的依赖 npm list 2. 导入ElementPlus组件库 main.js
// ElementPlus组件库: 核心对象，核心CSS，显隐CSS import ElementPlus from &amp;#39;element-plus&amp;#39;; import &amp;#39;element-plus/dist/index.css&amp;#39;; import &amp;#39;element-plus/theme-chalk/display.css&amp;#39;; // 使用ElementPlus组件库 const app = createApp(App); app.use(store).use(router).use(ElementPlus).mount(&amp;#39;#app&amp;#39;); S02. 安装图标库 武技: 在Vue项目中安装ElementPlus图标库
1. 安装ElementPlus图标库 # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 局部安装ElementPlus图标库 npm install @element-plus/icons-vue@2.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85MavonEditor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85MavonEditor/</guid><description>S01. MavonEditor E01. 安装编辑器 # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 局部安装 MavonDditor 组件：注意不要安装@latest版本，它会安装2.10.4的版本 npm i mavon-editor@3.0.1 --S # 查看本项目中的npm模块（非全局） npm list E02. 导入MavonEditor组件库 main.js
// MavonEditor编辑器: 核心对象，核心CSS import mavonEditor from &amp;#39;mavon-editor&amp;#39;; import &amp;#39;mavon-editor/dist/css/index.css&amp;#39;; // 使用 MavonEditor 编辑器组件库 const app = createApp(App); app.use(mavonEditor).mount(&amp;#39;#app&amp;#39;); E03. 测试编辑器 测试 - 布局: &amp;lt;!--MD编辑器--&amp;gt; &amp;lt;section style=&amp;#34;height: 300px; margin: 50px&amp;#34;&amp;gt; &amp;lt;mavon-editor ref=&amp;#34;myEditor&amp;#34; v-model=&amp;#34;content&amp;#34;/&amp;gt; &amp;lt;/section&amp;gt; 测试 - 脚本: import {QuillEditor} from &amp;#39;@vueup/vue-quill&amp;#39; import &amp;#39;@vueup/vue-quill/dist/vue-quill.snow.css&amp;#39;; import {ref, shallowRef} from &amp;#34;vue&amp;#34;; // 当前富文本编辑器对象 const mavonEditorRef = ref(); let content = shallowRef(&amp;#39;&amp;#39;); S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85QuillEditor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85QuillEditor/</guid><description>E01. 安装模块 1. 安装编辑器 # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 局部安装QuillEditor组件 npm i @vueup/vue-quill@1.2.0 -S # 查看本项目中的npm模块（非全局） npm list 2. 测试编辑器 测试 - 布局: &amp;lt;!--富文本编辑器--&amp;gt; &amp;lt;section style=&amp;#34;height: 300px; margin: 50px&amp;#34;&amp;gt; &amp;lt;QuillEditor ref=&amp;#34;myQuillEditor&amp;#34; :toolbar=&amp;#34;toolbar&amp;#34; content-type=&amp;#39;html&amp;#39; placeholder=&amp;#34;请输入&amp;#34; @update:content=&amp;#34;onEditorChange($event)&amp;#34;/&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;!--提交按钮--&amp;gt; &amp;lt;el-button type=&amp;#34;button&amp;#34; @click=&amp;#34;submit&amp;#34;&amp;gt;{{ curLength }}/500 提交&amp;lt;/el-button&amp;gt; 测试 - 脚本: import {QuillEditor} from &amp;#39;@vueup/vue-quill&amp;#39; import &amp;#39;@vueup/vue-quill/dist/vue-quill.snow.css&amp;#39;; import {shallowRef} from &amp;#34;vue&amp;#34;; // 当前富文本编辑器对象 let myQuillEditor = shallowRef(); // 当前QuillEditor中的TEXT内容大小 let curLength = shallowRef(0); // QuillEditor自定义工具栏选项 const toolbar = [ [&amp;#39;bold&amp;#39;, &amp;#39;italic&amp;#39;, &amp;#39;underline&amp;#39;, &amp;#39;strike&amp;#39;], // 有序列表，无序列表 [{list: &amp;#39;ordered&amp;#39;}, {list: &amp;#39;bullet&amp;#39;}], // 标题 [{header: [1, 2, 3, 4, 5, 6, false]}], // 前景色，背景色 [{color: []}, {background: []}], // 对齐方式 [{align: []}], ] // 当QuillEditor内容改变时触发 function onEditorChange(e) { curLength.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85Vant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85Vant/</guid><description>S01. 安装Vant 武技: 在Vue项目中安装Vant组件库
局部安装Vant组件库: # 进入子项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 安装Vant组件 npm i vant@4.6.0 -S; # 安装插件: 可以自动引入组件，并按需引入组件的样式 npm i @vant/auto-import-resolver@1.1.0 -D; npm i unplugin-vue-components@0.24.1 -D; npm i unplugin-auto-import@0.17.5 -D; # 查看本项目中的npm模块（非全局） npm list S02. 配置Vant 武技: 在Vue项目中配置Vant组件库
E01. 配置Vant插件 @/vue.config.js
// vant相关 const { VantResolver } = require(&amp;#39;@vant/auto-import-resolver&amp;#39;); const Components = require(&amp;#39;unplugin-vue-components/webpack&amp;#39;); module.exports = defineConfig({ // .. // 配置Vant插件: 它可以自动引入组件，并按需引入组件的样式 configureWebpack: { plugins: [ Components({ resolvers: [VantResolver()] }), ], }, }) E02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85XGPlayer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/res/Vue%E5%AE%89%E8%A3%85XGPlayer/</guid><description>S01. 安装模块 1. 安装播放器 # 切换到当前项目 D: cd D:\idea\workspace\java-book\v3-9-ssm-vue # 局部安装XGPlayer组件 npm install xgplayer@3.0.11 -S # 查看本项目中的npm模块（非全局） npm list 2. 测试播放器 测试 - 布局: &amp;lt;article style=&amp;#34;margin: 50px auto;width: 600px;height: 337px;&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;player&amp;#34;/&amp;gt; &amp;lt;/article&amp;gt; 测试 - 脚本: // 西瓜播放器: 核心实例，核心CSS，弹幕插件，弹幕CSS import Player from &amp;#39;xgplayer&amp;#39;; import &amp;#39;xgplayer/dist/index.min.css&amp;#39;; import Danmu from &amp;#39;xgplayer/es/plugins/danmu&amp;#39;; import &amp;#39;xgplayer/es/plugins/danmu/index.css&amp;#39;; import {onMounted} from &amp;#34;vue&amp;#34;; // 西瓜播放器 let player = null; // 初始化西瓜播放器 function initPlayer() { // 欢迎弹幕配置 const welcomeDanmu = { duration: 15000, // 弹幕持续显示时间，毫秒，最低为5000 id: &amp;#39;1&amp;#39;, // 弹幕ID，必须唯一 start: 3000, // 弹幕出现时间，毫秒 prior: true, // 该条弹幕优先显示，默认false color: true, // 该条弹幕为彩色弹幕，默认false txt: &amp;#39;一大波弹幕即将来袭&amp;#39;, // 弹幕内容 style: {color: &amp;#39;red&amp;#39;, fontSize: &amp;#39;20px&amp;#39;, padding: &amp;#39;20px&amp;#39;}, // 弹幕样式 mode: &amp;#39;scroll&amp;#39; // 显示模式，top顶部居中，bottom底部居中，scroll滚动，默认为scroll }; // 西瓜播放器配置 const config = { id: &amp;#39;player&amp;#39;, // 绑定DOM元素的ID值 url: &amp;#39;http://192.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/frag/Redis%E9%9B%86%E5%88%86%E5%AE%9D%E4%B8%9A%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/frag/Redis%E9%9B%86%E5%88%86%E5%AE%9D%E4%B8%9A%E5%8A%A1/</guid><description>&amp;mdash;E17. Redis积分宝业务 武技: 在子项目 lesson-server 中开发积分宝相关业务
开发积分宝任务类 PointsTask: package com.lsx.component; /** @author lsx */ @Slf4j @Component public class PointsTask { @Autowired private RedisUtil redisUtil; private final String POINTS_KEY_PREFIX = &amp;#34;lesson:points:user-&amp;#34;; /** * 用户下单成功购买商品后，异步为用户添加积分 * * @param userId User主键 * @param totalFee 订单总金额 * @return Future类型的提示字符串 */ @SneakyThrows @Async public Future&amp;lt;String&amp;gt; addPoints(Integer userId, double totalFee) { // 校验参数 if (ObjectUtil.hasNull(userId, totalFee)) { throw new RuntimeException(&amp;#34;必要参数为空&amp;#34;); } // 组装key值: 使用固定前缀拼接用户的主键字符串作为key值 String key = POINTS_KEY_PREFIX + userId; // 添加积分 redisUtil.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/cms_banner.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/cms_banner.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`cms_banner`; create table if not exists lesson.`cms_banner` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `url` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;图片地址&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `weight` int unsigned not null default 0 comment &amp;#39;权重，数字越小越优先&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;横幅表&amp;#39;; S02. 表数据 -- record insert into lesson.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/cms_comment.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/cms_comment.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`cms_comment`; create table if not exists lesson.`cms_comment` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `type` tinyint unsigned not null default 0 comment &amp;#39;评论类型，0集次，1评论&amp;#39;, `fk_episode_id` int unsigned comment &amp;#39;集次ID，集次表外键&amp;#39;, `fk_comment_id` int unsigned comment &amp;#39;评论ID，评论表外键&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;评论人ID，会员表外键&amp;#39;, `content` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;评论内容&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;评论表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/cms_report.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/cms_report.sql/</guid><description>S01. 表结构 -- data drop table if exists lesson.`cms_report`; create table if not exists lesson.`cms_report` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `type` tinyint unsigned not null default 0 comment &amp;#39;举报类型，0课程，1评论&amp;#39;, `reason` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;举报理由&amp;#39;, `fk_course_id` int unsigned comment &amp;#39;课程表ID，课程表外键&amp;#39;, `fk_comment_id` int unsigned comment &amp;#39;评论表ID，评论表外键&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;举报人ID，会员表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;举报表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_cart.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_cart.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`oms_cart`; create table if not exists lesson.`oms_cart` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;会员表ID，会员表外键&amp;#39;, `fk_course_id` int unsigned comment &amp;#39;课程表ID，课程表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;购物车表&amp;#39;; S02. 表数据 -- record INSERT INTO lesson.oms_cart (id, fk_member_id, fk_course_id) VALUES (1, 2, 3), (2, 2, 4), (3, 3, 5), (4, 4, 5); S3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_coupons.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_coupons.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`oms_coupons`; create table if not exists lesson.`oms_coupons` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `code` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;兑换码&amp;#39;, `name` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;名称&amp;#39;, `value` decimal(8, 2) not null default 0.00 comment &amp;#39;优惠金额，单位分&amp;#39;, `state` tinyint unsigned not null default 0 comment &amp;#39;状态，0可用，1不可用&amp;#39;, `condition` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;满减条件文案&amp;#39;, `description` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;描述信息，优惠券可用时展示&amp;#39;, `reason` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;描述信息，优惠券不可用时展示&amp;#39;, `value_desc` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;优惠金额文案&amp;#39;, `unit_desc` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;优惠金额单位文案&amp;#39;, `start_at` datetime not null default now() comment &amp;#39;生效时间&amp;#39;, `end_at` datetime not null default now() comment &amp;#39;失效时间&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique(`code`) ) comment &amp;#39;优惠卷表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_order.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_order.sql/</guid><description>S01. 表结构 -- data drop table if exists lesson.`oms_order`; create table if not exists lesson.`oms_order` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `sn` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;编号&amp;#39;, `total_amount` decimal(8, 2) not null default 0.00 comment &amp;#39;总金额&amp;#39;, `pay_amount` decimal(8, 2) not null default 0.00 comment &amp;#39;实际支付总金额&amp;#39;, `pay_type` tinyint unsigned not null default 0 comment &amp;#39;支付方式，0未支付，1支付宝，2微信，3其他&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `state` tinyint unsigned not null default 0 comment &amp;#39;状态，0未付款，1已付款，2已发货，3已退款&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;会员表ID，会员表外键&amp;#39;, `fk_coupons_id` int unsigned comment &amp;#39;优惠卷表ID，优惠卷表外键&amp;#39;, `username` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;收货人账号，冗余&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`sn`) ) comment &amp;#39;订单表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_order_course.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/oms_order_course.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`oms_order_course`; create table if not exists `oms_order_course` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `fk_order_id` int unsigned comment &amp;#39;订单表ID，订单表外键&amp;#39;, `fk_course_id` int unsigned comment &amp;#39;课程表ID，课程表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;订单课程关系表&amp;#39;; S02. 表数据 -- record S3. 测试 -- test:</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_category.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_category.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`pms_category`; create table if not exists lesson.`pms_category` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `title` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;标题&amp;#39;, `weight` int unsigned not null default 0 comment &amp;#39;权重，数字越小越优先&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`title`) ) comment &amp;#39;课程类别表&amp;#39;; S02. 表数据 -- record insert into lesson.`pms_category` (`id`, `title`, `weight`) values (1, &amp;#39;后端基础&amp;#39;, 1), (2, &amp;#39;前端基础&amp;#39;, 2), (3, &amp;#39;数据库开发&amp;#39;, 3), (4, &amp;#39;框架开发&amp;#39;, 4), (5, &amp;#39;中间件&amp;#39;, 5), (6, &amp;#39;微服务架构&amp;#39;, 6), (7, &amp;#39;运维基础&amp;#39;, 7), (8, &amp;#39;测试基础&amp;#39;, 8); S3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_course.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_course.sql/</guid><description>S01. 表结构 -- data drop table if exists lesson.`pms_course`; create table if not exists lesson.`pms_course` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `title` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;标题&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;作者ID，会员表外键&amp;#39;, `fk_category_id` int unsigned comment &amp;#39;类别ID，类别表外键&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `summary` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;摘要图地址&amp;#39;, `cover` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;封面图地址&amp;#39;, `price` decimal(8, 2) not null default 0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_course_follow.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_course_follow.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`pms_course_follow`; create table if not exists lesson.`pms_course_follow` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;会员ID，会员表外键&amp;#39;, `fk_course_id` int unsigned comment &amp;#39;课程ID，课程表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;课程收藏关系表&amp;#39;; S02. 表数据 -- record insert into lesson.`pms_course_follow` (`id`, `fk_member_id`, `fk_course_id`) values (1, 2, 1), (2, 2, 2), (3, 3, 2); S3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_episode.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_episode.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`pms_episode`; create table if not exists lesson.`pms_episode` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `title` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;标题&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `weight` int unsigned not null default 0 comment &amp;#39;权重，数字越小越优先&amp;#39;, `video` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;视频地址&amp;#39;, `cover` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;封面图地址&amp;#39;, `fk_season_id` int unsigned comment &amp;#39;季次表ID，季次表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`title`) ) comment &amp;#39;集次表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_season.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/pms_season.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`pms_season`; create table if not exists lesson.`pms_season` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `title` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;标题&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `weight` int unsigned not null default 0 comment &amp;#39;权重，数字越小越优先&amp;#39;, `fk_course_id` int unsigned comment &amp;#39;课程表ID，课程表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`title`) ) comment &amp;#39;季次表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_member.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_member.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`ums_member`; create table if not exists lesson.`ums_member` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `username` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;账号&amp;#39;, `password` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;密码&amp;#39;, `nickname` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;昵称&amp;#39;, `avatar` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;头像地址&amp;#39;, `phone` char(11) not null default &amp;#39;&amp;#39; comment &amp;#39;手机号码&amp;#39;, `email` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;邮箱地址&amp;#39;, `gender` tinyint unsigned not null default 0 comment &amp;#39;性别，0女，1男，2保密&amp;#39;, `age` tinyint unsigned not null default 0 comment &amp;#39;年龄&amp;#39;, `zodiac` char(3) not null default &amp;#39;&amp;#39; comment &amp;#39;星座&amp;#39;, `province` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;省份&amp;#39;, `realname` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;姓名&amp;#39;, `idcard` char(18) not null default &amp;#39;&amp;#39; comment &amp;#39;身份证号&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `fan_count` int unsigned not null default 0 comment &amp;#39;粉丝数&amp;#39;, `state` tinyint unsigned not null default 0 comment &amp;#39;账号状态，0正常，1冻结&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`username`), unique (`phone`), unique (`idcard`), unique (`email`), unique (`nickname`) ) comment &amp;#39;会员表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_member_fan.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_member_fan.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`ums_member_fan`; create table if not exists lesson.`ums_member_fan` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;会员ID，会员表外键&amp;#39;, `fk_fan_id` int unsigned comment &amp;#39;粉丝ID，会员表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;会员粉丝关系表&amp;#39;; S02. 表数据 -- record insert into lesson.`ums_member_fan` (`id`, `fk_member_id`, `fk_fan_id`) values (1, 4, 2), (2, 4, 3); S3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_member_role.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_member_role.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`ums_member_role`; create table if not exists lesson.`ums_member_role` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `fk_member_id` int unsigned comment &amp;#39;会员ID，会员表外键&amp;#39;, `fk_role_id` int unsigned comment &amp;#39;角色ID，角色表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;会员角色关系表&amp;#39;; S02. 表数据 -- record insert into lesson.`ums_member_role` (`id`, `fk_member_id`, `fk_role_id`) values (1, 1, 1), (2, 2, 2),(3, 3, 3), (4, 4, 2), (5, 4, 3); S3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_permission.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_permission.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`ums_permission`; create table if not exists lesson.`ums_permission` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `title` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;标题&amp;#39;, `weight` int unsigned not null default 0 comment &amp;#39;权重，数字越小越优先&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `url` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;跳转地址&amp;#39;, `icon` varchar(256) not null default &amp;#39;&amp;#39; comment &amp;#39;图标&amp;#39;, `pid` int unsigned not null default 0 comment &amp;#39;父权限主键，0视为根节点&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`title`) ) comment &amp;#39;权限表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_role.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_role.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`ums_role`; create table if not exists lesson.`ums_role` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `title` varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;标题&amp;#39;, `weight` int unsigned not null default 0 comment &amp;#39;权重，数字越小越优先&amp;#39;, `info` varchar(512) not null default &amp;#39;&amp;#39; comment &amp;#39;描述&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`), unique (`title`) ) comment &amp;#39;角色表&amp;#39;; S02.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_role_permission.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/sql/ums_role_permission.sql/</guid><description>S01. 表结构 -- table drop table if exists lesson.`ums_role_permission`; create table if not exists lesson.`ums_role_permission` ( `id` int unsigned auto_increment comment &amp;#39;主键&amp;#39;, `fk_role_id` int unsigned comment &amp;#39;角色ID，角色表外键&amp;#39;, `fk_permission_id` int unsigned comment &amp;#39;权限ID，权限表外键&amp;#39;, `created` datetime not null default now() comment &amp;#39;创建时间&amp;#39;, `updated` datetime not null default now() comment &amp;#39;修改时间&amp;#39;, primary key (`id`) ) comment &amp;#39;角色权限关系表&amp;#39;; S02. 表数据 -- record insert into lesson.`ums_role_permission` (`id`, `fk_role_id`, `fk_permission_id`) values (01, 1, 01), (02, 1, 02), (03, 1, 03), (04, 1, 04), (05, 1, 05), (06, 1, 06), (07, 1, 07), (08, 1, 08), (09, 1, 09), (10, 1, 10), (11, 1, 11), (12, 1, 12), (13, 1, 13), (14, 1, 14), (15, 1, 15), (16, 1, 16), (17, 1, 17), (18, 1, 18), (19, 1, 19), (20, 1, 20), (21, 1, 21), (22, 1, 22), (23, 3, 01), (24, 3, 03), (25, 3, 04), (26, 3, 08), (27, 3, 09), (28, 3, 15), (29, 3, 16), (30, 3, 17), (31, 3, 18), (32, 3, 19), (33, 3, 20), (34, 3, 21), (35, 3, 22); S3.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/%E6%AD%A3%E5%88%99%E7%BB%9F%E4%B8%80%E6%A0%A1%E9%AA%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/%E6%AD%A3%E5%88%99%E7%BB%9F%E4%B8%80%E6%A0%A1%E9%AA%8C/</guid><description>S01. 统一字段正则 E01. 登录账号 账号须由4到10个字母或数字组成 [a-zA-Z0-9]{4,10} E02. 登录密码 密码须由4到10个字母或数字组成 [a-zA-Z0-9]{4,10} E03. 用户昵称 昵称须由4到10个中文，字母或数字组成 [\u4e00-\u9fa5_a-zA-Z0-9]{4,10} E04. 真实姓名 姓名须由2到4个中文组成 [\u4e00-\u9fa5]{2,4} E05. 用户年龄 年龄须在16到60之间 E06. 手机号码 手机号码有误 [1-9]\d{5}(19\|20)\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9]) E07. 身份证号 E08. 用户描述 描述须由1到128个中文，字母或数字组成 [\u4e00-\u9fa5_a-zA-Z0-9]{1,128} E09. 电子邮箱 电子邮箱格式不正确 ^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E6%9E%B6%E6%9E%84%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/res/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid><description>lesson项目模块 文档子项目 中文 文档子项目 英文 lesson-document 描述 提供后台子项目 lesson-admin 的API接口文档服务 如查看，修改，删除，添加等 公共子项目 中文 公共子项目 英文 lesson-common 描述 提供公共的工具和模块， 如ORM实体类，公共Mapper父接口，公共工具类等 项目前台 后端 中文 前台后端 英文 lesson-server 描述 提供普通用户功能 如登录注册，搜索视频，购买视频，观看视频等 前端 中文 前台前端 英文 lesson-server-web 描述 提供前台子项目 lesson-server 的前端页面 项目后台 后端 中文 后台后端 英文 lesson-admin 描述 提供管理员用户功能 如用户，视频，订单，日志，权限等模块的管理 前端 中文 后台前端 英文 lesson-admin-web 描述 提供后台子项目 lesson-admin 的前端页面 其他服务 监控服务 中文 监控服务子项目 英文 lesson-monitor 描述 提供SpringAdmin监控服务支持 如检测项目的运行状态，查看项目的资源消耗等 通信服务 中文 通信服务子项目 英文 lesson-websocket 描述 提供WebSocket通信服务支持 如前台子项目 lesson-server 的发送弹幕功能等 搜索服务 中文 搜索服务子项目 英文 lesson-search 描述 提供ElasticSearch搜索服务支持 如视频搜索，修改，删除，添加等</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-5-%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/res/BS%E7%89%88%E5%89%8D%E7%AB%AF/BootStrap%E7%89%88%E5%89%8D%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-5-%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/res/BS%E7%89%88%E5%89%8D%E7%AB%AF/BootStrap%E7%89%88%E5%89%8D%E7%AB%AF/</guid><description>S01. BS首页搭建 E01. 基础环境搭建 心法: BootStrap
BootStrap基础知识见官网。 武技: 在 lesson-admin 子项目中搭建BS使用环境
在 webapp 目录下引入 bootstrap-4.6.2-dist: bootstrap目录: 在 webapp 目录下开发全局样式文件 style\global.css: ::-webkit-scrollbar { display: none; /*隐藏滚动条*/ } td:last-child { padding: 0; /*内边距*/ text-align: center; /*内容居中*/ } img { width: 100%; /*宽度*/ height: 100%; /*高度*/ } textarea { resize: none; /*不允许拖拽*/ } 在 webapp 目录下开发全局脚本文件 script\global.js: /*项目发布名*/ const APP = &amp;#39;&amp;#39;; /*请求成功状态码*/ const successCode = 1000; /*MINIO存储的Bucket地址*/ const MINIO_BUCKET = &amp;#39;http://192.168.40.77:9001/lesson-bucket&amp;#39;; /* 快速获取DOM元素 */ function query(selector){ return document.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/res/%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E4%B8%9A%E5%8A%A1%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/res/%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E4%B8%9A%E5%8A%A1%E5%9B%BE/</guid><description>mindmap-plugin: basic
lesson-server业务 横幅banner top5 查询5条横幅记录 仅查询前5条数据 按权重升序，按主键降序 加入缓存并返回数据 评论comment save 设置默认值 主键：置空 创建时间：当前时间 修改时间：当前时间 添加一条评论记录，失败异常 清空缓存并返回数据 listEpisodeComments 根据集次ID查看评论 按评论时间降序 加入缓存并返回数据 举报report save 设置默认值 主键：置空 创建时间：当前时间 修改时间：当前时间 添加一条举报记录，失败异常 清空缓存并返回数据 购物车cart save 设置默认值 主键：置空 创建时间：当前时间 修改时间：当前时间 添加一条购物车记录，失败异常 清空缓存并返回数据 list 根据会员主键查询购物车记录 联查课程信息 按创建时间降序 加入缓存并返回数据 clear 根据会员主键删除购物车记录 清空缓存并返回数据 remove 根据购物车主键删除一条购物车记录 清空缓存并返回数据 removeBatch 根据购物车主键数组批量删除购物车记录 清空缓存并返回数据 会员member register 检查必要字段，存在则回滚 登录账号 手机号码 身份证号 电子邮箱 检查身份证号是否合法，不合法回滚 设置默认值 昵称：随机7位 性别：根据身份证号识别 年龄：根据身份证号识别 星座：根据身份证号识别 省份：根据身份证号识别 头像：属性.png 粉丝数：0 描述：&amp;ldquo;高级VIP用户&amp;rdquo; 账号状态：正常 创建时间：当前时间 修改时间：当前时间 密码：MD5加密 添加会员记录，失败回滚 添加会员初始角色，失败回滚 将会员信息脱敏 加入缓存并返回数据 loginByAccount 根据账号和密码查询一名会员，失败回滚 构建会员VO实体 脱敏后的会员信息 Token令牌 加入缓存并返回数据 followCourse 判断课程是否存在，不存在异常 判断是否重复收藏课程，重复异常 构建收藏信息实体 主键：null 创建时间：当前时间 修改时间：当前时间 添加课程收藏中间表记录，失败异常 清空缓存并返回数据 unFollowCourse 判断课程是否存在，不存在异常 判断是否还未收藏课程，还未收藏则异常 删除课程收藏中间表记录，失败异常 清空缓存并返回数据 followMember 判断目标会员是否存在，不存在异常 判断是否重复关注该会员，重复异常 构建关注信息实体 主键：null 创建时间：当前时间 修改时间：当前时间 添加会员粉丝中间表记录，失败异常 清空缓存并返回数据 unFollowMember 判断目标会员是否存在，不存在异常 判断是否还未关注该会员，还未关注则异常 删除会员粉丝中间表记录，失败异常 清空缓存并返回数据 getInfo 根据会员主键查询会员信息 对会员信息进行脱敏 加入缓存并返回数据 pageFollowCourse 分页查询我收藏的全部课程 按收藏时间降序 提取全部课程 构建PageVO实体类 加入缓存并返回数据 pageFollowMember 分页查询我关注的全部会员 按关注时间降序 提取全部会员 构建PageVO实体类 加入缓存并返回数据 pageFan 分页查询关注我的全部会员 按关注时间降序 提取全部粉丝 构建PageVO实体类 加入缓存并返回数据 update 检查必要参数，已存在则异常 手机号码 身份证号 电子邮箱 会员昵称 检查身份证号是否合法，不合法异常 修改会员记录，失败异常 清空缓存并返回数据 updatePassword 根据会员主键和旧密码查询会员，不存在异常 根据会员主键修改会员密码，失败异常 清空缓存并返回数据 uploadAvatar 按会员主键查询会员记录，不存在异常 从MinIO中删除旧头像 默认头像不删除 根据文件重新生成文件名 向MinIO中上传新头像 根据会员主键修改会员头像，失败异常 清空缓存并返回新文件名 delete 按会员主键查询会员记录，不存在异常 判断会员账号是否已经被注销，已被注销则异常 修改会员状态为 &amp;ldquo;已注销&amp;rdquo;，失败异常 清空缓存并返回新文件名 优惠券coupons getByCode 根据兑换码查询优惠卷 状态为可用 优惠卷未过期 加入缓存并返回数据 订单order save 检查会员是否存在，失败异常 检查视频是否全都存在，失败异常 检查是否重复购买任意课程，重复异常 构建订单实体 主键：null 订单编号：随机19位 创建时间：当前时间 修改时间：当前时间 订单状态 若支付类型为 &amp;ldquo;未支付&amp;rdquo; 则表示订单状态为 &amp;ldquo;未支付&amp;rdquo; 若支付类型为 &amp;ldquo;已支付&amp;rdquo; 则表示订单状态为 &amp;ldquo;已支付&amp;rdquo; 添加一条订单记录，失败异常 循环添加订单明细表记录，失败异常 清空缓存并返回数据 page 根据会员主键分页查询订单 联查课程 按创建时间降序，按订单主键降序 加入缓存并返回数据 remove 根据订单主键删除订单明细记录，失败异常 根据订单主键删除订单记录，失败异常 清空缓存并返回数据 removeBatch 根据订单主键数组批量删除订单明细记录，失败异常 根据订单主键删除订单记录，失败异常 清空缓存并返回数据 课程course getInfo 根据课程主键查询课程记录 联查类目信息 加入缓存并返回数据 page 分页查询课程信息 联查类目信息 按点赞数降序，按评分降序 加入缓存并返回数据 pageLikeTitle 根据课程标题分页查询课程信息 联查类目信息 按点赞数降序，按评分降序 模糊查询 加入缓存并返回数据</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/res/%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E5%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/res/%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E5%9B%BE/</guid><description>mindmap-plugin: basic
lesson-server接口 横幅banner top5 描述 查看五条横幅记录 类型 GET 响应 List 评论comment save ^e59bce67-fc06-4cb6 描述 添加一条评论 类型 POST 参数 Integer type String content Long fkMemberId 响应 boolean listEpisodeComments/{fkEpisodeId} ^56b58727-73d3-1e92 描述 查看指定视频的评论列表 类型 GET 参数 Long fkMemberId 响应 List 举报report save ^a7b25bc2-a399-874a 描述 添加一条举报记录 类型 POST 参数 Integer type String reason Long fkMemberId 响应 boolean 购物车cart save 描述 添加一条购物车记录 类型 POST 参数 Long fkCourseId 响应 boolean list ^2a83a57b-8124-0244 描述 查看我的购物车 类型 GET 响应 List clear ^852c49d0-cf68-1d97 描述 清空我的购物车 类型 POST 响应 boolean remove/{id} ^da83eb08-a9f2-acc4 描述 删除购物车记录 类型 POST 参数 Long id 响应 boolean removeBatch ^da4b7853-a7b9-7f76 描述 批量删除购物车记录 类型 POST 参数 List ids 响应 boolean 优惠券coupons getByCode/{code} ^160987ae-a15b-d673 描述 兑换优惠卷 类型 GET 参数 String code 响应 Coupons 订单order save ^7628577e-733e-1fad 描述 下单购买课程 类型 POST 参数 List courseIds Double totalAmount Double payAmount Integer payType 响应 boolean page ^897a7da7-f317-5c5d 描述 分页查看我的订单 类型 GET 参数 Long pageNumber Long pageSize 响应 Page remove/{id} ^527ceea8-09f2-6cd5 描述 删除我的订单 类型 POST 参数 Long id 响应 boolean removeBatch ^925b9d12-4e05-eeed 描述 批量删除我的订单 类型 POST 参数 List ids 响应 boolean 课程course ^5f8c953b-3d71-8a01 getInfo{id} ^a96db7bf-e382-fbcb 描述 查看指定课程的详情 类型 GET 参数 Long id 响应 Course page ^0c1579cb-3a1a-7a21 描述 分页查询课程 类型 GET 参数 Long pageNumber Long pageSize 响应 Page pageLikeTitle ^735403d4-8970-00d7 描述 根据课程标题分页查询课程 类型 GET 参数 Long pageNumber Long pageSize String title 响应 Page 会员member register 描述 注册一名会员 类型 POST 参数 ^795b6530-add6-f0ac String username String password String phone String email String idcard String realname 响应 boolean loginByAccount ^d75153b6-6fd4-819e 描述 根据账号密码登录系统 类型 POST 参数 String username String password 响应 MemberVO Member Token followCourse/{targetCourseId} ^03690902-6ac1-cbe9 描述 收藏指定课程 类型 POST 参数 Long targetCourseId 响应 boolean unfollowCourse/{targetCourseId} ^18a9b28c-0e31-e64e 描述 取消收藏指定课程 类型 POST 参数 Long targetCourseId 响应 boolean followMember/{targetMemberId} ^5d912068-fa4a-77a3 描述 关注指定会员 类型 POST 参数 Long targetCourseId 响应 boolean unfollowMember/{targetMemberId} ^e361394d-2262-5fb0 描述 取消关注指定会员 类型 POST 参数 Long targetMemberId 响应 boolean getInfo ^a199f008-090f-bfb2 描述 查看个人信息 类型 GET 响应 Member pageFollowCourse ^2b2f0d79-b072-67ff 描述 分页查看我的收藏列表 类型 GET 参数 Long pageNumber Long pageSize 响应 Page pageFollowMember ^32579f09-73de-09ef 描述 分页查看我的关注列表 类型 GET 参数 Long pageNumber Long pageSize 响应 Page pageFan ^00ac1637-3995-b634 描述 分页查看我的粉丝列表 类型 GET 参数 Long pageNumber Long pageSize 响应 Page update ^08d27518-0551-ef01 描述 修改个人信息 类型 POST 参数 修改字段 响应 boolean udpatePassword ^43e388b7-debf-205a 描述 修改个人密码 类型 POST 参数 String oldPassword String newPassword 响应 boolean uploadAvatar ^eb263ca4-b7dd-70ea 描述 上传个人头像 类型 POST 参数 MultipartFile avatarFile 响应 文件名 delete ^a0ecd67e-fd56-9b7f 描述 注销个人账号 类型 POST 响应 boolean</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-7-%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AF/res/%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AFVue%E7%89%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-7-%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AF/res/%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AFVue%E7%89%88/</guid><description>[!NOTE] Java道经第4卷 - 第7阶 - 前台前端 lesson-server-web
S01. 项目实战准备 E01. 搭建Vue项目 1. 创建Vue项目 使用Vue命令创建前台前端项目 lesson-server-web: # 切换到工作空间目录，注意路径中不要有中文 D: cd D:\idea\workspace\lesson-project # 创建Vue项目 `lesson-server-web` vue create lesson-server-web 使用IDEA打开Vue项目。 2. 优化项目结构 在线制作一个ICO文件如 lesson-server.ico 并替换 /public/favicon.ico 图标文件。 删除 @/asserts/logo.png 示例图片。 删除 @/components/ 中的全部示例Vue组件以及对应 @/router/index.js 中的路由配置。 删除 @/views/ 中的全部示例Vue组件。 3. 优化项目首页 index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh_CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width,initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;lesson-admin.ico&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Lesson前台项目&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;noscript&amp;gt;你的浏览器不支持JavaScript&amp;lt;/noscript&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 4.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/frag/%E4%BA%AC%E4%B8%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/frag/%E4%BA%AC%E4%B8%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/</guid><description>京东电商项目 项目整体介绍 mall项目仿照淘宝，京东等电商平台研发而成的，采用SpringCloudAlibaba全家桶进行微服务架构搭建，前后端分离。 整体环境介绍 以下子项目均使用此环境配置进行搭建和开发
基础开发环境: Windows(11) + JDK(11.0.16.1) 基础部署环境: Vmware(16) + CentOS(7) + Docker(1.13) 集成开发工具: IntelliJ IDEA(2021.3.3 Ultimate Edition) 项目管理工具: Maven(3.6.0) 项目协同工具: Git(2.28.0.windows.1) + GitEE 数据存储仓库: MySQL(8.0.25) 数据搜索引擎: ElasticSearch(7.11.2) + Kibana(7.11.2) 前后端服务器: Nginx(1.23.2) + Tomcat(9.0.70) + Node(16.14.0) 数据缓存仓库: Guava(19.0) + Redis(7.0.5) 短信服务平台: 阿里云SMS短信平台 对象存储平台: 阿里云OSS对象存储，MinIO本地对象存储 通用技术选型 使用MySQL8数据库存储数据：使用触发器将所有被删除的数据进行备份。 使用MybatisPlus持久层框架的注解配置方式进行数据层开发，包括分页。 使用SpringCloudAlibaba技术栈进行全项目开发。 使用Nacos注册中心代替Cloud中的Eureka进行服务注册与发现。 使用NacosConfig配置中心代替Cloud中的Config进行配置文件统一管理。 使用GateWay网关代替Cloud中的Zuul进行路由，限流和断言配置。 使用Sleuth + Zipkin对整体项目服务的链路进行追踪和分析。 使用OpenFeign代替Ribbon进行微服务之间的远程调用。 使用Sentinel代替Hystrix进行服务限流，降级，熔断等处理，以保证服务高可用。 使用Seata对服务进行分布式事务保护。 使用Rocketmq生产消费模型对服务进行削峰填谷，在下单后向用户微服务投递消息，发送通知短信/邮件。 使用SpringBoot拦截器进行CORS跨域处理。 使用JMeter进行后台接口压力测试。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/SOA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/SOA%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 管 理 员 后 台 应 用 ^u3mbCz24
用 户 前 台 应 用 ^LFZl3IJI
客 户 端 ^7tSGCHyf
订单查询模块 MVC代码 ^MHGUJM6x
用户登录模块 MVC代码 ^sEtu7as2
物流查询模块 MVC代码 ^LAZ8eSmM
其他前台相关 MVC代码 ^JP5ocv7B
商品管理模块 MVC代码 ^0V3Juf7P
下单模块 MVC代码 ^wh1oKlS4
用户登录模块 MVC代码 ^AVifcuNk
商品查询模块 MVC代码 ^tiwoKyLa
订单管理模块 MVC代码 ^UWCM3E8K
其他后台相关 MVC代码 ^lqAt7ydO
数 据 库 ^pDUIHVrZ
用户管理模块 MVC代码 ^sv7BZgx1</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 管 理 员 后 台 应 用 ^u3mbCz24
用 户 前 台 应 用 ^LFZl3IJI
客 户 端 ^7tSGCHyf
订单查询模块 MVC代码 ^MHGUJM6x
用户登录模块 MVC代码 ^sEtu7as2
物流查询模块 MVC代码 ^LAZ8eSmM
其他前台相关 MVC代码 ^JP5ocv7B
商品管理模块 MVC代码 ^0V3Juf7P
下单模块 MVC代码 ^wh1oKlS4
用户登录模块 MVC代码 ^AVifcuNk
商品查询模块 MVC代码 ^tiwoKyLa
订单管理模块 MVC代码 ^UWCM3E8K
其他后台相关 MVC代码 ^lqAt7ydO
数 据 库 ^pDUIHVrZ
用户管理模块 MVC代码 ^sv7BZgx1</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 数 据 库 ^OkxLitGb
客 户 端 ^Z1HiAO0L
单 体 应 用 ^Q4QKnwZj
其他模块 MVC代码 ^iaOmuBH7
商品模块 MVC代码 ^rtR80Ajh
用户模块 MVC代码 ^MTWnqTO2
订单模块 MVC代码 ^Ak6Nay3M
%%
Drawing { &amp;#34;type&amp;#34;: &amp;#34;excalidraw&amp;#34;, &amp;#34;version&amp;#34;: 2, &amp;#34;source&amp;#34;: &amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.25&amp;#34;, &amp;#34;elements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;rectangle&amp;#34;, &amp;#34;version&amp;#34;: 275, &amp;#34;versionNonce&amp;#34;: 1096388276, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;9yHRFwb9iJxzrXp7D3Vbq&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 0, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -300, &amp;#34;y&amp;#34;: -300, &amp;#34;strokeColor&amp;#34;: &amp;#34;#1971c2&amp;#34;, &amp;#34;backgroundColor&amp;#34;: &amp;#34;#a5d8ff&amp;#34;, &amp;#34;width&amp;#34;: 40, &amp;#34;height&amp;#34;: 180, &amp;#34;seed&amp;#34;: 600128140, &amp;#34;groupIds&amp;#34;: [ &amp;#34;5qhFeQ-JjmD5n4S4evaEp&amp;#34; ], &amp;#34;frameId&amp;#34;: null, &amp;#34;roundness&amp;#34;: null, &amp;#34;boundElements&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;Z1HiAO0L&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;eehCW2ZZjyO2k4jCFfiYW&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;arrow&amp;#34; } ], &amp;#34;updated&amp;#34;: 1717064257625, &amp;#34;link&amp;#34;: null, &amp;#34;locked&amp;#34;: false }, { &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;, &amp;#34;version&amp;#34;: 74, &amp;#34;versionNonce&amp;#34;: 1171449484, &amp;#34;isDeleted&amp;#34;: false, &amp;#34;id&amp;#34;: &amp;#34;Z1HiAO0L&amp;#34;, &amp;#34;fillStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;strokeWidth&amp;#34;: 2, &amp;#34;strokeStyle&amp;#34;: &amp;#34;solid&amp;#34;, &amp;#34;roughness&amp;#34;: 1, &amp;#34;opacity&amp;#34;: 100, &amp;#34;angle&amp;#34;: 0, &amp;#34;x&amp;#34;: -290, &amp;#34;y&amp;#34;: -247.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 管 理 员 后 台 应 用 ^u3mbCz24
用 户 前 台 应 用 ^LFZl3IJI
客 户 端 ^7tSGCHyf
订单查询模块 MVC代码 ^MHGUJM6x
用户登录模块 MVC代码 ^sEtu7as2
物流查询模块 MVC代码 ^LAZ8eSmM
其他前台相关 MVC代码 ^JP5ocv7B
商品管理模块 MVC代码 ^0V3Juf7P
下单模块 MVC代码 ^wh1oKlS4
用户登录模块 MVC代码 ^AVifcuNk
数 据 库 ^sA0S0UZb
商品查询模块 MVC代码 ^tiwoKyLa
订单管理模块 MVC代码 ^UWCM3E8K
其他后台相关 MVC代码 ^lqAt7ydO
数 据 库 ^pDUIHVrZ</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/draw/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements Gateway 网关集群 ^2Mum5ZyF
Seata 分布式事务 ^C95aIAk4
Sentinel 流量卫兵 ^mSPDyIar
Sleuth + Zipkin 链路追踪 ^XLR8E4td
客户端 ^7Fr37Ouk
^iv3WW2ID
服务器集群 ^p5ESKXki
用户微服务 ^OqgaKoJZ
openfeign 远程调用 ^5VV3pDp7
订单微服务 ^Knr3IWQw
物流微服务 ^YjmYuKVB
注册 ^NMl2PtN5
拉取 配置信息 ^fNtxp7DT
拉取 服务列表 ^Axwyo5If
文件 存储 ^9M0gvo5A
拉取 服务列表 ^HzardZ7R
Redis集群 ^eto5Hlho
MinIO集群 ^Qba1Zhek
上传 配置信息 ^6V8oFSZZ
数据 缓存 ^6GiXem6l
MySQL集群 ^QQBip279</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>什么叫高可用？ § *高可用*
系统中部分节点失效时，其他节点能够接替它继续提供服务，则可认为系统具有高可用性。保证系统的高可用性，可从如下几个9说起，如图所示：
为了提高可用性，我们要么提高系统的无故障时间，要么减少系统的故障恢复时间，这就需要我们知道故障的原因。这个原因通常分为两大部分：
1) 无计划的系统故障
系统级故障：包括主机、操作系统、中间件、数据库、网络、电源以及外围设备。 自然灾害、人为破坏，以及供电问题等。 2) 有计划的日常任务：
ü 运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护。
ü 升级相关：数据库、应用、中间件、操作系统、网络，包括硬件升级。
我们再对这些故障做个归类：
\1) 网络问题：网络链接出现问题，网络带宽出现拥塞等
\2) 性能问题：慢 SQL、Java Full GC、硬盘 IO 过大、CPU 飙高、内存不足等
\3) 安全问题：被网络攻击，如 DDoS 等。
\4) 运维问题：系统总是在被更新和修改，架构也在不断地被调整，监控问题等
\5) 管理问题：没有梳理关键服务及服务的依赖关系，运行信息没有和控制系统同步等
\6) 硬件问题：硬盘损坏、网卡出问题、交换机出问题、机房掉电等问题等
总之，我们要正确认识故障，故障不可避免。尤其是在大型分布式系统中，出现故障是一种常态。有时出现故障根本就不知道出现在了什么地方。所以我们要对故障原因先有一个认识，与此同时我们要基于故障有应对的策略，也就是我们所说的“弹力设计”，就类似三国中的赵云猛将，在搏杀中能进能退。
1.2.2.3 服务网关 随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个 服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：
客户端需要调用不同的url地址，增加难度
在一定的场景下，存在跨域请求的问题
每个微服务都需要进行单独的身份认证
针对这些问题，API网关顺势而生。
API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。
1.2.2.4 服务容错 在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。
我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是：
不被外界环境影响
不被上游请求压垮
不被下游响应拖垮
1.2.2.5 链路追踪 随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联 网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程 语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的 多个服务链路进行日志记录，性能监控即链路追踪
1.2.3 微服务架构的常见解决方案 1.2.3.1 ServiceComb Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-Nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-Nacos/</guid><description>Nacos Win11搭建Nacos服务 武技: 在Win11环境下安装Nacos服务端
下载 Nacos2.0.3版本服务端 服务端: res: nacos-server-2.0.3.zip: 解压缩即可，建议重命名为 nacos8848-standalone 目录。 启动Nacos服务端: cmd: cd @\bin: 进入Nacos的bin目录中。 cmd: startup.cmd -m standalone: 以单机模式启动，2.0.3版本默认使用集群模式启动。 设置Nacos默认启动模式: 修改 startup.cmd 文件: 将 cluster 修改为 standalone 后即可。 访问Nacos管控台: cli: localhost:8848/nacos: 使用 nacos/nacos 登录。 Win11搭建Nacos集群 心法: Nacos集群前置条件
Nacos搭建集群时，需要使用到数据库如MySQL来存储数据。 武技: 准备Nacos集群数据库
创建Nacos集群相关的数据库实例: cmd: create database nacos character set utf8mb4; use nacos; 创建Nacos集群相关的12张数据库表: res: 资源/SQL/v3_nacos_mysql.sql: 武技: 创建2个Nacos节点相关目录
将Nacos家目录拷贝2份视为2个集群节点: nacos8858-cluster: Nacos节点 Nacos8858。 nacos8868-cluster: Nacos节点 Nacos8868。 Nacos集群节点在相同IP时，端口号不能连续，要分隔开来，比如8858和8868端口。 武技: 分别修改2个集群节点的主配文件 @\conf\application.properties
# 节点 `Nacos8858` 配置文件内容 server.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-SpringCloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/frag/%E6%AE%8B%E5%8D%B7-SpringCloud/</guid><description>CH01. 微服务架构概念 心法: 微服务架构概念
对比单体架构开发速度慢，启动时间长，依赖庞大的缺点，微服务架构更易开发，理解和维护，独立的部署和启动，但存在分布式事务问题，服务治理问题: CAP理论: 在一个分布式系统中，分区容错性必须满足，而一致性和可用性二选其一，无法共存: 分区容错性 Partition-tolerance: 分布式系统必须保证分区容错性，即使某节点崩溃，整体也要正常对外提供服务，节点越多，分区容错越高。 一致性 Consistency: 在响应结果之前先进行节点间完整的数据同步过程，即可保证数据一致性，但同步过程很耗时，可能会因为响应超时而报错（不满足A）。 可用性 Availability: 异步执行节点之间的数据同步过程，以保证响应超时，此时服务高可用，但可能会因为来不及同步而导致响应的数据和其他节点不一致（不满足C）。 微服务核心概念: 配置中心: 存放每个微服务的主配文件，支持动态更新，支持可视化界面，支持同时操作所有服务的配置文件。 链路追踪: 分析调用链路节点耗时的一门技术: 如用户下单的链路: 调用商品服务获取商品价格 -&amp;gt; 调用用户服务 -&amp;gt; 调用订单服务&amp;hellip;，通过链路追踪分析链路上的哪个过程耗时比较久，以进行精准优化。 负载均衡: 进行负载分发，如果集群中的A节点压力过大，则将需求分发到集群中的B节点。 常见微服务框架: 需要熟知consumer消费者，provider生产者的两种角色的概念: dubbo: zookeeper + dubbo + springboot dubbo官网 通信方式: rpc（远程方法调用） 注册中心: zookeeper/redis 配置中心: diamond（一款款阿里开源组件） 优点: 采用rpc连接，速度快一些。 缺点: 框架中的技术模块比较散，需要自己组装。 springcloud: springcloud官网 通信方式: http长连接，restful 注册中心: eureka/consul 配置中心: config 断路器: hystrix 网关: zuul 分布式链路追踪系统: sleuth + zipkin 优点: 框架中的技术模块是全家桶套装，整合度非常高。 缺点: http长连接，涉及多次握手，速度低一些。 CH02. 搭建注册中心Eureka 心法: 所谓注册中心</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/qa/JB4-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/qa/JB4-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-QA/</guid><description> 单体应用架构的优缺点分别是什么？ 垂直应用架构的优缺点分别是什么？ 分布式应用架构的优缺点分别是什么？ SOA应用架构的优缺点分别是什么？ 微服务应用架构的优缺点分别是什么？ 如何理解分布式CAP中的分区容错性？如何提高分区容器性？ 如何理解分布式CAP中的一致性？如何提高一致性？ 如何理解分布式CAP中的可用性？如何提高可用性？ 一个分布式系统可以同时满足CAP中的那两个？ 微服务父子模块架构中，父模块的src目录可删吗？为什么？ 微服务父子模块架构中，父模块的 &amp;lt;dependencyManagement&amp;gt; 做什么用？ 微服务父子模块架构中，父模块引入的依赖能共享给所有子模块吗？ 微服务中的（通用）工具模块直接就可以作用在其他模块中吗？ 如果mybatis-plus生成的表名踩了关键字，如order，怎么办？ server.port 配置是做什么用的？ spring.application.name 配置是做什么用的？ 你用的什么数据库连接池？ 开发一个Springboot启动类需要注意哪些细节？ @MapperScan 注解是做什么用的？ 如果让你开发一个按ID查询商品的完整业务，你的思路是怎样的？ 注册中心是做什么用的？核心功能有哪些？ 注册中心的常见产品有哪些？ 注册中心如何知道某个注册过的微服务是否活着？简述流程。 Nacos中的临时服务和持久服务有什么区别？ 如果注册中心发现某服务已经挂了，会怎么处理？ 为什么不用SpringCloud中的Eureka而转向了SpringCloudAlibaba的nacos？ Nacos注册中心需要实现安装服务端吗？ Nacos注册中心的默认端口号是多少？可以修改吗？ 使用Nacos注册中心，需要第三方依赖吗？ @EnableDiscoveryClient 注解是做什么用的？ spring.cloud.nacos.discovery.server-addr 配置是做什么用的？ 你做过哪些微服务项目？ 你的微服务项目负责哪个模块？使用了哪些组件？整体流程是什么样的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/res/Nacos%E9%9B%86%E7%BE%A4SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/res/Nacos%E9%9B%86%E7%BE%A4SQL/</guid><description>/* * Copyright 1999-2018 Alibaba Group Holding Ltd. * * Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/qa/JB4-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/qa/JB4-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8-QA/</guid><description> 你使用什么技术进行微服务之间的远程调用？ 什么是负载均衡？客户端负载均衡和服务端负载均衡你使用哪种？ OpenFeign是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ OpenFeign自带负载均衡效果吗？ OpenFeign和Ribbon有什么区别和联系？ 使用OpenFeign需要添加第三方依赖吗？ @EnableFeignClients 注解是做什么用的？ 如何使用OpenFeign进行远程调用，流程是什么样的？ @FeignClient 注解的作用是什么？ 远程接口方法和远程服务的控制方法需要返回值，方法名和形参都保持一致吗？ 远程接口方法的参数必须添加 @RequestParam 注解吗？ @Transactional(rollbackFor = Exception.class) 是做什么用的？ @Transactional 注解能解决远程调用的事务问题吗？ 包含远程调用的业务方法能标记 @Transactional 注解吗？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/res/%E6%AE%8B%E5%8D%B7-DubboAdmin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/res/%E6%AE%8B%E5%8D%B7-DubboAdmin/</guid><description>在Window里面搭建DubboAdmin 武技: 在Win11环境启动DubboAdmin服务
1. 下载DubboAdmin # 使用Git拉取DubboAdmin监控服务：网络波动多拉取几次 cd D:\dubbo git clone https://github.com/apache/dubbo-admin.git 2. 打包DubboAdmin 构建 dubbo-admin-ui 的Vue依赖： # 进入 `dubbo-admin-ui` 目录并构建Vue依赖 cd D:\dubbo\dubbo-admin\dubbo-admin-ui npm install 修改主配项：DubboAdmin默认使用的是zookeeper注册中心，需要进行覆盖： D:\dubbo\dubbo-admin\dubbo-admin-server\src\main\resources\application.properties
admin.registry.address=nacos://192.168.40.77:8848?group=DEFAULT_GROUP&amp;amp;namespace=public admin.config-center=nacos://192.168.40.77:8848?group=dubbo admin.metadata-report.address=nacos://192.168.40.77:8848?group=dubbo 打包 dubbo-admin 项目： # 进入 `dubbo-admin` 目录并跳过测试打包项目 cd D:\dubbo\dubbo-admin mvn clean package -Dmaven.test.skip=true # 进入 `dubbo-admin-distribution\target` 目录启动DubboAdmin服务 cd D:\dubbo\dubbo-admin\dubbo-admin-distribution\target java -jar dubbo-admin-0.5.0-SNAPSHOT.jar 启动Nacos服务，否则无法访问DubboAdmin。 访问DubboAdmin服务: 使用root/root登录。 3. 部署DubboAdmin 武技: 将DubboAdmin服务的Jar包部署到Docker
构建DubboAdmin镜像: # 创建DubboAdmin监控服务家目录并将DubboAdmin监控服务Jar包拷贝进来 mkdir -p /opt/dubbo-admin chmod -R 777 /opt/dubbo-admin # 进入DubboAdmin监控服务目录: 将dubbo-admin-0.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/frag/%E6%AE%8B%E5%8D%B7-Sentinel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/frag/%E6%AE%8B%E5%8D%B7-Sentinel/</guid><description>Sentinel Win11搭建Sentinel服务 武技: 在Win11环境下安装Sentinel服务端
安装 Sentinel管控台: res: sentinel-dashboard-1.7.0.jar 启动Sentinel管控台: cmd: java -jar -Dserver.port=8088 sentinel-dashboard-1.7.0.jar: 默认端口8080。 访问Sentinel管控台: cli: localhost:8088: 使用 sentinel/sentinel 账密登录。</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/qa/JB4-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/qa/JB4-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5-QA/</guid><description> 什么是服务雪崩效应，如何产生的？ 服务容错都包含哪些手段？ 线程池隔离和信号量隔离的区别是什么？ 如果一次请求超时，应该做什么处理？ 什么叫熔断，什么叫降级，二者什么区别和联系？ fallback方法是什么概念？ sentinel是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ 使用sentinel需要添加第三方依赖吗？ 降级方法必须由public和static修饰吗？ 降级方法的形参必须和控制方法的形参保持一致吗？ 怎么理解sentinel资源？ @SentinelResource 注解是做什么用的？ @SentinelResource 注解中的fallbackClass和fallback属性的区别是什么？ sentinel的流控降级规则的流控类型中，QPS和线程数的区别是什么？ sentinel的流控降级规则的流控模式中，直接和关联的区别是什么？ sentinel的流控降级规则的流控效果中，快速失败和排队等待的区别是什么？ 使用过Jmeter吗？使用流程是怎样的？ sentinel的熔断降级规则中，RT熔断和异常比例熔断分别是什么意思？ 可以简述一下sentinel授权降级规则中的黑白名单的概念吗？ 可以简述一下sentinel热点降级规则是什么意思吗？ sentinel的降级规则是存放在内存中还是硬盘中？ sentinel如何将规则持久化？ sentinel如果想整合远程调用OpenFeign，需要添加依赖吗？ sentinel整合OpenFeign的大概流程是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/qa/JB4-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/qa/JB4-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3-QA/</guid><description> API网关是做什么用的？有什么功能？ gateway和zuul的区别是什么？ gateway是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ gateway的搭建是一个springboot项目吗？ gateway需要将自己注册到nacos注册中心吗？ gateway需要发现nacos中的其他服务吗？ gateway中的断言是什么意思？ gateway中的断言可以自定义吗？大概流程是什么？ gateway中的断言是必须全部通过才能释放请求吗？ gateway中的过滤器主要用于做什么？ gateway中的过滤器可以自定义吗？大概流程是什么？ gateway中的全局过滤器和局部过滤器的区别是什么？ gateway层面的限流的大概流程是什么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/frag/%E6%AE%8B%E5%8D%B7-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/frag/%E6%AE%8B%E5%8D%B7-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid><description>Zipkin Zipkin持久化ES 武技: 将Zipkin数据持久化到ES数据库
使用Docker重新搭建可持久化的Zipkin容器 # 删除之前的Zipkin容器，让出9411端口 docker rm -f zipkin # 创建并启动一个可持久化的Zipkin容器 # arg: `-e STORAGE_TYPE=elasticsearch`: 使用ES进行持久化 # arg: `-e ES_HOSTS`: ES地址，集群由逗号分隔，默认为 `http://localhost:9200`。 # arg: `-e ES_TIMEOUT`: 连接ES的超时时间，单位ms。默认 `10000ms`。 # arg: `-e ES_INDEX`: Zipkin持久化所使用的索引，默认 `zipkin`。 # arg: `-e ES_DATE_SEPARATOR`: Zipkin建立索引的日期分隔符，默认为 `-`。 # arg: `-e ES_INDEX_SHARDS`: 分片(shard)个数，默认 `5` 个。 # arg: `-e ES_INDEX_REPLICAS`: 副本(replica)个数，默认 `1` 个。 # arg: `-e ES_USERNAME`: 登录ES的账号。 # arg: `-e ES_PASSWORD`: 登录ES的密码。 docker run -d --name zipkin --network host \ -e STORAGE_TYPE=elasticsearch \ -e ES_HOSTS=192.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/qa/JB4-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/qa/JB4-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-QA/</guid><description> 链路追踪是什么意思，主要用来做什么？ sleuth是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ sleuth中的Trace和Span分别是什么意思？ 使用sleuth需要添加第三方依赖吗？ 你使用的链路追踪的可视化界面是什么？ 使用zipkin需要添加第三方依赖吗？ zipkin的默认端口是多少？ zipkin的信息是默认存储在内存中的还是在硬盘中的？ 如何对zipkin的信息进行持久化？大概流程是怎样的？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/res/zipkin.sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/res/zipkin.sql/</guid><description>-- database create database zipkin character set utf8mb4; use zipkin; -- -- Copyright The OpenZipkin Authors -- SPDX-License-Identifier: Apache-2.0 -- CREATE TABLE IF NOT EXISTS zipkin_spans ( `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &amp;#39;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&amp;#39;, `trace_id` BIGINT NOT NULL, `id` BIGINT NOT NULL, `name` VARCHAR(255) NOT NULL, `remote_service_name` VARCHAR(255), `parent_id` BIGINT, `debug` BIT(1), `start_ts` BIGINT COMMENT &amp;#39;Span.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/frag/%E6%AE%8B%E5%8D%B7-MQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/frag/%E6%AE%8B%E5%8D%B7-MQ/</guid><description>RocketMQ Win11搭建RocketMQ服务 心法: Win11搭建RocketMQ的前置条件
RocketMQ服务端默认使用JDK8环境，JDK11环境下建议曲线救国。 武技: 在windows平台搭建RocketMQ服务端
安装RocketMQ服务端: 安装后配置 ROCKET_HOME 环境变量: res: rocketmq-all-4.9.4-bin-release.zip: 解压缩为 rocketmq494 目录。 JDK11环境下: 单独安装JDK8环境，压缩版即可: res: jdk1.8.0_05.zip: 解压缩为 jdk8 目录。 JDK11环境下: 修改 @/bin/runserver.cmd 和 @/bin/runbroker.cmd 文件: 在第17行找到 if not exist &amp;quot;%JAVA_HOME%\bin\java.exe&amp;quot; 代码。 在第16行添加 set &amp;quot;JAVA_HOME=D:\jdk\jdk8&amp;quot; 代码。 在 @/bin 目录中启动NameSrv邮局服务: cmd: mqnamesrv.cmd -n localhost:9876: 端口默认9876。 在 @/bin 目录中启动Broker快递员服务: cmd: mqbroker.cmd -n localhost:9876 autoCreateTopicEnable=true: 自动创建topic和tag。 在 @/bin 目录中测试消费者: 消费者需要一致保持CMD命令窗口: cmd: set NAMESRV_ADDR=localhost:9876 cmd: tools.cmd org.apache.rocketmq.example.quickstart.Consumer 在 @/bin 目录中测试生产者: 生产者会发送1000个消息，然后自动退出: cmd: set NAMESRV_ADDR=localhost:9876 cmd: tools.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/qa/JB4-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/qa/JB4-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-QA/</guid><description> 你都使用过哪些MQ？ MQ的作用是什么？为什么要使用MQ？ RMQ是哪家公司的产品？ RMQ中的NameSrv有什么作用？ RMQ中的NameSrv和Broker有什么关系？ RMQ中的Topic/Tag/MessageQueue/Message有什么关系？ RMQ中的生产者组和消费者组有什么作用？为什么要分组？ 搭建一个RMQ生产者消费者模型的大概流程是怎样的？ RMQ的普通消息分为哪几种类型？ RMQ如何保证生产消息和消费消息是有序的？ RMQ和springboot整合后，可以直接使用哪个类进行生产消息？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/qa/JB4-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/qa/JB4-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-QA/</guid><description> Nacos除了做注册中心还有什么别的功能？ 将所有微服务的配置文件统一移动到配置中心有什么好处？ 如何动态读取配置中心中的某项配置？大概流程是什么？ 跨环境共享配置是什么意思？如何做到？ 跨服务共享配置是什么意思？如何做到？ 如何阻止com.alibaba.nacos.client.naming疯狂打印日志？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/frag/%E6%AE%8B%E5%8D%B7-Seata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/frag/%E6%AE%8B%E5%8D%B7-Seata/</guid><description>Seata Win11搭建Seata服务 武技: 在Win11环境下载安装并启动Seata服务
创建Seata备份表 undo_log: res: 资源/SQL/v3_seata.sql 下载 Seata: 解压缩到硬盘即可。 修改 @\conf\registry.conf 配置: 将 registry 中的 type 值替换为 nacos，然后删除除Nacos外的其他代码块和namespace项。 将 config 中的 type 值替换为 nacos，然后删除除Nacos外的其他代码块和namespace项。 将 registry.conf 文件分别拷贝到商品微服务和订单微服务的classpath下。 启动Nacos服务，因为Seata需要在Nacos配置中心生成一些配置。 初始化Seata在Nacos中的配置，在 conf 目录中执行命令: cmd: nacos-config.sh 127.0.0.1: 在Nacos配置中心查看SEATA_GROUP分组的配置文件。 res: 资源/附件/seata/nacos-config.sh 启动Seata服务: 在 @\bin 目录中执行命令: cmd: seata-server.bat -p 9000: 默认端口8091，在Nacos服务中心查看 serverAddr 服务。 在 @\conf\file.conf 的service模块中查看事务服务名 my_test_tx_group，可以修改但不建议。 开发数据源代理配置类 config.DataSourceProxyConfig: seata使用该数据源代理进行SQL操作: 标记 @Configuration 以声明为配置类。 在数据源代理配置类中管理 i.s.r.d.DataSourceProxy 类: @Bean: 使该方法以被容器管理。 @Primary: 表示当存在多个数据源代理时，该bean的优先级最高。 new DruidDataSource(): 创建一个Druid数据源实例: druidDataSource.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/qa/JB4-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6-QA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/qa/JB4-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6-QA/</guid><description> 事务的ACID特性分别是什么意思？ 你搭建的微服务出现了哪种事务问题？ seata是SpringCloud技术栈中的还是SpringCloudAlibaba技术栈中的？ seata事务协调器的搭建需要依赖nacos吗？ seata中的事务协调器TC是做什么用的？ seata中的资源管理器RM是做什么用的？ seata中的事务管理器TM是做什么用的？ seata是如何完成分布式事务整体提交和回滚的过程的？ undo_log日志的作用是什么？ seata事务对业务有入侵么？ seata整个过程中使用了本地事务么？ seata的事务过程释放资源么？</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/seataServer.properties/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/seataServer.properties/</guid><description>原版，未做任何改动 #For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html #Transport configuration, for client and server transport.type=TCP transport.server=NIO transport.heartbeat=true transport.enableTmClientBatchSendRequest=false transport.enableRmClientBatchSendRequest=true transport.enableTcServerBatchSendResponse=false transport.rpcRmRequestTimeout=30000 transport.rpcTmRequestTimeout=30000 transport.rpcTcRequestTimeout=30000 transport.threadFactory.bossThreadPrefix=NettyBoss transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler transport.threadFactory.shareBossWorker=false transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector transport.threadFactory.clientSelectorThreadSize=1 transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread transport.threadFactory.bossThreadSize=1 transport.threadFactory.workerThreadSize=default transport.shutdown.wait=3 transport.serialization=seata transport.compressor=none #Transaction routing rules configuration, only for the client service.vgroupMapping.default_tx_group=default #If you use a registry, you can ignore it service.default.grouplist=127.0.0.1:8091 service.enableDegrade=false service.disableGlobalTransaction=false #Transaction rule configuration, only for the client client.rm.asyncCommitBufferLimit=10000 client.rm.lock.retryInterval=10 client.rm.lock.retryTimes=30 client.rm.lock.retryPolicyBranchRollbackOnConflict=true client.rm.reportRetryCount=5 client.rm.tableMetaCheckEnable=true client.</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9A%84UndoLog%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9A%84UndoLog%E8%A1%A8/</guid><description>CREATE TABLE IF NOT EXISTS `undo_log` ( `branch_id` BIGINT(20) NOT NULL COMMENT &amp;#39;分支事务ID&amp;#39;, `xid` VARCHAR(100) NOT NULL COMMENT &amp;#39;全局事务ID&amp;#39;, `context` VARCHAR(128) NOT NULL COMMENT &amp;#39;上下文&amp;#39;, `rollback_info` LONGBLOB NOT NULL COMMENT &amp;#39;回滚信息&amp;#39;, `log_status` INT(11) NOT NULL COMMENT &amp;#39;状态，0正常，1全局已完成&amp;#39;, `log_created` DATETIME(6) NOT NULL COMMENT &amp;#39;创建时间&amp;#39;, `log_modified` DATETIME(6) NOT NULL COMMENT &amp;#39;修改时间&amp;#39;, UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT =&amp;#39;AT事务模式撤消表&amp;#39;;</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9B%B8%E5%85%B34%E5%BC%A0%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/res/Seata%E7%9B%B8%E5%85%B34%E5%BC%A0%E8%A1%A8/</guid><description>-- -------------------------------- The script used when storeMode is &amp;#39;db&amp;#39; -------------------------------- -- the table to store GlobalSession data CREATE TABLE IF NOT EXISTS `global_table` ( `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `status` TINYINT NOT NULL, `application_id` VARCHAR(32), `transaction_service_group` VARCHAR(32), `transaction_name` VARCHAR(128), `timeout` INT, `begin_time` BIGINT, `application_data` VARCHAR(2000), `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`xid`), KEY `idx_status_gmt_modified` (`status` , `gmt_modified`), KEY `idx_transaction_id` (`transaction_id`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; -- the table to store BranchSession data CREATE TABLE IF NOT EXISTS `branch_table` ( `branch_id` BIGINT NOT NULL, `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `resource_group_id` VARCHAR(32), `resource_id` VARCHAR(256), `branch_type` VARCHAR(8), `status` TINYINT, `client_id` VARCHAR(64), `application_data` VARCHAR(2000), `gmt_create` DATETIME(6), `gmt_modified` DATETIME(6), PRIMARY KEY (`branch_id`), KEY `idx_xid` (`xid`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; -- the table to store lock data CREATE TABLE IF NOT EXISTS `lock_table` ( `row_key` VARCHAR(128) NOT NULL, `xid` VARCHAR(128), `transaction_id` BIGINT, `branch_id` BIGINT NOT NULL, `resource_id` VARCHAR(256), `table_name` VARCHAR(32), `pk` VARCHAR(36), `status` TINYINT NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;0:locked ,1:rollbacking&amp;#39;, `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`row_key`), KEY `idx_status` (`status`), KEY `idx_branch_id` (`branch_id`), KEY `idx_xid` (`xid`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; CREATE TABLE IF NOT EXISTS `distributed_lock` ( `lock_key` CHAR(20) NOT NULL, `lock_value` VARCHAR(20) NOT NULL, `expire` BIGINT, primary key (`lock_key`) ) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4; INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;AsyncCommitting&amp;#39;, &amp;#39; &amp;#39;, 0); INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;RetryCommitting&amp;#39;, &amp;#39; &amp;#39;, 0); INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;RetryRollbacking&amp;#39;, &amp;#39; &amp;#39;, 0); INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&amp;#39;TxTimeoutCheck&amp;#39;, &amp;#39; &amp;#39;, 0);</description></item><item><title/><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/frag/%E6%AE%8B%E5%8D%B7-SpringSecurity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/frag/%E6%AE%8B%E5%8D%B7-SpringSecurity/</guid><description>CH01. SpringSecurity基础入门 心法: 安全框架
安全框架就是解决系统安全的框架，可以通过配置的方式实现对资源的访问限制，目前主流产品包括Spring家族的SpringSecurity框架和Apache的Shiro框架。 心法: SpringSecurity
SpringSecurity是Spring用于提供声明式安全访问控制解决方案的安全框架。 SpringSecurity核心认证：比对用户的账号密码身份等信息，即登录。 SpringSecurity核心授权：为用户赋权或赋角色。 EP01. 搭建基础环境 添加父项目配置 &amp;lt;!--父项目--&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;version&amp;gt;2.3.12.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt; 添加三方依赖 &amp;lt;!--三方依赖--&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-property--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-property&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;property&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-security--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-security-property--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-property&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;property&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 开发主配文件 server: port: 8123 开发启动类 package com.lsx; /** @author lsx */ @SpringBootApplication public class SpringSecurityApp { public static void main(String[] args) { SpringApplication.</description></item><item><title>JB1-1-新手村</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/JB1-1-%E6%96%B0%E6%89%8B%E6%9D%91/</guid><description>[!NOTE] Java道经第1卷 - 第1阶 - 新手村55 v1-1-basic-rookie (JAR)
S01. 学前准备工作 武技: 课前练习
金山打字赛: 安装金山打字通，进入英文打字，文章模块，一轮N进5，二轮5进2，三轮2进1。 幻灯片大赛: 制作8张以上任意主题的幻灯片，作品展示，创意点评。 E01. Java语言年龄分代 心法: Java语言是第4代计算机语言，同时也涵盖了第5代的SQL语言
分代 面向 描述 运行效率 开发效率 语言举例 第1代 机器 打孔机 + 指令条模式 极高 极低 二进制 第2代 指令 有自主分析，但少了些灵魂，不够高级 较高 较低 汇编 第3代 过程 关心每一个流程和每一个细节，属于高级语言 中等 中等 C语言 第4代 对象 关注对象属性，对象方法，对象关系和对象调用 较低 较高 Java，C++等语言 第5代 结果 需求-结果模型 中等 极高 SQL语言 E02. Java核心技术特点 心法: Java语言的核心特点
Java曾用名Green和Oak，后因印度尼西亚盛产咖啡的爪洼岛而改名。 Java是Sun公司（09年被Oracle收购）的詹姆斯高斯林团队在1994年研发出来的一门计算机编程语言。 Java分为JavaSE（标准），JavaME（个人）和JavaEE（企业）三个版本。 技术特点 描述 简单高效 Java是基于C++起来的，但是去除了很多C++的难点，上手难度低 潜力无限 Java拥有无穷无尽的强大类库，即各种功能拓展包，所以拥有无限潜力 平易近人 Java是一门面向对象的语言，相比过程和细节，更关心属性和方法，更接近人类的思维 粉丝泛滥 Java粉丝量大，社区活跃，文档齐全，始终处于TIOBE编程语言排行榜前几名 身体健壮 Java内部具有非常完善的异常处理机制，不容易使系统崩溃 安全可靠 Java有指针，但不支持直接操作指针，所以不容易中毒 场景丰富 Java被应用于安卓，金融，服务器，电商网站，嵌入式，大数据，高频交易空间，科学应用等场景 掌声一片 Java的源代码是在JVM上进行编译的，编译结果为字节码，字节码是可以跨平台的 E03.</description></item><item><title>JB1-2-基础启航</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/JB1-2-%E5%9F%BA%E7%A1%80%E5%90%AF%E8%88%AA/</guid><description>[!NOTE] Java道经第1卷 - 第2阶 - 基础启航 v1-2-basic-start (JAR)
CH01. 文档化编程思想 心法: 注释
注释是对代码的一种文字说明，提高可读性，不参与编译过程，尽量少写废话。 允许在任何注释中使用 TODO 前缀来标记一个待做事项。 EP01. 代码的基本注释 心法: 代码的基本注释 - 用于描述代码
类别 开始符号 结束符号 位置 示例 单行注释 // 无 写在方法内，独占1行，尽量规避行尾注释 // 我是单行注释 多行注释 /* */ 写在方法内，独占1或N行，尽量规避行尾注释 /* 我是多行注释 */ EP02. 产品的文档注释 心法: 产品的文档注释 - 用于描述产品
文档注释的意义: 每个产品都应该配一套独立的文档说明。 文档注释的格式: 在类，方法，属性之上使用 /** xxx */ 格式编写文档注释。 文档注释中可以使用 &amp;lt;h1&amp;gt;，&amp;lt;p&amp;gt; 等HTML标签进行美化。 心法: 文档注释的优点
文档注释的优点 描述 易修改 文档注释和代码处于同一个Java文件中，修改代码的同时，顺便就修改了文档 易统一 文档注释有固定的格式和功能注解，保证了所有文档的统一性和通用性 可提取 允许使用JavaDoc工具提取出代码中的文档注释，并生成真正的HTML文档 心法: 文档注释中的常用注解</description></item><item><title>JB1-3-面向对象</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/JB1-3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid><description>[!NOTE] Java道经第1卷 - 第3阶 - 面向对象 v1-3-basic-oop (JAR)
CH01. OOP抽象思想 EP01. 万物皆为对象 心法: 对象 Object
对象一词是19世纪的现象学大师胡塞尔提出并定义的，他认为: 对象是世界中的物体在人脑中的映像。 对象是人的意识之所以为意识的反映。 对象是作为一种概念而存在的先念的东西。 举例说明: 比如当我们认识到一种新的物体，它叫树，于是在我们的意识当中就形成了树的概念。 这个概念会一直存在于我们的思维当中，并不会因为这棵树被砍掉而消失。 这个概念就是现实世界当中的物体在我们意识当中的映象，就是一个对象。 心法: 对象的三大特点
万事万物皆对象，如一个苹果，一项政策，一种心情等。 对象具有唯一性，即使是同一个模子刻出来的，也不会互相影响。 对象可以具有属性和方法，属性用来描述对象的静态信息，方法用来描述对象的动态行为。 EP02. 面向对象编程 心法: 面向对象编程 Object Oriented Programming (OOP)，简称OOP
OOP是一种编程思想，在考虑问题时以具体的对象为单位，考虑其属性和方法，而不关心其具体的实现流程。 心法: 面向对象编程 VS 面向过程编程
宏观上使用面向对象进行设计，但微观上仍然需要使用面向过程进行实现: 编程思想 关注点 关键字 适用场景 示例 面向过程编程 具体的实现流程 步骤 简单的，无需复杂协作的微观场景 把大象放进冰箱的步骤 面向对象编程 对象的属性方法 调用 复杂的，需要高度协作的宏观场景 设计一款高性能的冰箱 EP03. 抽象编程思想 心法: 抽象
抽象即抽出相象的部分，也叫提取，提炼，归纳或总结，即抽选出一些我们比较关注的属性和方法的过程。 CH02. OOP封装机制 心法: 封装机制 Encapsulation
封装是一个先装后封的过程: 封装动作 描述 其他 装 将抽象出来的一些属性和方法打包到类中 1.</description></item><item><title>JB1-4-高级进阶</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/JB1-4-%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</guid><description>Java道经第1卷 - 第4阶 - v1-4-basic-senior(JAR) - 高级进阶
CH01. 异常例外 心法: 异常 Exception，也叫例外
异常会在程序运行时发生并打断程序运行，比如: 赵四每天开车去上班，一般情况下半个小时内就能到公司。 今天突发堵车，赵四与公司取得联系然后告知情况，以免影响工作。 而对于程序而言，堵车就是一种异常，与公司联系告知情况，就是一种异常处理。 异常处理: 异常可以被直接抛出或手动捕获处理，但异常无法直接被解决。 所谓的异常处理，也仅仅是一些紧急补救或通知方案而已。 心法: 异常分类
异常分类 是否接收Javac检查 是否可以不处理 描述 示例 运行异常 非受检 可以不处理 一般指逻辑错误，应积极避免 类转换，数组越界，空指针等 可控异常 受检 必须处理 一般由外界因素造成 IO异常，SQL异常，类丢失等 EP01. 异常基本结构 心法: 异常基本结构
try{}: 用于包裹可能会爆发异常的代码，必须且只能存在1个。 catch(){}: 按照由小到大的顺序捕获并处理1或N种异常，处理方案除发短信/邮件给coder外: log.error(e.getMessage()): 日志记录异常信息。 System.exit(-1): 退出虚拟机。 e.printStackTrace(): 打印堆栈信息。 finally{}: 无论程序是否爆发异常，其中的代码都一定会执行，仅能存在0或1个: 一般在finally中做一些恢复操作和释放资源的操作。 武技: 测试try-catch-finally异常结构
开发测试方法 TryCatchTest -&amp;gt; testTryCatchStructure(): package exception; /** @author lsx */ public class TryCatchTest { @Test public void testTryCatchStructure() { try { // try{}块中存放的是可能会爆发异常的代码 int[] arr = {1, 2}; System.</description></item><item><title>JB1-5-数据结构</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/JB1-5-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>Java道经第1卷 - 第5阶 - v1-5-basic-algorithm(JAR) - 数据结构
CH01. 数组数据结构 EP01. 冒泡排序算法 心法: 冒泡排序算法 - 交换
基础概念: 冒泡排序过程中，较大或较小的元素会经由交换慢慢浮到数列的顶端，故名冒泡排序。 核心思想: 从头开始，不断地比较相邻的两个元素，并进行对应的交换，直到最后排序完成。 心法: 冒泡排序算法流程
假设需要对长度为 N 的数组进行升序排序。 第 1 轮操作: 从头开始比较每一对相邻元素，共需比较 N-1 次。 若前数比后数大则交换，否则跳过，即让大的元素向后移动。 轮次结束后，数组 N-1号位 元素一定是数组中 第1大 的元素。 第 2 轮操作: 从头开始比较每一对相邻元素，共需比较 N-2 次。 若前数比后数大则交换，否则跳过，即让大的元素向后移动。 轮次结束后，数组 N-2号位 元素一定是数组中 第2大 的元素。 第 N-1 轮操作: 比较最后一对相邻元素，共需比较 1 次。 若前数比后数大则交换，否则跳过，即让大的元素向后移动。 轮次结束后，数组 2号位 元素一定是数组中 第2大 的元素。 排序完成。 武技: 使用冒泡排序算法对数组进行升序排序
开发测试方法 BubbleSortTest -&amp;gt; testBubbleSort(): package sort; /** @author lsx */ public class BubbleSortTest { /** 使用冒泡排序算法对数组 [3, 1, 4, 2, 5] 进行升序排序*/ @Test public void testBubbleSort() { int[] arr = {101, 2, 23, 133, 412, 23, 412, 51, 235}; // 每一轮: 9个数，两两相比，要比9-1轮 for (int i = 0, j = arr.</description></item><item><title>JB1-6-虚拟内存</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/JB1-6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid><description>[!NOTE] Java道经第1卷 - 第6阶 - 虚拟内存 v1-6-basic-jvm (JAR)
S01. 虚拟内存模型 武技: 使用javap工具反解析字节码文件
编译 xxx.java 源文件，使其产生字节码文件。 右键 xxx.class 字节码文件，选择 Open In -&amp;gt; Terminal。 使用 javap -v xxx.class 命令反解析字节码文件。 武技: 使用jclasslib插件反解析字节码文件
安装 jclasslib Bytecode Viewer 插件。 编译 xxx.java 源文件，使其产生字节码文件。 将焦点置于 xxx.java 源文件。 点击 View -&amp;gt; Show Bytecode With Jclasslib 查看字节码信息。 E01. 虚拟机概念 1. 虚拟机具体产品 心法: Java虚拟机 Java Virtual Machine，简称 JVM
JVM只是一套规范标准而非具体产品，如 Exact/HotSpot 等产品才是JVM的具体实现。 JVM产品 描述 SunClassic Sun公司的第一款商用JVM实现，仅包含解释器，性能差，JDK1.4时被淘汰 Exact Sun公司第二款商用JVM实现，包含解释器和JIT即时编译器，性能高，但不够流行，没人用 HotSpot Oracle公司的一款JVM实现，包含解释器和即时JIT编译器，性能高，唯一拥有方法区的JVM JRockit BEA公司的一款专注于服务端开发的JVM实现，仅包含JIT即使编译器，性能最高2008年，BEA公司被Oracle收购，并将其优秀的特性都整合到了HotSpot虚拟机中 J9 IBM公司出的一款IT4J虚拟机，内部代号J9，在IBM产品中性能很高，其他产品中表现稍差 武技: 查看当前JVM具体产品</description></item><item><title>JB1-7-并发编程</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/JB1-7-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid><description>[!NOTE] Java道经第1卷 - 第7阶 - 并发编程 v1-7-basic-thread (JAR)
S01. 多线程基础入门 E01. 线程基础概念 1. 进程VS线程 启动一个程序至少启动了一个进程，启动一个进程至少启动了一个线程。 名称 描述 切换开销 数据空间 进程 OS进行分配和管理资源的基本单位 大 进程间独立 线程 CPU调度和分派的基本单位，是进程的一条执行路径 小 线程间共享 ![[excalidraw/进程和线程的区别#^group=1KF5Ai7pvAYL6ECz9wVTz 9999]] 2. 线程调度器 心法: 线程调度器 Thread Scheduler，简称TS
线程调度：指操作系统在多线程环境下决定哪个线程应该在何时运行的过程： 当多线程需要共享CPU资源时，需要一种机制来合理地分配CPU时间片，以最大程度地提高系统的吞吐量和响应性能。 线程调度器：是操作系统内核中，负责线程调度的一个重要组件。 线程调度方案 描述（线程调度器简称TS） 抢占式调度 TS允许更高优先级的任务在任何时刻抢占当前任务，以确保系统能够及时响应高优先级任务的需求该方案是win11默认的调度方案 时间片轮转 TS先将CPU的执行时间划分成N个随机片段，然后为每个线程分配一个固定的时间片每个时间片内，TS都随机选择一个线程执行，当时间片结束时将CPU资源分配给下一个线程该方案可以避免线程饥饿，即避免某个线程长时间占用CPU的情况，从而提高了系统的响应速度和效率 优先级调度 TS根据线程的优先级来确定下一个执行的线程，容易产生线程饥饿问题 多级反馈队列调度 假设创建3个优先级队列A,B和C，三个队列优先级递减，且时间片递减（分别为10ms, 20ms和30ms）1. 当系统启动时，所有的线程都被TS放入队列A，分配时间片10ms2. 当线程T在10ms内仍没执行完任务，则让出CPU，降级到队列B，以获得更大的时间片3. 当线程T在20ms内仍没执行完任务，则让出CPU，降级到队列C，以获得更大的时间片4. 当线程T在30ms内仍没执行完任务，则重新分配到队列C，循环往复，直到完成 3. 多线程优势 CPU的工作就是从内存中将指令一条一条取出并执行，当内存中没有任何指令时，CPU就会处于空闲状态。 多线程模型的最大好处就是可以提高CPU的资源利用率，即让尽量少的CPU处于空闲状态。 4. 并发VS并行 心法: 并发 Concurrency
多任务交替运行：在并发中，多个任务或操作可能交替执行，每个任务都在一段时间内得到处理，但不一定是同时执行。 并发通常用于描述系统中同时存在多个活动任务或操作的情况，这些任务可能是独立的，也可能是相关联的。 心法: 并行 Parallelism
多任务同时运行：在并行中，多个任务或操作确实同时执行，每个任务都在不同的处理器核心上独立运行。 并行通常用于描述系统中真正同时执行多个任务的情况，这些任务通常是相互独立的，彼此不受影响。 E02.</description></item><item><title>JB1-8-设计模式</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JB1-8-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>Java道经第1卷 - 第8阶 - v1-8-basic-design(JAR) - 设计模式
心法: 设计模式分类
GoF四人帮在《设计模式 - 可复用面向对象软件基础》一书总结了23种设计模式，根据用途分为3类。 第一类: 创建型设计模式: 中文 英文 设计模式的核心特点 单例模式 Singleton 保证系统中仅可以存在唯一实例 建造者模式 Builder 创建实例和使用实例的代码解耦，注重细节 工厂模式 Factory 创建实例和使用实例的代码解耦，注重整体 原型模式 Prototype 克隆实例 第二类: 结构型设计模式: 中文 英文 设计模式的核心特点 适配器模式 Adapter 接口和接口兼容 桥接模式 Bridge 抽象和接口解耦，抽离配置 过滤器模式 Filter 根据指定条件进行过滤 装饰器模式 Decorator 在不破坏原结构的情况下扩展类 组合模式 Composite 使用树形结构来表示整体和局部的层次结构 外观模式 Facade 在客户端和复杂系统结构之间再添加一层 享元模式 Flyweight 利用缓存池技术减少重复对象的创建过程 代理模式 Proxy 聘用代理来代替执行客户端任务，拓展客户业务功能 第三类: 行为型设计模式: 中文 英文 设计模式的核心特点 策略模式 Strategy 将各种策略封装成类，并交给用户来决定使用哪一种 模板模式 Template 父类控制整体流程，子类实现每个流程的具体步骤 空对象模式 Null Object 设计空对象以避免空指针异常以及省略调用方的null值检查 命令模式 Command 对 Invoker 命令调用者和 Receiver 命令接收者进行解耦 解释器模式 Interpreter - 迭代器模式 Iterator - 中介者模式 Mediator - 备忘录模式 Memento - 观察者模式 Observer - 状态模式 State - 访问者模式 Visitor - 责任链模式 Chain of Responsibility - CH01.</description></item><item><title>JB1-9-网络编程</title><link>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC1%E9%98%B6%E6%AE%B5-BASIC/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/JB1-9-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid><description>Java道经第1卷 - 第9阶 - v1-9-basic-net(JAR) - 网络编程
S01. 网络模型 E01. 基础概念 1. 何为网络编程 网络编程的本质就是N台计算机之间的数据交换，客户端发送请求到服务端，服务端需要一直保持启动状态。 而整个数据交换过程被分了层，主要目的是解耦，易于各个分层的独立实现和维护。 2. OSI分层模型 OSI（Open System Interconnect）开放式系统互联是 ISO（国际标准化组织）组织在1985年研究的网络互连模型，旨在普及网络应用，统一网络标准，以更方便的进行互通互联。 OSI七层模型如下，其中应用层，表示层和会话层可以被统一称为应用层，即七层模型和五层模型的说法都是可以的： ![[第1阶段-BASIC/JB1-9-网络编程/draw/OSI分层协议.excalidraw.md#^group=P42Or2SHc2pqwsNG_uaex|100%]]
3. OSI分层协议 心法：OSI五层模型中分别使用的协议类型
分层 描述 协议栈 应用层 处理应用到应用的通信 HTTP, Telnet, FTP, TFTP, DNS, SMTP等 传输层 处理端口到端口的通信 TCP, UDP等 网络层 处理IP地址到IP地址的通信 IP, ICMP, RIP, IGMP等 数据链路层 处理Mac地址到Mac地址的通信 ARP, RARP, IEEE802.3, PPP, CSMA/CD等 物理层 处理硬件到硬件的通信 FE自协商, Manchester, MLT-3, 4A, PAM5等 E02. 应用层 心法：应用层是整个网络分层中的最上层（最贴近用户），负责处理应用程序的数据传输
应用层的网络服务协议有 HTTP, Telnet, FTP, TFTP, DNS, SMTP 等等。 1.</description></item><item><title>JB2-1-Linux</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/JB2-1-Linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-1-Linux/JB2-1-Linux/</guid><description>[!NOTE] Java道经第2卷 - 第1阶 - Linux
S01. Linux虚拟主机 E01. 基础概念 1. LINUX 心法: LINUX Linux is not Unix
Linux是一种自由和开源的仿UNIX操作系统。 Linux在1991年，由 林纳斯·托瓦兹 在赫尔辛基大学上学时创立。 Linux内核和应用程序打包后被称为Linux发行版产品，如Ubuntu，RedHat，CentOS等。 Linux以命令为主，更适合搭建服务器，Windows以图形为主，更适合开发项目。 2. 虚拟化 心法: 虚拟化的常见概念
虚拟机概念 中文 描述 示例 host 主机 运行虚拟化软件的物理计算机（硬件） 笔记本，台式机，服务器等 host machine 宿主机 运行在主机上的虚拟化软件的操作系统（软件） Windows11 操作系统等 virtual machine 虚拟机 通过虚拟化技术在主机上创建的一台完整的计算机系统虚拟机中包括独立的CPU，内存，硬盘，网络等资源虚拟机可以运行不同的操作系统和应用程序 Linux操作系统虚拟机等 E02. 安装虚拟机 1. 开启虚拟技术 心法: Hypervisor 虚拟机监视器，简称 Hyper-V
Hyper-V是一种运行在基础物理服务器（计算机硬件）和操作系统之间的中间软件层，允许多个OS和应用共享硬件。 Hyper-V可以访问主机上全部物理设备，其作用和意义就是协调这些硬件资源。 目前大部分Windows系统都是基于Hyper-V技术的一个虚拟OS系统，而非真实的操作系统。 武技: 开启PC电脑的虚拟技术
检查主机的CPU是否已经开启了虚拟化功能，若已开启则省略全部步骤: 重启电脑，启动时按 Del/F10/F1/F2/F8 等进入BIOS界面，如联想电脑为 F2 进入: 寻找 Intel Virtualization Technology 相关配置。 打勾或选择 Enabled 来开启虚拟化支持。 保存配置并重启，完成虚拟化的开启工作。 2.</description></item><item><title>JB2-2-Docker</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/JB2-2-Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-2-Docker/JB2-2-Docker/</guid><description>[!NOTE] Java道经第2卷 - 第2阶 - Docker
S01. Docker引擎 E01. 基础概念 1. Docker概念 心法: Docker (译为码头装卸工人)
Docker是一个开源的应用容器引擎，用于将项目应用及应用运行的环境打包成一个可移植的镜像。 Docker旨在加速现代应用程序的构建，分享和运行过程。 Docker统一了开发，测试和运维的环境，可带环境一起跨平台迁移，解决了Dev，QA和OPS间的部分矛盾。 Docker中的应用启动速度更快，对硬件配置的需求也更低，即使配置较低的电脑也可以轻松跑集群。 2. Docker组件 Docker组件 中文 描述 Client 客户端 客户端用于向Docker主机发送 DockerAPI 请求，该请求本质是一个 http-post 请求 Docker Host 主机 主机用来承载Docker本地运行环境以及Docker本地全部对象，主机可以存在多个（集群） Docker DaemonDockerd 守护进程 守护进程用于监听DockerAPI请求，管理Docker对象如镜像，容器，网络，数据卷等守护进程还可以与其他Docker主机中的守护进程进行通信，以管理Docker服务 Image 镜像 镜像是用于创建容器的模板，是一个静态的概念，相当于Java类镜像的格式为 镜像名:版本，若不指定版本，则一律视为使用 latest 最新版 Container 容器集装箱 Docker容器是通过镜像创建出来的可运行的实体，相当于Java实例一个镜像可以创建出N个容器，一个容器中可以包含N个相关应用容器内和容器外是互相隔绝的，容器和容器之间也是相互隔离的 Registry 镜像中心 Docker镜像中心 中存放很多由官方，其他机构或个人创建的Docker镜像仓库 E02. 引擎架构 心法: Docker引擎架构
1. CentOS装Docker 武技: 在 CentOS 平台中安装 Docker 引擎
参考文档 # 查看OS系统版本 cat /etc/redhat-release # Docker官方推荐在3.</description></item><item><title>JB2-3-MySQL</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/JB2-3-MySQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-3-MySQL/JB2-3-MySQL/</guid><description>[!NOTE] Java道经第2卷 - 第3阶 - MySQL v2-3-web-mysql(JAR) - MySQL
CH01. 关系型数据库 EP01. MySQL相关概念 心法: 数据库 database
相关概念 中文 描述 database 数据库 一个可以持久化存储数据以及简单分析数据的应用软件 RDMS 关系型数据库 由二维表组成，格式一致，易于维护，支持事务，不灵活，如MySQL，Oracle等 NRDMS 非关系型数据库 由文档，键值对，图片等组成，使用灵活，但不支持事务，如Redis，MongoDB等 SQL 结构化查询语言 操作关系型数据库的标准语言，目前数据库厂商实现的都是SQL92或SQL99标准 心法: MySQL数据库
MySQL是一款优秀的RDMS关系型数据库，由瑞典mysql-ab公司开发，目前属于Oracle旗下产品。 MySQL软件采用了双授权政策，分为社区版（开源免费，支持定制）和商业版，体积小，速度快。 MySQL支持5000万条记录的数据仓库，32位系统表文件最大可支持4GB，64位系统支持最大的表文件为8TB。 MySQL使用标准的SQL数据语言形式，跨平台，支持多种语言，如 C/C++/Python/Java/PHP/Ruby 等。 MySQL在5版本之前使用 MyISAM 引擎，在5版本之后使用 InnoDB 引擎，额外支持了ACID事务。 MySQL服务端中支持多个 DB实例，DB实例 中支持多个 DB表。 MySQL用户共享MySQL服务端中的所有 DB实例 和 DB表。 EP02. MySQL服务搭建 武技: 在Docker中搭建MySQL单机容器
1. 准备相关目录 # 创建MySQL相关目录 mkdir -p /opt/mysql/single/conf; mkdir -p /opt/mysql/single/data; mkdir -p /opt/mysql/single/log; chmod -R 777 /opt/mysql; 2.</description></item><item><title>JB2-4-JDBC</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-4-JDBC/JB2-4-JDBC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-4-JDBC/JB2-4-JDBC/</guid><description>Java道经第2卷 - 第4阶 - v2-4-web-jdbc(JAR) - JDBC
CH01. JDBC连库技术 EP01. JDBC连库中间件 心法: Java Data Base Connectivity，简称JDBC
JDBC是Java和数据库连接中间件，是SUN公司面对各个数据库提供的一组接口，用于使用Java代码连接和操作数据库。 武技: 构建测试数据库
构建测试数据库: sql: create database jdbc character set utf8mb4; use jdbc; -- table drop table if exists jdbc.user; create table if not exists jdbc.user ( user_id int auto_increment comment &amp;#39;用户主键&amp;#39;, real_name varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;用户姓名&amp;#39;, primary key (user_id) ) comment &amp;#39;用户表&amp;#39;; EP02. JDBC中间件配通 武技: 在项目 v2-4-web-jdbc 中配通JDBC连库中间件
在父项目中锁定版本: &amp;lt;!</description></item><item><title>JB2-5-Tomcat</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-5-Tomcat/JB2-5-Tomcat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-5-Tomcat/JB2-5-Tomcat/</guid><description>Java道经第2卷 - 第5阶 - v2-5-web-tomcat(WAR) - Tomcat
CH01. 互联网通信模型 心法: Web通信模型 Web Communication Model
Web通信就是基于HTTP协议，客户端向服务端发送HTTP请求，然后服务端返回给客户端HTTP响应的过程: 关键点 中文 描述 HTTP Protocol HTTP协议 请求必须以 http:// 或 https:// 为前缀，HTTP协议的底层是TCP/IP协议 TCP Protocol TCP协议 TCP协议负责将数据完整的送到目的地，尽管路途中可能会将数据拆成若干小块TCP协议采用拥塞机制来控制网络传输，因此当网络拥堵时，会抑制传输速率 IP Protocol IP协议 IP协议负责把数据准确地送到目的地 Client 客户端 客户端可以统一指代浏览器，客户端或一个人类用户BS架构: 从浏览器到服务端，使用方便，无需跟服务端同步更新CS架构: 从客户端到服务端，需要跟服务端同步更新 Server 服务端 服务端指物理主机硬件或WEB服务器应用软件，如Tomcat等 E01. 通信基础概念 1. HTTPS对比HTTP 心法: HTTP 协议和 HTTPS 协议的区别
区别点 HTTP HTTPS 安全性 安全性低，使用明文传输数据，数据不经过加密，容易被窃听和篡改 安全性高，通过SSL/TLS协议对数据进行加密传输，并提供服务器身份验证，有效防止窃听和篡改 通信端口 默认使用端口80进行通信 默认使用端口443进行加密通信 信任度 缺乏对网站真实性的验证，容易受到仿冒网站的攻击 使用数字证书对网站进行身份验证，提高了用户对网站的信任度 2. HTTPS安全措施 心法：HTTPS 安全保障措施
安全保障方式 描述 数据加密 HTTPS使用SSL/TLS协议对传输的数据进行加密，这意味着即使在数据传输过程中被截获，也很难解密和窃取其中的信息。 身份验证 SSL/TLS协议还允许服务器和客户端进行身份验证，确保数据发送到正确的目标，并防止中间人攻击。 数据完整性 HTTPS使用加密哈希算法来验证数据完整性，确保数据在传输过程中不被篡改。 信任和认证 HTTPS使用数字证书来验证服务器的身份和真实性，这些证书由可信任的第三方机构颁发，确保通信双方的真实性。 对抗窥探和劫持 HTTPS可以有效防止网络窥探和劫持，确保用户的隐私和数据安全。 EP01.</description></item><item><title>JB2-6-Servlet</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/JB2-6-Servlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-6-Servlet/JB2-6-Servlet/</guid><description>Java道经第2卷 - 第6阶 - v2-6-web-servlet(WAR) - Servlet
CH01. Servlet基础入门 EP01. Servlet基础入门 心法: Servlet辅助技术
Web容器擅长提供静态页面，不擅长操作 just-in-time 即时动态页面。 若想得到一个即时显示当前时间的静态页面，则Web容器必须求助一些如Servlet之类的辅助程序。 心法: Servlet访问流程
客户端发送请求，请求URL指向Web容器中的辅助程序Servlet: Web容器可以分析出这个请求是发给Servlet的，而非直接获取静态资源。 Web容器启动并运行客户端指定的Servlet，将请求和请求参数一并转交。 Servlet执行 service() 方法，构造一个插入了当前系统时间的HTML静态代码。 Servlet将HTML静态代码返回给Web容器。 Web容器关闭Servlet，并将HTML静态代码响应给客户端。 客户端解析HTML静态代码并渲染到浏览器中，展示最终页面。 武技: 创建War包子项目 v2-6-web-servlet，该项目用于学习Servlet技术
在父项目中锁定版本: &amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;servlet-version&amp;gt;3.1.0&amp;lt;/servlet-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hutool-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--javax.servlet-api--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${servlet-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 在子项目中引入依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB2-7-HTML5</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/JB2-7-HTML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-7-HTML/JB2-7-HTML/</guid><description>[!NOTE] Java道经第2卷 - 第7阶 - HTML5 v2-7-web-html(war)
S01. H5概念入门 E01. H5概念入门 心法: 超文本标记语言 Hyper Text Mark-up Language 5，简称HTML5或H5
H5是一门面向浏览器的标记语言，包括文本，图片，音频，视频，链接等超文本元素，用于布局HTML页面。 H5文件以 .html 为后缀，由标签和文本组成: H5标签描述功能: 由 &amp;lt;&amp;gt; 和小写英文字母组成，分单标签如 &amp;lt;br /&amp;gt; 和双标签如 &amp;lt;p&amp;gt;文本&amp;lt;/p&amp;gt; 两种结构。 H5文本描述内容: 支持且仅支持 &amp;lt;!-- 注释内容 --&amp;gt; 这一种注释格式，且不能嵌套。 1. 页面结构 心法: H5页面的基本结构
标签 中文 描述 &amp;lt;!DOCTYPE html&amp;gt; 文档声明 告诉浏览器我是一个HTML文档，一般写在首行 &amp;lt;html lang=&amp;quot;zh-cmn-Hans&amp;quot;&amp;gt;&amp;lt;/html&amp;gt; 根级标签 告诉浏览器HTML代码从哪里开始，到哪里结束，简体中文环境 &amp;lt;head&amp;gt; 页头标签 开发功能性代码，可存在N个 &amp;lt;title 页面标题 网页被加入收藏夹或书签时会默认使用该标题作为名字 &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; 编码配置 设置页面编码为UTF-8 &amp;lt;body&amp;gt; 页体标签 用于开发展示性代码，可存在N个 2. 起始项目 武技: 创建War包子项目 v2-7-web-html，该项目用于学习HTML技术</description></item><item><title>JB2-8-CSS5</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-8-CSS/JB2-8-CSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-8-CSS/JB2-8-CSS/</guid><description>[!NOTE] Java道经第2卷 - 第8阶 - CSS5 v2-8-web-css(war)
S01. C3基础入门 E01. C3基础入门 心法: 层叠样式表3 Cascading Style Sheets 3，简称CSS3或C3
CSS用于控制网页的样式和布局，包括字体、颜色、间距、边框、背景等方面的表现。 CSS与HTML结合使用，为网页添加样式和美化效果，使得网页内容更具吸引力和可读性。 武技: 创建War包子项目 v2-8-web-css，该项目用于学习CSS技术
开发HTML页面： view/基础入门.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;基础入门&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello CSS3！&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 部署项目，启动Tomcat服务并 访问项目 1. 技术特点 心法: CSS3技术特点
技术特点 描述 层叠性 相同样式会覆盖，不同样式叠加。 继承性 子标签会继承父标签的外观，如字体/颜色等，但不会继承父标签的布局，边框/边距等 2. 样式分类 心法: CSS3样式分类
C3分类 优先级 使用方式 特点 内嵌 最高 直接在某标签的 style 属性中使用 代码耦合度高，不推荐 内部 高 在页头的 &amp;lt;style&amp;gt;&amp;lt;/style&amp;gt; 中开发 学习场景下推荐使用 外部 低 在页头用 &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;quot;/&amp;gt; 引入外部CSS文件 开发场景下推荐使用 浏览器样式 最低 浏览器对标签设置的 一个基本样式 可以直接覆盖 武技: 测试CSS3样式分类</description></item><item><title>JB2-9-JavaScript6</title><link>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/JB2-9-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC2%E9%98%B6%E6%AE%B5-WEB/JB2-9-JavaScript/JB2-9-JavaScript/</guid><description>[!NOTE] Java道经第2卷 - 第9阶 - JavaScript6 v2-9-web-javascript(war)
S01. JS基础入门 E01. JS基础入门 心法: JavaScript 6，简称 JS6
JS是一门用于与浏览器及其内容等几乎所有方面的交互的编程语言: JS在1995年由NetScape公司在网景导航者浏览器上首次设计实现而成。 JS原名 LiveScript，后因与Sun合作更名为 JavaScript 并被纳入 ECMA-262 标准，故 JS 也可被称为 ES: ECMA是欧洲计算机制造联合会，旨在建立统一的电脑操作格式标准。 武技: 创建War包子项目 v2-9-web-javascript，该项目用于学习JavaScript技术
在IDEA中调整对ES6语法的支持: 进入 File -&amp;gt; Settings -&amp;gt; Languages &amp;amp; Frameworks -&amp;gt; JavaScript 页面。 修改 JavaScript language version 为 ECMAScript6 即可。 开发HTML页面： view/基础入门.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;基础入门&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello JavaScript！&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 部署项目，启动Tomcat服务并 访问项目 1. 语言特点 心法: JS语言特点</description></item><item><title>JB3-1-MyBatis</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-1-MyBatis/JB3-1-MyBatis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-1-MyBatis/JB3-1-MyBatis/</guid><description>Java道经第3卷 - 第1阶 - v3-1-ssm-mybatis - MyBatis
CH01. MyBatis基础入门 心法: MyBatis
MyBatis是一个底层半封装了JDBC的持久层的开源ORM框架。 MyBatis前身是Apache的iBatis项目，2010年迁移到了GoogleCode并改名为MyBatis，2013年11月迁移到Github。 MyBatis封装了驱动，连接，Statement等业务代码，但不封装SQL语句。 MyBatis支持注解或XML方式单独开发SQL语句。 武技: 准备MyBatis测试数据
在数据库中创建测试数据库，表以及数据: -- db create database mybatis character set utf8mb4; use mybatis; -- table drop table if exists mybatis.student; create table if not exists mybatis.student ( student_id int auto_increment comment &amp;#39;学生表主键&amp;#39;, real_name varchar(128) not null default &amp;#39;&amp;#39; comment &amp;#39;学生真实姓名&amp;#39;, gender tinyint not null default 0 comment &amp;#39;学生性别，0女，1男，2保密&amp;#39;, phone char(11) not null default &amp;#39;&amp;#39; comment &amp;#39;学生手机号&amp;#39;, fk_clazz_id int comment &amp;#39;班级表外键&amp;#39;, create_time bigint not null default 0 comment &amp;#39;首次创建时间，时间戳&amp;#39;, modify_time bigint not null default 0 comment &amp;#39;最后修改时间，时间戳&amp;#39;, primary key (student_id), unique (phone), unique (real_name) ) comment &amp;#39;学生表&amp;#39;; drop table if exists mybatis.</description></item><item><title>JB3-2-Spring</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/JB3-2-Spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-2-Spring/JB3-2-Spring/</guid><description>[!NOTE] Java道经第3卷 - 第2阶 - Spring v3-2-ssm-spring
S01. Spring基础入门 心法: Spring
Spring是2003年兴起的一个轻量级的Java开源框架，用于管理MVC架构中的控制层和模型层，它提供了一组强大的功能和工具，使得开发者能够更加容易地构建高效、可维护和可扩展的 Java 应用程序，核心包括: SpringCore模块：提供了IOC和DI的支持，用于管理对象以及对象间的依赖关系。 SpringAOP模块：提供了AOP的支持，用于解耦业务代码和切面代码。 SpringContext模块：提供了BeanFactory的功能，是核心模块的拓展。 SpringJDBC模块：提供了JDBC的支持，用于访问和操作数据库。 SpringORM模块：提供了对ORM框架的支持，如Mybatis、JPA等。 SpringWeb模块：提供构建Web应用所需的各种特性和工具，如SpringMVC，Servlet等。 SpringTest模块：提供了对单元测试和集成测试的支持，如JUnit等。 Spring支持基于XML的配置，基于注解的配置和基于纯Java的配置这三种开发方式。 Spring中使用到了大量的设计模式： 设计模式 描述 代理模式 AOP中使用到了CGLIB动态代理 单例模式 Spring配置文件中定义的bean默认为单例模式 模板方法 用来解决代码重复的问题，如RestTemplate, JmsTemplate, JpaTemplate等 工厂模式 Spring通过BeanFactory或ApplicationContext等容器来创建和管理Bean对象 E01. Spring基础配通 武技: 在 v3-2-ssm-spring 子项目中整合Spring框架
1. 引入相关依赖 在父项目中锁定版本: pom.xml
&amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;spring-version&amp;gt;5.2.15.RELEASE&amp;lt;/spring-version&amp;gt; 在父项目中管理依赖: pom.xml
&amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hutool-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB3-3-SpringMVC</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/JB3-3-SpringMVC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-3-SpringMVC/JB3-3-SpringMVC/</guid><description>[!NOTE] Java道经第3卷 - 第3阶 - SpringMVC v3-3-ssm-springmvc
S01. SpringMVC基础入门 心法: SpringMVC
SpringMVC是Spring框架的控制层技术，本质是一个Servlet组件。 SpringMVC核心是前端控制器 org.springframework.web.servlet.DispatcherServlet DispatcherServlet负责管理和调用其它组件以处理用户的HTTP请求，降低组件间的耦合度。 E01. SpringMVC底层流程 心法: SpringMVC底层流程
当浏览器请求符合前端控制器规则时，WEB服务器会将其转交给前端控制器。 前端控制器调用处理器映射器 HandlerMapping，该组件主要负责查找: 根据请求URL找到某自定义Handler，将其和拦截器（若有）封装成执行链并返回。 全名 org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping 前端控制器调用处理器适配器 HandlerAdapter，该组件主要负责执行: 依次执行执行链中拦截器和Handler并返回一个ModelAndView对象。 全名 org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter 前端控制器调用视图解析器 ViewResolver，该组件主要负责解析结果: 将ModelAndView中的逻辑视图名拼接前后缀后解析为物理视图名，并返回View对象。 全名 org.springframework.web.servlet.view.InternalResourceViewResolver 前端控制器根据View组装HTML页面响应给浏览器，浏览器渲染页面: 渲染: 浏览器解析HTML，构建DOM树，整合CSS和JS，布局，绘制等过程。 graph LR B((浏览器)) --发送请求--&amp;gt; f{分析请求&amp;lt;br/&amp;gt;是否指向&amp;lt;br/&amp;gt;Handler}; f --是--&amp;gt; DS(前端控制器&amp;lt;br/&amp;gt;DispatcherServlet); f --否--&amp;gt; RES(静态资源) --响应--&amp;gt; B; DS --传递请求--&amp;gt; HM(处理器映射器HandlerMapping&amp;lt;br/&amp;gt;负责寻找Handler，封装HandlerChain); HM --返回HandlerChain--&amp;gt; DS; DS --传递HandlerChain--&amp;gt; HA(处理器适配器HandlerAdapter&amp;lt;br/&amp;gt;负责执行HandlerChain); HA --返回ModelAndView--&amp;gt; DS; DS --传递ModelAndView--&amp;gt; VR(视图解析器ViewResolver&amp;lt;br/&amp;gt;负责根据ModelAndView解析出View对象); VR --返回View对象--&amp;gt; DS; DS --响应--&amp;gt; B; E02.</description></item><item><title>JB3-4-SpringBoot</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/JB3-4-SpringBoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/JB3-4-SpringBoot/</guid><description>[!NOTE] Java道经第3卷 - 第4阶 - SpringBoot v3-4-ssm-springboot
S01. SpringBoot基础入门 心法: SpringBoot 基本概念
SpringBoot是由Pivotal团队提供的基于Spring框架的轻量级应用开发框架，包含Spring全部功能。 SpringBoot的主要目的是简化Spring应用的开发和部署过程，从而提高开发和部署效率。 SpringBoot优势 描述 减少配置文件 SpringBoot大量使用注解来替代繁琐复杂的XML配置，大大地提高了开发效率和开发体验。 自动装配组件 SpringBoot可以自动将第三方组件的Bean装载进Spring容器，无需手写Bean的装配配置。 应用拓展性高 SpringBoot针对常见场景提供了丰富的启动依赖集合 starter，以支持快速开发和部署应用程序。 提高部署效率 SpringBoot项目内嵌Tomcat，Jetty等容器，不仅可以更快速便捷地将应用部署到各种云平台，Docker等环境中，而且以Jar包的形式独立运行和部署的项目，启动速度会更快。 面向生产环境 SpringBoot提供了很多面向生产环境的功能，如管理端点、健康检查、指标收集，应用监控等。 E01. SpringBoot项目搭建 心法: SpringBoot项目的三种创建方式
使用 官方在线工具 创建SpringBoot项目，没有IDEA时推荐该方式。 使用IDEA创建SpringBoot项目: 创建过程中直接选择 Spring Initializr 进行快速搭建，工作时推荐该方式。 使用IDEA创建SpringBoot项目: 先创建MavenJar项目，然后再改造为SpringBoot项目，学习时推荐该方式。 武技: 手动创建MavenJar项目 v3-4-ssm-springboot/springboot-start
1. 添加三方依赖 在父项目中锁定版本： pom.xml
&amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;spring-boot-version&amp;gt;2.3.12.RELEASE&amp;lt;/spring-boot-version&amp;gt; 在父项目中管理依赖: pom.xml
&amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.</description></item><item><title>JB3-5-Redis</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/JB3-5-Redis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-5-Redis/JB3-5-Redis/</guid><description>Java道经第3卷 - 第5阶 - v3-5-ssm-redis - Redis
S01. Redis基础入门 E01. 基础概念入门 1. NoSQL基础概念 心法: NoSQL 全称 Not Only SQL，不止于SQL
NoSQL是一种泛指非关系型数据库的全新理念，如键值对结构的Redis，文档结构的MongoDB，图形结构的Neo4j等。 flowchart LR n1[&amp;#34;NoSQL特点&amp;#34;] n1 -.- n2[&amp;#34;高扩展&amp;#34;] -.- n2a[&amp;#34;数据之间无关联，故非常容易进行修改和扩展&amp;#34;] n1 -.- n3[&amp;#34;高性能&amp;#34;] -.- n3a[&amp;#34;数据结构简单，在海量数据量场景下具有高读写性能&amp;#34;] n1 -.- n4[&amp;#34;更灵活&amp;#34;] -.- n4a[&amp;#34;无需事前建立表结构，更灵活的操作数据，避免繁琐的表，字段的关系操作&amp;#34;] n1 -.- n5[&amp;#34;高可用&amp;#34;] -.- n5a[&amp;#34;通常采用分布式架构，可以在多台服务器上部署，实现水平扩展和高可用性&amp;#34;] 2. Redis技术特点 心法: Redis缓存中间件 - 一款基于C语言开发的免费开源的缓存数据库
Redis目前被github，twitter，stackOverFlow，阿里巴巴，百度，美团，搜狐，新浪微博等项目使用: flowchart LR n1[&amp;#34;Redis特点&amp;#34;] n1 -.- n2[&amp;#34;原子操作&amp;#34;] -.- n2a[&amp;#34;Redis是单线程的，避免了并发问题和线程切换消耗&amp;#34;] n1 -.- n3[&amp;#34;内存存储&amp;#34;] -.- n3a[&amp;#34;数据默认保存在内存，官测50个并发执行10W个请求时，读速11W次/s，写速8.1W次/s&amp;#34;] n1 -.- n4[&amp;#34;多种场景&amp;#34;] -.- n4a[&amp;#34;常用于缓存热点数据，高效计数，秒杀限购，分布式锁等场景&amp;#34;] n1 -.</description></item><item><title>JB3-6-ElasticSearch</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-6-ElasticSearch/JB3-6-ElasticSearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-6-ElasticSearch/JB3-6-ElasticSearch/</guid><description>[!NOTE] Java道经第3卷 - 第6阶 - ElasticSearch v3-6-ssm-elasticsearch
S01. ES基础入门 武技: 创建 v3-6-ssm-elasticsearch 子项目
在父项目中锁定版本: &amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;spring-boot-version&amp;gt;2.3.12.RELEASE&amp;lt;/spring-boot-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hutool-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-parent--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-boot-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 在子项目中引入依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-test--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 开发启动类: com.</description></item><item><title>JB3-7-MongoDB</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-7-MongoDB/JB3-7-MongoDB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-7-MongoDB/JB3-7-MongoDB/</guid><description>[!NOTE] Java道经第3卷 - 第7阶 - MongoDB v3-7-ssm-mongodb
S01. Mongo基础入门 E01. Mongo概念入门 心法: MongoDB
MongoDB是一个由C++语言编写的，基于分布式文件存储的数据库: MongoDB是面向文档存储的数据库，文档类似于JSON对象，数据结构由键值对组成。 MongoDB旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB是一个介于关系数据库和非关系数据库之间的产品： MongoDB是非关系数据库当中功能最丰富，最像关系数据库的。 MongoDB支持支持索引，支持复杂查询。 MongoDB不支持连表操作，但支持文档数据嵌套。 1. Mongo对应MySQL MongoDB角色 中文 对应RDBMS中的 database 数据库 database 数据库 collection 集合 table 表格 document 文档 row 表行 field 字段 column 表列 index 索引 index 索引 primary key 主键 primary key 主键 E02. Mongo容器搭建 1. 准备相关目录 # 创建Mongo相关目录 mkdir -p /opt/mongo/data chmod -R 777 /opt/mongo/data 2. 创建运行容器 # 创建并启动Mongo容器 # args: `--auth`: 需要账号密码访问Mongo数据库 docker run -itd --name mongo --network host \ -v /opt/mongo/data:/data \ mongo:6.</description></item><item><title>JB3-8-Nginx</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-8-Nginx/JB3-8-Nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-8-Nginx/JB3-8-Nginx/</guid><description>[!NOTE] Java道经第3卷 - 第8阶 - Nginx v3-8-ssm-nginx
S01. Nginx基础入门 E01. 基础概念 心法: Nginx
Nginx是一款开源的服务器和反向代理Web服务器，邮件服务器，支持很多第三方的模块扩展。 1. 启动模式 心法: Nginx服务端启动模式
Nginx服务端采取多进程模式，启动Nginx服务时，后台会至少启动2个进程。 进程类型 中文 描述 Master 守护进程 负责向Worker转发外界信号负责监控Worker状态，当Worker异常时会自动重启新的Worker进程 Worker 工作进程 负责监听端口和处理用户请求Worker之间相互隔离独立Worker数量建议配置与CPU核数一致 2. 正向代理 心法: 正向代理 - 客户端的代理，对客户端负责
客户端发送请求到代理服务器，代理服务器转发请求到具体服务器，响应也是原路返回。 正向代理优势 描述 破解限制 某服务器限制客户端直接访问则可以找个可访问的代理服务器来访问该服务器如KX上网 加速访问 电信客户端访问联通服务器太慢则可以找个电信联通都能访问的代理服务器调节如游戏加速器 缓存数据 每次请求获取的数据都可以缓存到代理服务器中后续相同的请求可以直接从缓存中获取 保护客户端隐私 服务端仅知道请求来自于哪个代理服务器但并不知道请求具体来自于哪个客户端 3. 反向代理 心法: 反向代理 - 服务端的代理，对服务端负责
代理流程: 代理服务器接收到请求之后，按一定规则分发给某个具体的服务器，响应也是原路返回。 反向代理优势 描述 负载均衡 代理服务器可以使用多种负载均衡策略分发请求，分摊服务器集群的压力 保护服务端隐私 客户端仅知道请求发送给了哪个代理服务器但并不知道请求具体由哪台服务器进行处理 E02. 容器搭建 武技: 在Docker中搭建单机Nginx容器
1. 创建相关目录 # 创建Nginx相关目录 mkdir -p /opt/nginx/conf; mkdir -p /opt/nginx/logs; mkdir -p /opt/nginx/static; chmod -R 777 /opt/nginx; 2.</description></item><item><title>JB3-9-Vue</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/JB3-9-Vue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-9-Vue/JB3-9-Vue/</guid><description>[!NOTE] Java道经第3卷 - 第9阶 - Vue v3-9-ssm-vue
S01. Vue基础入门 E01. Vue概念入门 心法: Vue
Vue是一套用于构建用户界面的渐进式框架，Vue组件使用 .vue 作为文件后缀: Vue文件使用 &amp;lt;template&amp;gt; 划分HTML代码开发区。 Vue文件使用 &amp;lt;style&amp;gt; 划分CSS/SCSS代码开发区。 Vue文件使用 &amp;lt;script&amp;gt; 划分JS代码开发区。 Vue底层采用MVVM架构，不允许直接操作DOM树，而是采用数据驱动DOM的方式工作。 MVVM架构 对比MVC架构 描述 代码所属区域 Model 模型层 负责定义数据 &amp;lt;script&amp;gt; ViewModel 控制层 负责连接V层和M层 &amp;lt;script&amp;gt; View 视图层 负责DOM元素的开发 &amp;lt;template&amp;gt; + &amp;lt;style&amp;gt; 武技: 测试Vue非脚手架开发方式
开发一个测试的HTML页面: 自行引入 vue-3.3.7.js（必选） 自行引入 element-plus-2.4.2.js（可选） 自行引入 element-plus-2.4.2.css（可选） &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;vue-3.3.7.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;element-plus-2.4.2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;element-plus-2.4.2.css&amp;#34;&amp;gt; &amp;lt;title&amp;gt;测试Vue非脚手架开发方式&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;el-button&amp;gt;{{message}}&amp;lt;/el-button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; const App = { data(){ return{ message: &amp;#39;登录&amp;#39; } } } // 使用ElementPlus库，并挂载 div Vue.</description></item><item><title>JB4-1-项目简介</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/JB4-1-%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/</guid><description>[!NOTE] Java道经第4卷 - 第1阶 - 项目简介 lesson
S01. 项目简介 心法: lesson项目简介
Lesson项目全称 &amp;ldquo;李氏云课堂&amp;rdquo;，是仿照网易云课堂，腾讯云课堂等在线课堂项目研发而成的一个线上学习平台项目，项目旨在为用户提供更优雅，专注，简洁的线上学习环境以及技术支持。 Lesson项目整体采用单体的MVC架构，面向对象开发，面向接口开发。 Lesson项目前台和后台均采用 SpringBoot + MyBatis 框架进行开发，文档服务采用 JDBC + Servlet 组件进行开发（仅为学习）。 Lesson项目前台和后台均使用前后端分离模式进行研发。 E01. 项目角色 心法: Lesson项目整体角色
角色 权限 文档操作员 允许登录Lesson后台文档服务子项目。允许管理Lesson后台API接口，如查看API接口列表，修改API参数，返回值，请求方式等，删除指定的接口列表等。 系统管理员 允许登录Lesson后台子项目。允许管理Lesson后台数据，如会员，权限，课程，课程季次，课程集次，订单，日志，评论，举报等。 普通会员 允许登录Lesson前台子项目。允许注册，登录，查看横幅，搜索课程，收藏课程，购物车管理，购买课程，订单管理，在线观看课程，发表评论，违规举报等。 用户状态 权限列表 未登录 浏览横幅广告，浏览视频，搜索视频，查看视频详情，按账号或手机号登陆系统等。 已登陆 查看个人信息，修改个人信息，查询个人积分，注销账号，登出账号，添加购物车，查看购物车，删除购物车商品，清空购物车，下单购买视频等 已支付 查看个人订单，删除个人订单，在线观看视频，实时发送弹幕，评论，点赞视频等。 E02. 通用环境 心法: 全部子项目均使用此环境配置进行搭建和开发
环境&amp;amp;工具 技术选型 端口占用 操作系统 Windows(11) 开发工具箱 JDK(11.0.16.1) 集成开发环境 IntelliJ IDEA(2021.3.3 Ultimate Edition) 项目管理工具 Maven(3.6.0) 版本控制工具 Git(2.28.0.windows.1) + GitEE 前端服务器 Node(16.14.0) 前端浏览器 Edge(120.</description></item><item><title>JB4-2-公共服务</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-2-%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1/JB4-2-%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-2-%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1/JB4-2-%E5%85%AC%E5%85%B1%E6%9C%8D%E5%8A%A1/</guid><description>[!NOTE] Java道经第4卷 - 第2阶 - 公共服务 lesson-common &amp;amp; lesson-mybatis-flex &amp;amp; lesson-search
S01. 开发公共子项目 心法: 公共项目
公共项目用于提取多个子项目之间相同的代码，比如自己封装的Util工具，ORM实体类等。 公共项目建议使用 xxx-common 格式命名。 武技: 创建公共子项目
在子项目 lesson-common 中添加依赖: &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; 表示默认情况下，不会向调用方传递依赖，防止冲突。 &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--java-jwt--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.auth0&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;java-jwt&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mybatis-flex-spring-boot-starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.mybatis-flex&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-flex-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-data-redis--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; E01. 封装常用工具 武技: 在子项目 lesson-common 中封装常用工具类</description></item><item><title>JB4-3-后台文档</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-3-%E5%90%8E%E5%8F%B0%E6%96%87%E6%A1%A3/JB4-3-%E5%90%8E%E5%8F%B0%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-3-%E5%90%8E%E5%8F%B0%E6%96%87%E6%A1%A3/JB4-3-%E5%90%8E%E5%8F%B0%E6%96%87%E6%A1%A3/</guid><description>[!NOTE] Java道经第4卷 - 第3阶 - 后台文档 lesson-admin-doc
S01. JDBC实战准备 E01. 搭建项目环境 武技: 创建War包子项目 lesson-admin-doc
进入 File -&amp;gt; New Module 界面，左侧选择 Maven 选项卡。 勾选 Create from archetype 选项: 在下方选择 org.apache.maven.archetypes:maven-archetype-webapp 并点击 Next 按钮。 输入项目名称 lesson-document 并点击 Next 按钮。 检查Maven相关地址和配置路径，然后点击 Next 按钮。 E02. 添加项目依赖 武技: 在 lesson-document 子项目中添加相关依赖
在父项目中锁定版本: &amp;lt;junit-version&amp;gt;4.13.2&amp;lt;/junit-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; &amp;lt;hutool-version&amp;gt;5.8.14&amp;lt;/hutool-version&amp;gt; &amp;lt;mysql-connector-j-version&amp;gt;8.0.33&amp;lt;/mysql-connector-j-version&amp;gt; 在父项目中管理依赖: &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${junit-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool-all--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${hutool-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB4-4-后台后端</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-4-%E5%90%8E%E5%8F%B0%E5%90%8E%E7%AB%AF/JB4-4-%E5%90%8E%E5%8F%B0%E5%90%8E%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-4-%E5%90%8E%E5%8F%B0%E5%90%8E%E7%AB%AF/JB4-4-%E5%90%8E%E5%8F%B0%E5%90%8E%E7%AB%AF/</guid><description>[!NOTE] Java道经第4卷 - 第4阶 - 后台后端 lesson-admin
S01. 搭建项目环境 武技: 创建 lesson-admin 子项目并搭建基础环境
在子项目引入依赖: &amp;lt;!--公共项目--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lsx&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lesson-common&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-test--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-aop--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-aop&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql-connector-j--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-j&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-cache--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--springdoc-openapi-ui--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springdoc&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springdoc-openapi-ui&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--knife4j-springdoc-ui--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.xiaoymin&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;knife4j-springdoc-ui&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB4-5-后台前端</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-5-%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/JB4-5-%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-5-%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/JB4-5-%E5%90%8E%E5%8F%B0%E5%89%8D%E7%AB%AF/</guid><description>[!NOTE] Java道经第4卷 - 第5阶 - 后台前端 lesson-admin-web
S01. 项目实战准备 E01. 搭建Vue项目 1. 创建Vue项目 使用Vue命令创建后台前端项目 lesson-admin-web # 切换到工作空间目录，注意路径中不要有中文 D: cd D:\idea\workspace\lesson-project # 创建Vue项目 `lesson-admin-web` vue create lesson-admin-web 使用IDEA打开Vue项目。 2. 优化项目结构 在线制作一个ICO文件如 lesson-admin.ico 并替换 /public/favicon.ico 图标文件。 删除 @/asserts/logo.png 示例图片。 删除 @/components/ 中的全部示例Vue组件以及对应 @/router/index.js 中的路由配置。 删除 @/views/ 中的全部示例Vue组件。 3. 优化项目首页 index.html
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh_CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width,initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;./lesson-admin.ico&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Lesson后台管理&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;noscript&amp;gt;你的浏览器不支持JavaScript&amp;lt;/noscript&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 4.</description></item><item><title>JB4-6-前台后端</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/JB4-6-%E5%89%8D%E5%8F%B0%E5%90%8E%E7%AB%AF/</guid><description>[!NOTE] Java道经第4卷 - 第6阶 - 前台后端 lesson-server
S01. 搭建项目环境 心法：项目相关资料
项目后台接口图+ 项目业务流程图 武技: 创建 lesson-server 子项目并搭建基础环境
E01. 基础环境搭建 1. 引入项目依赖 pom.xml
&amp;lt;!--引入自己的公共项目--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lsx&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lesson-common&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--junit--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--hutool--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-test--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-aop--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-aop&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql-connector-j--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-j&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-cache--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--springdoc-openapi-ui--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>JB4-7-前台前端</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-7-%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AF/JB4-7-%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-7-%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AF/JB4-7-%E5%89%8D%E5%8F%B0%E5%89%8D%E7%AB%AF/</guid><description>[!NOTE] Java道经第4卷 - 第7阶 - 前台前端 lesson-server-miniapp
S01. 项目实战准备 E01. 创建微信项目 1. 安装开发者工具 下载 微信开发者工具，傻瓜式安装即可： wechat_devtools_xxxx_win32_x64.exe 启动微信开发者工具，登录自己的微信。 2. 创建小程序项目 创建微信小程序项目 lesson-server-miniapp： 3. 调整模拟器布局 点击模拟器左上角，选择机型为 iPhone 15 Pro Max 100%。 点击模拟器左上角，选择显示比例为 自适应。 4. 调整内存限制数 左上角依次点击 设置 -&amp;gt; 通用设置 [ctrl + ,] -&amp;gt; 通用: 修改内存限制为2048M: 5. 调整基础库版本 右上角依次点击 详情 -&amp;gt; 本地设置: 调整 调试基础库 为当时百分比最高的版本： 6. 不校验合法域名 右上角依次点击 详情 -&amp;gt; 本地设置。 勾选 不校验合法域名、web-view（业务域名）、TLS版本以及HTTPS证书 项。 7. 使用IDEA开发 武技: 使用IDEA打开微信小程序项目
需要 Wechat mini program support 插件，ZXY版本。 需要 WeChat weapp Support 插件。 尽量不要将小程序项目作为其他项目的子模块打开，否则某些提示可能会失效，影响开发体验。 E02.</description></item><item><title>JB4-8-其他服务</title><link>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-8-%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1/JB4-8-%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC4%E9%98%B6%E6%AE%B5-LESSON/JB4-8-%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1/JB4-8-%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1/</guid><description>[!NOTE] Java道经第4卷 - 第8阶 - 其他服务 lesson-monitor
S01. 开发监控服务 武技: 创建子项目 lesson-monitor 做为监控服务子项目
E01. 开发监控服务端 1. 第三方依赖 pom.xml
&amp;lt;!--spring-boot-admin-server--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;de.codecentric&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-admin-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-admin-server-ui--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;de.codecentric&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-admin-server-ui&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2. 开发主配项 classpath:application.properties
############################# App ############################## #端口号，项目名，管控台账号，管控台密码# server.port=5002 spring.application.name=lesson-monitor spring.security.user.name=monitor spring.security.user.password=monitor 3. 开发启动类 `com.lsx.LessonMonitorApp
@EnableAdminServer @SpringBootApplication public class LessonMonitorApp { public static void main(String[] args) { SpringApplication.run(LessonMonitorApp.class, args); } } E02. 开发监控客户端 武技: 使用子项目 lesson-admin 和 lesson-server 做为监控客户端
1. 第三方依赖 pom.</description></item><item><title>JB5-0-项目搭建</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/JB5-0-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</guid><description>Java道经第5卷 - 第0阶 - 项目搭建
CH01. 搭建数据库 武技: 创建MySQL数据库和相关表
创建数据库实例: cmd: create database v3_alibaba character set utf8mb4; use v3_alibaba; 导入数据库表和测试数据: res: v3_alibaba.sql CH02. 父项目管理依赖 武技: 在父项目 java-book 中配置依赖管理
添加全局属性: &amp;lt;spring-cloud-version&amp;gt;Hoxton.SR12&amp;lt;/spring-cloud-version&amp;gt; &amp;lt;spring-cloud-alibaba-version&amp;gt;2.2.9.RELEASE&amp;lt;/spring-cloud-alibaba-version&amp;gt; &amp;lt;dobbo-version&amp;gt;2.7.13&amp;lt;/dobbo-version&amp;gt; &amp;lt;spring-context-support-version&amp;gt;1.0.11&amp;lt;/spring-context-support-version&amp;gt; &amp;lt;jjwt-version&amp;gt;0.9.0&amp;lt;/jjwt-version&amp;gt; &amp;lt;rocketmq-version&amp;gt;2.0.3&amp;lt;/rocketmq-version&amp;gt; 添加依赖管理: &amp;lt;!--spring-cloud-dependencies--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-alibaba-dependencies--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-alibaba-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--dubbo-spring-boot-starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${dobbo-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-context-support: 解决dubbo2.7.13的jar包冲突问题--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.spring&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-context-support-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--jjwt--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jjwt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jjwt-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB5-1-注册中心</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/JB5-1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</guid><description>[!NOTE] Java道经第5卷 - 第1阶 - 注册中心 v5-1-alibaba-nacos
S01. 微服务架构 E01. 微服务演变历史 心法：单体应用 -&amp;gt; 垂直应用 -&amp;gt; 分布式应用 -&amp;gt; SOA应用 -&amp;gt; 微服务应用
1. 单体应用架构 心法：单体应用架构 Monolithic Architecture，也被各种微服务书籍戏称为巨石架构
单体架构中，用户界面、业务代码和数据库调用等所有内容都包含在同一个Jar包中。 ![[第5阶段-ALIBABA/JB5-1-注册中心/draw/单体应用架构.md#^group=ul-mRDUj0YHYd0uIlWm3o|100%]]
项 描述 优点 架构简单，项目开发，部署和维护的成本低，适用于小型项目。 缺点 1. 功能耦合度极高，单点容错率低。2. 水平扩展性极差，无法单独对某个热点业务进行集群。3. 随着时间的推移，它的代码量将变得越来越庞大，越来越难以管理。4. 任何修改都必须要重新部署整个项目。 2. 垂直应用架构 心法：垂直应用架构 Vertical Architecture
垂直应用架构就是按照按功能，将单体应用拆分为N个互不相干的应用，以此来提升整体的性能。 ![[第5阶段-ALIBABA/JB5-1-注册中心/draw/垂直应用架构.md#^group=62odhNUXys5Lfg9Onavlv|100%]]
项 描述 优点 1. 各个应用分担了整体访问的流量，解决了一部分并发问题，提高了性能。2. 高流量时，仅针对某个热点服务进行集群即可，不用整个项目集群，提高了扩展性。3. 一个应用出问题不会影响到其他应用，提高容错率。 缺点 1. 应用之间相互独立，无法相互调用。2. 应用之间难免会产生大量的重复代码，后期维护困难，一改全改。 3. 分布式应用架构 心法：分布式应用架构 Vertical Architecture
分布式应用架构在垂直应用架构的基础上，将重复的代码全部抽取到公共服务层，供其他应用来调用。 ![[第5阶段-ALIBABA/JB5-1-注册中心/draw/分布式应用架构.md#^group=OwEfxlEpNW_t4A2PCOZO2|100%]]
项 描述 优点 引入公共服务层可以提高整体心痛的代码重用性。 缺点 应用之间调用关系复杂，耦合度变高，维护困难。 4. SOA应用架构 心法：SOA应用架构 Service-Oriented Architecture</description></item><item><title>JB5-2-远程调用</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/JB5-2-%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</guid><description>[!NOTE] Java道经第5卷 - 第2阶 - 远程调用 v5-2-alibaba-openfeign &amp;amp; v5-2-alibaba-dubbo
S01. 远程调用 E01. 远程调用方式 心法：微服务架构中，多个服务之间的远程调用方式
比较项 RESTful RPC 通讯协议 通常使用 HTTP 协议作为通信协议利用 HTTP 方法和状态码进行通信 可以使用多种底层协议，如 HTTP、TCP、UDP 等一般使用TCP 数据格式 通常使用 JSON 或 XML 格式 通常使用二进制格式、JSON、XML 等 性能 HTTP 通信开销较大，性能低 二进制协议通信开销较小，性能高 灵活度 灵活度高使用统一的接口和标识符来操作资源可以更容易地进行扩展和修改 灵活度低客户端和服务端需要使用特定的接口和方法来进行通信对接口的修改可能会影响到客户端和服务端的实现 状态管理 强调无状态性即服务器不应该保存客户端的状态信息 支持有状态的通信即服务器可以保存客户端的状态信息 应用 微服务架构 SOA架构 1. RESTFul 心法：REST Representational State Transfer
RESTful是一种基于资源的架构风格，强调利用统一的接口进行通信，每个资源都有一个唯一的标识符（URI），并且通过 HTTP 方法（如 GET、POST、PUT、DELETE）对资源进行操作。 2. RPC 心法：RPC Remote Promote Call
RPC 是一种远程调用的架构风格，客户端可以调用远程服务器上的函数或方法，就像调用本地函数一样，通过网络进行通信。 RPC框架的主要目标就是让远程服务调用更简单、透明。 RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。 S02. OpenFeign E01.</description></item><item><title>JB5-3-流量卫兵</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/JB5-3-%E6%B5%81%E9%87%8F%E5%8D%AB%E5%85%B5/</guid><description>[!NOTE] Java道经第5卷 - 第3阶 - 流量卫兵 v5-3-alibaba-sentinel
S01. Jmeter压测工具 心法: Jmeter压测工具
Jmeter是Apache组织基于Java开发的压力测试工具。 E01. Jmeter工具安装 武技: 安装Jmeter压测工具
1. 安装压测工具 确认 JAVA_HOME 配置是否正确。 安装Jmeter压测工具 apache-jmeter-5.2.1.zip: 解压缩即可。 启动Jmeter压测工具: 双击启动 @\bin\jmeter.bat 文件启动Jmeter压测工具。 关闭CMD窗口时，视为关闭Jmeter压测工具。 2. 调整语言环境 点击 Options -&amp;gt; Choose Language 项。 选择 Chinese(Simplified) 简体中文 项。 E02. Jmeter压测流程 武技: Jmeter压测工具使用流程
flowchart LR n1[&amp;#34;添加线程组&amp;#34;] --&amp;gt; n2[&amp;#34;添加HTTP请求&amp;#34;] --&amp;gt; n3[&amp;#34;添加结果树&amp;#34;] --&amp;gt; n4[&amp;#34;启动测试&amp;#34;] 1. 添加线程组 心法：线程组用于设置线程相关信息
右键 Test Plan: 依次选择 添加 -&amp;gt; 线程(用户) -&amp;gt; 线程组 进入线程组配置界面。 相关项 描述 示例 名称 名称随意，唯一即可 openfeign-order 线程数 一共要启动多少个线程 2 RampUp时间（秒） 全部线程需要在多少秒内启动完毕设置 -1 表示系统自动配置 -1 循环测试 每个线程要循环执行多少次勾选 永远 表示一直执行不停止 3 2.</description></item><item><title>JB5-4-服务网关</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/JB5-4-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</guid><description>[!NOTE] Java道经第5卷 - 第4阶 - 服务网关 v5-4-alibaba-gateway
S01. Gateway概念入门 E01. 网关基本概念 心法: 网关概念
API网关是所有请求的公共入口，为客户端提供统一服务。 API网关可实现一些如认证，鉴权，监控，路由转发等与业务本身无关的公共逻辑。 1. 网关优势 心法: 当微服务加入网关功能之后
微服务不再需要管理和记录其他微服务的地址和端口，统一由API网关进行管理和路由转发。 不需要为每个微服务配置认证和鉴权代码，统一由API网关进行配置。 更容易解决跨域请求问题。 2. Gateway 心法: SpringCloud-Gateway，简称Gateway
Gateway是Spring公司为了替换Zuul而开发的网关服务。 Gateway基于Filter链提供了网关基本的功能如安全，监控和限流等。 Gateway性能强劲，是第一代网关Zuul的1.6倍。 Gateway功能强大，内置了很多实用功能，如路由转发，监控，限流等。 Gateway学习成本高，其实现依赖Netty与WebFlux，而非传统的Servlet编程模型。 Gateway依赖springboot2.0+版本，且无法将其部署在web容器中运行，只能打成jar包执行。 E02. 开发订单服务 武技: 创建 v5-4-alibaba-gateway 子项目，以及 gateway-order 子项目
1. 引入三方依赖 在父项目中锁定版本： pom.xml
&amp;lt;spring-boot-version&amp;gt;2.3.12.RELEASE&amp;lt;/spring-boot-version&amp;gt; &amp;lt;spring-cloud-version&amp;gt;Hoxton.SR12&amp;lt;/spring-cloud-version&amp;gt; &amp;lt;spring-cloud-alibaba-version&amp;gt;2.2.9.RELEASE&amp;lt;/spring-cloud-alibaba-version&amp;gt; &amp;lt;lombok-version&amp;gt;1.18.24&amp;lt;/lombok-version&amp;gt; 在父项目中管理依赖： pom.xml
&amp;lt;!--lombok--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok-version}&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-parent--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-boot-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-dependencies--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring-cloud-version}&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>JB5-5-链路追踪</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/JB5-5-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid><description>[!NOTE] Java道经第5卷 - 第5阶 - 链路追踪 v5-5-alibaba-sleuth
S01. Sleuth概念入门 心法: Sleuth链路追踪
SpringCloud中的Sleuth组件用于将一次分布式请求还原成调用链路，进行日志记录，性能监控并集中展示。 E01. Sleuth核心组件 1. TraceId 心法: Sleuth核心之 TraceId
当请求到达微服务的入口端点时，Sleuth会为该请求创建一个 TraceId 作为本次请求的唯一标识。 从请求开始到请求结束，TraceId 的值都不会发生改变。 2. SpanId 心法: Sleuth核心之 SpanId
在一次完整的请求中，每个分支请求都会生成一个 SpanId 作为唯一标识。 SpanId 用来标记请求的开始，具体过程和结束，方便统计每次请求的调用时间和元信息等。 3. Annotation 心法: Sleuth核心之 Annotation
Annotation: 用于记录一次请求的生命周期时间段，是链路追踪内部使用的重要元素。 相关概念 描述 相关公式 CS(Client Send) 客户端发出请求，开始一个请求的生命周期 SR - CS = 网络延迟时间 SR(Server Received) 服务端接收到请求，并开始进行处理 SS(Server Send) 服务端处理请求完毕，准备给客户端发送响应 SS - SR = 服务器处理时间 CR(Client Received) 客户端接收到服务端的响应，整个请求结束 CR - CS = 请求的总时间 E02.</description></item><item><title>JB5-6-消息队列</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/JB5-6-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid><description>[!NOTE] Java道经第5卷 - 第6阶 - 消息队列 v5-6-alibaba-rocketmq &amp;amp; v5-6-alibaba-rabbitmq
S01. MQ概念入门 E01. MQ相关基础概念 1. MQ基本概念 心法: 消息队列 MessageQueue，简称MQ
当系统中出现生产和消费的速度或稳定性等因素不一致时，就需要使用MQ作为一个抽象的中间层技术，来弥合双方的差异。 MQ主要用于对微服务间通信进行解耦，对高并发请求进行削峰填谷，异步操作提高系统性能。 关键词 中文 描述 示例 Message 消息 两个应用间传递的数据单位 简单的文本字符串，复杂的Java对象等 MessageQueue 消息队列 在消息的传输过程中，保存消息的容器 RocketMQ，RabbitMQ等 2. MQ四大特征 心法: 消息队列的四大特征
特征 描述 MQ消息不丢失 MQ采取 PUT-GET-DELETE 模式，仅在消息被完整处理后才会将其删除 MQ服务无关联 MQ下游服务崩溃，上游服务仍可继续PUT，等待下游服务恢复 MQ处理不重复 MQ中的一个消息仅被处理一次，被某个下游服务获取时会锁定 MQ处理可延时 MQ中的消息可以被延时处理，更加灵活 E02. MQ的幂等性保证 心法: 所谓幂等性
若短时间内，一个方法被多次调用的结果和只调用一次的结果相同，则该方法具有幂等性。 常见请求类型中，GET/DELETE/PUT 请求都是幂等的，只有 POST 请求不幂等。 1. MQ重复消费 心法: MQ的重复消费现象
无论那种MQ产品，当消费者消费完毕后，都会向消息队列发送一个确认消息： 比如RabbitMQ的消费者在消费完成后，会向MQ发送一个 ACK 确认消息。 比如RocketMQ的消费者在消费完成后，会向MQ发送一个 CONSUME_SUCCESS 确认消息。 若某个消费者A发送确认消息时出现网络故障，则可能发现重复消费情况： 首先MQ因为消费者A超时而判定此次消费失败（但事实上消费者A已经消费成功了，只不过确认消息没发过来）。 然后MQ会将该消息分派给其他消费者B。 最终造成消费者A和消费者B重复消费。 因此只要保证MQ的幂等性，就可以保证MQ的消息不被重复消费。 2.</description></item><item><title>JB5-7-配置中心</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/JB5-7-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</guid><description>[!NOTE] Java道经第5卷 - 第7阶 - 配置中心 v5-7-alibaba-nacosconfig
S01. NacosConfig概念入门 心法: 为何使用配置中心
传统微服务架构的配置文件缺点： 相对分散：在一个微服务架构下，配置文件分散在各个微服务中，不好统一配置和管理。 无法区分环境：微服务项目包含测试，开发，生产等多种不同配置的环境，需要分别手动更新维护，很麻烦。 无法实时更新：修改配置后，必须重启服务才能使配置生效。 引入配置中心组件之后： 项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。 当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。 当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新。 常见配置中心产品 描述 Apollo 携程开源，支持实时更新，灰度发布，能对所有的配置进行版本管理、操作审计等功能 Disconf 百度开源，基于Zookeeper来实现配置变更后实时通知和生效 SpringCloudConfig SpringCloud开源，和Spring是无缝集成，但无操作界面，且不支持实时更新，需要重启或刷新 NacosConfig SpingCloudAlibaba开源，支持实时更新和版本管理，推荐使用 E01. 开发测试项目 武技: 创建 v5-7-alibaba-nacosconfig/nacosconfig-order 和 v5-7-alibaba-nacosconfig/nacosconfig-product 两个子项目，用于测试配置中心
1. 添加三方依赖 分别在两个子项目中引入三方依赖： pom.xml
&amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-alibaba-nacos-discovery--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-alibaba-nacos-config--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2. 开发启动类 在 v5-7-alibaba-nacosconfig/nacosconfig-order 子项目中开发启动类： com.lsx.NacosConfigOrderApp
/** @author lsx */ @SpringBootApplication public class NacosConfigOrderApp { public static void main(String[] args) { SpringApplication.</description></item><item><title>JB5-8-事务机制</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/JB5-8-%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</guid><description>[!NOTE] Java道经第5卷 - 第8阶 - 事务机制 v5-8-alibaba-seata
S01. Seata概念入门 E01. 基础入门概念 1. 分布式事务 心法: 分布式事务
分布式事务是为了保证当一个事务中的N个操作分布在不同的微服务中时，仍可以具有本地事务的ACID特性。 2. Seata基础概念 心法: Simple Extensible Autonomous Transaction Architecture
Seata是阿里巴巴架构中的分布式事务解决方案，对业务无侵入。 Seata让分布式事务的使用像本地事务的使用一样简单和高效。 Seata1.5.X版本SeataServer的配置文件只需要配置 application.yml 配置文件即可。 从1.5.2版本开始支持Mysql8版本。 核心组件 全称 中文 功能描述 TC Transaction Coordinator 事务协调器 用于协调全局事务 RM Resource Manager 资源管理器 用于发起分支事务 TM Transaction Manager 事务管理器 用于向TC申请全局事务 3. SeataAT模式 心法: Seata底层原理 - AT模式
E02. 搭建Seata环境 武技：搭建Seata使用环境
1. 创建Seata数据库 武技：创建seata专用数据库，并引入Seata服务相关的4张表
创建seata专用数据库： -- 创建数据库 create database seata character set utf8mb4; use seata; 引入 Seata相关4张表：Seata相关4张表GitHub地址 2.</description></item><item><title>JB5-9-安全框架</title><link>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC5%E9%98%B6%E6%AE%B5-ALIBABA/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/JB5-9-%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</guid><description>Java道经第5卷 - 第9阶 - v5-alibaba - 安全框架
CH01. Security概念入门 心法: 安全框架
安全框架就是解决系统安全的框架，可以通过配置的方式实现对资源的访问限制. 目前主流安全框架产品包括Spring家族的SpringSecurity框架和Apache的Shiro框架。 心法: SpringSecurity安全框架
SpringSecurity是Spring用于提供声明式安全访问控制解决方案的安全框架。 SpringSecurity核心认证: 比对用户的账号密码身份等信息，即登录。 SpringSecurity核心授权: 为用户赋权或赋角色。 EP01. 搭建项目环境 心法: SpringSecurity项目涉及到的表
member: 会员表。 role: 角色表 permission: 权限表 member_role: 会员-角色中间表/关系表，会员与角色是多对多关系。 role_permission: 角色-权限中间表/关系表，角色与权限是多对多关系。 武技: 创建测试子项目 alibaba-auth 并搭建基础项目环境
添加三方依赖 pom.xml &amp;lt;!--三方依赖--&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!--alibaba-common--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lsx&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;alibaba-common&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter-web--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-alibaba-nacos-discovery--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-cloud-starter-openfeign--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mybatis-plus-boot-starter--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql-connector-java--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!</description></item><item><title>MinIO</title><link>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/Docker%E5%AE%89%E8%A3%85MinIO/Docker%E5%AE%89%E8%A3%85MinIO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lsx2216.netlify.app/%E7%AC%AC3%E9%98%B6%E6%AE%B5-SSM/JB3-4-SpringBoot/res/Docker%E5%AE%89%E8%A3%85MinIO/Docker%E5%AE%89%E8%A3%85MinIO/</guid><description>S01. 安装MinIO容器 武技: 在Docker中安装一个单机的MinIO容器
准备MinIO的相关目录: # 准备MinIO相关目录 mkdir -p /opt/minio/conf; mkdir -p /opt/minio/data; chmod 777 -R /opt/minio; 创建并运行MinIO单机容器: # 拉取镜像（二选一） docker pull minio/minio:RELEASE.2023-08-31T15-31-16Z; docker pull registry.cn-hangzhou.aliyuncs.com/lsx/minio:2023; # 创建并运行MinIO容器 # arg: `-e &amp;#34;MINIO_ACCESS_KEY=minioadmin&amp;#34;`: 访问账号 # arg: `-e &amp;#34;MINIO_SECRET_KEY=minioadmin&amp;#34;`: 访问密码 # arg: `server /data`: 将数据存储在data目录中 # arg: `--console-adress`: 控制台访问地址 # arg: `--address`: API访问地址 # 账号长度必须大于等于5，密码长度必须大于等于8 docker run --name minio -d -p 9000:9000 -p 9001:9001 --network my-net \ -e &amp;#34;MINIO_ACCESS_KEY=minioadmin&amp;#34; \ -e &amp;#34;MINIO_SECRET_KEY=minioadmin&amp;#34; \ -v /opt/minio/conf:/root/.</description></item></channel></rss>